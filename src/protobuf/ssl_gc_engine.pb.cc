// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_engine.proto

#include "ssl_gc_engine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_ssl_5fgc_5fcommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RobotId;
}  // namespace protobuf_ssl_5fgc_5fcommon_2eproto
namespace protobuf_ssl_5fgc_5fengine_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ContinueHint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GcStateAutoRef;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GcState_TrackersEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TeamAdvantageChoice;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Ball;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ContinueAction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GcStateTeam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GcState_AutoRefStateEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GcState_TeamStateEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fengine_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Robot;
}  // namespace protobuf_ssl_5fgc_5fengine_2eproto
namespace protobuf_ssl_5fgc_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector2;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_ssl_5fgc_5fgeometry_2eproto
class GcState_TeamStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcState_TeamStateEntry_DoNotUse>
      _instance;
} _GcState_TeamStateEntry_DoNotUse_default_instance_;
class GcState_AutoRefStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcState_AutoRefStateEntry_DoNotUse>
      _instance;
} _GcState_AutoRefStateEntry_DoNotUse_default_instance_;
class GcState_TrackersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcState_TrackersEntry_DoNotUse>
      _instance;
} _GcState_TrackersEntry_DoNotUse_default_instance_;
class GcStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcState>
      _instance;
} _GcState_default_instance_;
class GcStateTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcStateTeam>
      _instance;
} _GcStateTeam_default_instance_;
class TeamAdvantageChoiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamAdvantageChoice>
      _instance;
} _TeamAdvantageChoice_default_instance_;
class GcStateAutoRefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcStateAutoRef>
      _instance;
} _GcStateAutoRef_default_instance_;
class GcStateTrackerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GcStateTracker>
      _instance;
} _GcStateTracker_default_instance_;
class BallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ball>
      _instance;
} _Ball_default_instance_;
class RobotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Robot>
      _instance;
} _Robot_default_instance_;
class ContinueActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContinueAction>
      _instance;
} _ContinueAction_default_instance_;
class ContinueHintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContinueHint>
      _instance;
} _ContinueHint_default_instance_;
namespace protobuf_ssl_5fgc_5fengine_2eproto {
static void InitDefaultsGcState_TeamStateEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcState_TeamStateEntry_DoNotUse_default_instance_;
    new (ptr) ::GcState_TeamStateEntry_DoNotUse();
  }
  ::GcState_TeamStateEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GcState_TeamStateEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGcState_TeamStateEntry_DoNotUse}, {
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_GcStateTeam.base,}};

static void InitDefaultsGcState_AutoRefStateEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcState_AutoRefStateEntry_DoNotUse_default_instance_;
    new (ptr) ::GcState_AutoRefStateEntry_DoNotUse();
  }
  ::GcState_AutoRefStateEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GcState_AutoRefStateEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGcState_AutoRefStateEntry_DoNotUse}, {
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_GcStateAutoRef.base,}};

static void InitDefaultsGcState_TrackersEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcState_TrackersEntry_DoNotUse_default_instance_;
    new (ptr) ::GcState_TrackersEntry_DoNotUse();
  }
  ::GcState_TrackersEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GcState_TrackersEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGcState_TrackersEntry_DoNotUse}, {}};

static void InitDefaultsGcState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcState_default_instance_;
    new (ptr) ::GcState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GcState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_GcState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsGcState}, {
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_GcState_TeamStateEntry_DoNotUse.base,
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_GcState_AutoRefStateEntry_DoNotUse.base,
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_GcState_TrackersEntry_DoNotUse.base,
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_ContinueAction.base,
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_ContinueHint.base,}};

static void InitDefaultsGcStateTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcStateTeam_default_instance_;
    new (ptr) ::GcStateTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GcStateTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GcStateTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGcStateTeam}, {
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_TeamAdvantageChoice.base,}};

static void InitDefaultsTeamAdvantageChoice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TeamAdvantageChoice_default_instance_;
    new (ptr) ::TeamAdvantageChoice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TeamAdvantageChoice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TeamAdvantageChoice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTeamAdvantageChoice}, {}};

static void InitDefaultsGcStateAutoRef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcStateAutoRef_default_instance_;
    new (ptr) ::GcStateAutoRef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GcStateAutoRef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GcStateAutoRef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGcStateAutoRef}, {}};

static void InitDefaultsGcStateTracker() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GcStateTracker_default_instance_;
    new (ptr) ::GcStateTracker();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GcStateTracker::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GcStateTracker =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGcStateTracker}, {
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_Ball.base,
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_Robot.base,}};

static void InitDefaultsBall() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Ball_default_instance_;
    new (ptr) ::Ball();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Ball::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Ball =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBall}, {
      &protobuf_ssl_5fgc_5fgeometry_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsRobot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Robot_default_instance_;
    new (ptr) ::Robot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Robot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Robot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRobot}, {
      &protobuf_ssl_5fgc_5fcommon_2eproto::scc_info_RobotId.base,
      &protobuf_ssl_5fgc_5fgeometry_2eproto::scc_info_Vector2.base,}};

static void InitDefaultsContinueAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContinueAction_default_instance_;
    new (ptr) ::ContinueAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContinueAction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ContinueAction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsContinueAction}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsContinueHint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContinueHint_default_instance_;
    new (ptr) ::ContinueHint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContinueHint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ContinueHint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContinueHint}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GcState_TeamStateEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GcState_AutoRefStateEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GcState_TrackersEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GcState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GcStateTeam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TeamAdvantageChoice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GcStateAutoRef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GcStateTracker.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ball.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Robot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContinueAction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContinueHint.base);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState_TeamStateEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState_TeamStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState_TeamStateEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState_TeamStateEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState_AutoRefStateEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState_AutoRefStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState_AutoRefStateEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState_AutoRefStateEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState_TrackersEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState_TrackersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState_TrackersEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState_TrackersEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState, team_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState, auto_ref_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState, trackers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState, continue_actions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcState, continue_hints_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateTeam, connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateTeam, connection_verified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateTeam, remote_control_connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateTeam, remote_control_connection_verified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateTeam, advantage_choice_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamAdvantageChoice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamAdvantageChoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamAdvantageChoice, choice_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateAutoRef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateAutoRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateAutoRef, connection_verified_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateTracker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateTracker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateTracker, source_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateTracker, uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateTracker, ball_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GcStateTracker, robots_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Ball, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Ball, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Ball, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Ball, vel_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Robot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Robot, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Robot, pos_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContinueAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContinueAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContinueAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContinueAction, for_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContinueAction, continuation_issues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContinueAction, ready_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContinueAction, state_),
  1,
  2,
  ~0u,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContinueHint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContinueHint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ContinueHint, message_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::GcState_TeamStateEntry_DoNotUse)},
  { 9, 16, sizeof(::GcState_AutoRefStateEntry_DoNotUse)},
  { 18, 25, sizeof(::GcState_TrackersEntry_DoNotUse)},
  { 27, 37, sizeof(::GcState)},
  { 42, 52, sizeof(::GcStateTeam)},
  { 57, 63, sizeof(::TeamAdvantageChoice)},
  { 64, 70, sizeof(::GcStateAutoRef)},
  { 71, 80, sizeof(::GcStateTracker)},
  { 84, 91, sizeof(::Ball)},
  { 93, 100, sizeof(::Robot)},
  { 102, 112, sizeof(::ContinueAction)},
  { 117, 123, sizeof(::ContinueHint)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GcState_TeamStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GcState_AutoRefStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GcState_TrackersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GcState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GcStateTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TeamAdvantageChoice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GcStateAutoRef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GcStateTracker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Ball_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Robot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ContinueAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ContinueHint_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ssl_gc_engine.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023ssl_gc_engine.proto\032\025ssl_gc_geometry.p"
      "roto\032\023ssl_gc_common.proto\032\037google/protob"
      "uf/timestamp.proto\"\235\003\n\007GcState\022+\n\nteam_s"
      "tate\030\001 \003(\0132\027.GcState.TeamStateEntry\0222\n\016a"
      "uto_ref_state\030\002 \003(\0132\032.GcState.AutoRefSta"
      "teEntry\022(\n\010trackers\030\003 \003(\0132\026.GcState.Trac"
      "kersEntry\022)\n\020continue_actions\030\004 \003(\0132\017.Co"
      "ntinueAction\022%\n\016continue_hints\030\005 \003(\0132\r.C"
      "ontinueHint\032>\n\016TeamStateEntry\022\013\n\003key\030\001 \001"
      "(\t\022\033\n\005value\030\002 \001(\0132\014.GcStateTeam:\0028\001\032D\n\021A"
      "utoRefStateEntry\022\013\n\003key\030\001 \001(\t\022\036\n\005value\030\002"
      " \001(\0132\017.GcStateAutoRef:\0028\001\032/\n\rTrackersEnt"
      "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\273\001\n\013G"
      "cStateTeam\022\021\n\tconnected\030\001 \001(\010\022\033\n\023connect"
      "ion_verified\030\002 \001(\010\022 \n\030remote_control_con"
      "nected\030\003 \001(\010\022*\n\"remote_control_connectio"
      "n_verified\030\004 \001(\010\022.\n\020advantage_choice\030\005 \001"
      "(\0132\024.TeamAdvantageChoice\"v\n\023TeamAdvantag"
      "eChoice\0224\n\006choice\030\001 \001(\0162$.TeamAdvantageC"
      "hoice.AdvantageChoice\")\n\017AdvantageChoice"
      "\022\010\n\004STOP\020\000\022\014\n\010CONTINUE\020\001\"-\n\016GcStateAutoR"
      "ef\022\033\n\023connection_verified\030\001 \001(\010\"`\n\016GcSta"
      "teTracker\022\023\n\013source_name\030\001 \001(\t\022\014\n\004uuid\030\004"
      " \001(\t\022\023\n\004ball\030\002 \001(\0132\005.Ball\022\026\n\006robots\030\003 \003("
      "\0132\006.Robot\"4\n\004Ball\022\025\n\003pos\030\001 \001(\0132\010.Vector3"
      "\022\025\n\003vel\030\002 \001(\0132\010.Vector3\"4\n\005Robot\022\024\n\002id\030\001"
      " \001(\0132\010.RobotId\022\025\n\003pos\030\002 \001(\0132\010.Vector2\"\304\005"
      "\n\016ContinueAction\022\"\n\004type\030\001 \002(\0162\024.Continu"
      "eAction.Type\022\027\n\010for_team\030\002 \002(\0162\005.Team\022\033\n"
      "\023continuation_issues\030\003 \003(\t\022,\n\010ready_at\030\004"
      " \001(\0132\032.google.protobuf.Timestamp\022$\n\005stat"
      "e\030\005 \001(\0162\025.ContinueAction.State\"\235\003\n\004Type\022"
      "\020\n\014TYPE_UNKNOWN\020\000\022\010\n\004HALT\020\001\022\024\n\020RESUME_FR"
      "OM_HALT\020\n\022\r\n\tSTOP_GAME\020\002\022\017\n\013FORCE_START\020"
      "\013\022\r\n\tFREE_KICK\020\021\022\020\n\014NEXT_COMMAND\020\003\022\030\n\024BA"
      "LL_PLACEMENT_START\020\004\022\031\n\025BALL_PLACEMENT_C"
      "ANCEL\020\t\022\033\n\027BALL_PLACEMENT_COMPLETE\020\016\022\027\n\023"
      "BALL_PLACEMENT_FAIL\020\017\022\021\n\rTIMEOUT_START\020\005"
      "\022\020\n\014TIMEOUT_STOP\020\006\022\024\n\020BOT_SUBSTITUTION\020\007"
      "\022\016\n\nNEXT_STAGE\020\010\022\014\n\010END_GAME\020\020\022\017\n\013ACCEPT"
      "_GOAL\020\014\022\017\n\013REJECT_GOAL\020\024\022\020\n\014NORMAL_START"
      "\020\r\022\024\n\020CHALLENGE_ACCEPT\020\022\022\024\n\020CHALLENGE_RE"
      "JECT\020\023\"d\n\005State\022\021\n\rSTATE_UNKNOWN\020\000\022\013\n\007BL"
      "OCKED\020\001\022\013\n\007WAITING\020\002\022\016\n\nREADY_AUTO\020\003\022\020\n\014"
      "READY_MANUAL\020\004\022\014\n\010DISABLED\020\005\"\037\n\014Continue"
      "Hint\022\017\n\007message\030\001 \002(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1821);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_gc_engine.proto", &protobuf_RegisterTypes);
  ::protobuf_ssl_5fgc_5fgeometry_2eproto::AddDescriptors();
  ::protobuf_ssl_5fgc_5fcommon_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ssl_5fgc_5fengine_2eproto
const ::google::protobuf::EnumDescriptor* TeamAdvantageChoice_AdvantageChoice_descriptor() {
  protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgc_5fengine_2eproto::file_level_enum_descriptors[0];
}
bool TeamAdvantageChoice_AdvantageChoice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::STOP;
const TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::CONTINUE;
const TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::AdvantageChoice_MIN;
const TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::AdvantageChoice_MAX;
const int TeamAdvantageChoice::AdvantageChoice_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ContinueAction_Type_descriptor() {
  protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgc_5fengine_2eproto::file_level_enum_descriptors[1];
}
bool ContinueAction_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ContinueAction_Type ContinueAction::TYPE_UNKNOWN;
const ContinueAction_Type ContinueAction::HALT;
const ContinueAction_Type ContinueAction::RESUME_FROM_HALT;
const ContinueAction_Type ContinueAction::STOP_GAME;
const ContinueAction_Type ContinueAction::FORCE_START;
const ContinueAction_Type ContinueAction::FREE_KICK;
const ContinueAction_Type ContinueAction::NEXT_COMMAND;
const ContinueAction_Type ContinueAction::BALL_PLACEMENT_START;
const ContinueAction_Type ContinueAction::BALL_PLACEMENT_CANCEL;
const ContinueAction_Type ContinueAction::BALL_PLACEMENT_COMPLETE;
const ContinueAction_Type ContinueAction::BALL_PLACEMENT_FAIL;
const ContinueAction_Type ContinueAction::TIMEOUT_START;
const ContinueAction_Type ContinueAction::TIMEOUT_STOP;
const ContinueAction_Type ContinueAction::BOT_SUBSTITUTION;
const ContinueAction_Type ContinueAction::NEXT_STAGE;
const ContinueAction_Type ContinueAction::END_GAME;
const ContinueAction_Type ContinueAction::ACCEPT_GOAL;
const ContinueAction_Type ContinueAction::REJECT_GOAL;
const ContinueAction_Type ContinueAction::NORMAL_START;
const ContinueAction_Type ContinueAction::CHALLENGE_ACCEPT;
const ContinueAction_Type ContinueAction::CHALLENGE_REJECT;
const ContinueAction_Type ContinueAction::Type_MIN;
const ContinueAction_Type ContinueAction::Type_MAX;
const int ContinueAction::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ContinueAction_State_descriptor() {
  protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgc_5fengine_2eproto::file_level_enum_descriptors[2];
}
bool ContinueAction_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ContinueAction_State ContinueAction::STATE_UNKNOWN;
const ContinueAction_State ContinueAction::BLOCKED;
const ContinueAction_State ContinueAction::WAITING;
const ContinueAction_State ContinueAction::READY_AUTO;
const ContinueAction_State ContinueAction::READY_MANUAL;
const ContinueAction_State ContinueAction::DISABLED;
const ContinueAction_State ContinueAction::State_MIN;
const ContinueAction_State ContinueAction::State_MAX;
const int ContinueAction::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

GcState_TeamStateEntry_DoNotUse::GcState_TeamStateEntry_DoNotUse() {}
GcState_TeamStateEntry_DoNotUse::GcState_TeamStateEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GcState_TeamStateEntry_DoNotUse::MergeFrom(const GcState_TeamStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GcState_TeamStateEntry_DoNotUse::GetMetadata() const {
  ::protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[0];
}
void GcState_TeamStateEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

GcState_AutoRefStateEntry_DoNotUse::GcState_AutoRefStateEntry_DoNotUse() {}
GcState_AutoRefStateEntry_DoNotUse::GcState_AutoRefStateEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GcState_AutoRefStateEntry_DoNotUse::MergeFrom(const GcState_AutoRefStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GcState_AutoRefStateEntry_DoNotUse::GetMetadata() const {
  ::protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[1];
}
void GcState_AutoRefStateEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

GcState_TrackersEntry_DoNotUse::GcState_TrackersEntry_DoNotUse() {}
GcState_TrackersEntry_DoNotUse::GcState_TrackersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GcState_TrackersEntry_DoNotUse::MergeFrom(const GcState_TrackersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GcState_TrackersEntry_DoNotUse::GetMetadata() const {
  ::protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[2];
}
void GcState_TrackersEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void GcState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcState::kTeamStateFieldNumber;
const int GcState::kAutoRefStateFieldNumber;
const int GcState::kTrackersFieldNumber;
const int GcState::kContinueActionsFieldNumber;
const int GcState::kContinueHintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcState::GcState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_GcState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GcState)
}
GcState::GcState(const GcState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      continue_actions_(from.continue_actions_),
      continue_hints_(from.continue_hints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_state_.MergeFrom(from.team_state_);
  auto_ref_state_.MergeFrom(from.auto_ref_state_);
  trackers_.MergeFrom(from.trackers_);
  // @@protoc_insertion_point(copy_constructor:GcState)
}

void GcState::SharedCtor() {
}

GcState::~GcState() {
  // @@protoc_insertion_point(destructor:GcState)
  SharedDtor();
}

void GcState::SharedDtor() {
}

void GcState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GcState::descriptor() {
  ::protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcState& GcState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fengine_2eproto::scc_info_GcState.base);
  return *internal_default_instance();
}


void GcState::Clear() {
// @@protoc_insertion_point(message_clear_start:GcState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_state_.Clear();
  auto_ref_state_.Clear();
  trackers_.Clear();
  continue_actions_.Clear();
  continue_hints_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GcState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GcState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .GcStateTeam> team_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          GcState_TeamStateEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GcState_TeamStateEntry_DoNotUse,
              ::std::string, ::GcStateTeam,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::GcStateTeam > > parser(&team_state_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GcState.TeamStateEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .GcStateAutoRef> auto_ref_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          GcState_AutoRefStateEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GcState_AutoRefStateEntry_DoNotUse,
              ::std::string, ::GcStateAutoRef,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::GcStateAutoRef > > parser(&auto_ref_state_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GcState.AutoRefStateEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> trackers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          GcState_TrackersEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GcState_TrackersEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&trackers_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GcState.TrackersEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GcState.TrackersEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ContinueAction continue_actions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_continue_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ContinueHint continue_hints = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_continue_hints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GcState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GcState)
  return false;
#undef DO_
}

void GcState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GcState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .GcStateTeam> team_state = 1;
  if (!this->team_state().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::GcStateTeam >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "GcState.TeamStateEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->team_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->team_state().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::GcStateTeam >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::GcStateTeam >::const_iterator
          it = this->team_state().begin();
          it != this->team_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GcState_TeamStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(team_state_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GcState_TeamStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::GcStateTeam >::const_iterator
          it = this->team_state().begin();
          it != this->team_state().end(); ++it) {
        entry.reset(team_state_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .GcStateAutoRef> auto_ref_state = 2;
  if (!this->auto_ref_state().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::GcStateAutoRef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "GcState.AutoRefStateEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->auto_ref_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->auto_ref_state().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::GcStateAutoRef >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::GcStateAutoRef >::const_iterator
          it = this->auto_ref_state().begin();
          it != this->auto_ref_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GcState_AutoRefStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(auto_ref_state_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GcState_AutoRefStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::GcStateAutoRef >::const_iterator
          it = this->auto_ref_state().begin();
          it != this->auto_ref_state().end(); ++it) {
        entry.reset(auto_ref_state_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> trackers = 3;
  if (!this->trackers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "GcState.TrackersEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "GcState.TrackersEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->trackers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->trackers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->trackers().begin();
          it != this->trackers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GcState_TrackersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(trackers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GcState_TrackersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->trackers().begin();
          it != this->trackers().end(); ++it) {
        entry.reset(trackers_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .ContinueAction continue_actions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->continue_actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->continue_actions(static_cast<int>(i)),
      output);
  }

  // repeated .ContinueHint continue_hints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->continue_hints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->continue_hints(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GcState)
}

::google::protobuf::uint8* GcState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GcState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .GcStateTeam> team_state = 1;
  if (!this->team_state().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::GcStateTeam >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "GcState.TeamStateEntry.key");
      }
    };

    if (deterministic &&
        this->team_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->team_state().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::GcStateTeam >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::GcStateTeam >::const_iterator
          it = this->team_state().begin();
          it != this->team_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GcState_TeamStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(team_state_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GcState_TeamStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::GcStateTeam >::const_iterator
          it = this->team_state().begin();
          it != this->team_state().end(); ++it) {
        entry.reset(team_state_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .GcStateAutoRef> auto_ref_state = 2;
  if (!this->auto_ref_state().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::GcStateAutoRef >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "GcState.AutoRefStateEntry.key");
      }
    };

    if (deterministic &&
        this->auto_ref_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->auto_ref_state().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::GcStateAutoRef >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::GcStateAutoRef >::const_iterator
          it = this->auto_ref_state().begin();
          it != this->auto_ref_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GcState_AutoRefStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(auto_ref_state_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GcState_AutoRefStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::GcStateAutoRef >::const_iterator
          it = this->auto_ref_state().begin();
          it != this->auto_ref_state().end(); ++it) {
        entry.reset(auto_ref_state_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> trackers = 3;
  if (!this->trackers().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "GcState.TrackersEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "GcState.TrackersEntry.value");
      }
    };

    if (deterministic &&
        this->trackers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->trackers().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->trackers().begin();
          it != this->trackers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GcState_TrackersEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(trackers_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<GcState_TrackersEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->trackers().begin();
          it != this->trackers().end(); ++it) {
        entry.reset(trackers_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .ContinueAction continue_actions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->continue_actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->continue_actions(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ContinueHint continue_hints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->continue_hints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->continue_hints(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GcState)
  return target;
}

size_t GcState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GcState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<string, .GcStateTeam> team_state = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->team_state_size());
  {
    ::std::unique_ptr<GcState_TeamStateEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::GcStateTeam >::const_iterator
        it = this->team_state().begin();
        it != this->team_state().end(); ++it) {
      entry.reset(team_state_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .GcStateAutoRef> auto_ref_state = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->auto_ref_state_size());
  {
    ::std::unique_ptr<GcState_AutoRefStateEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::GcStateAutoRef >::const_iterator
        it = this->auto_ref_state().begin();
        it != this->auto_ref_state().end(); ++it) {
      entry.reset(auto_ref_state_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> trackers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->trackers_size());
  {
    ::std::unique_ptr<GcState_TrackersEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->trackers().begin();
        it != this->trackers().end(); ++it) {
      entry.reset(trackers_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .ContinueAction continue_actions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->continue_actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->continue_actions(static_cast<int>(i)));
    }
  }

  // repeated .ContinueHint continue_hints = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->continue_hints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->continue_hints(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GcState)
  GOOGLE_DCHECK_NE(&from, this);
  const GcState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GcState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GcState)
    MergeFrom(*source);
  }
}

void GcState::MergeFrom(const GcState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GcState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_state_.MergeFrom(from.team_state_);
  auto_ref_state_.MergeFrom(from.auto_ref_state_);
  trackers_.MergeFrom(from.trackers_);
  continue_actions_.MergeFrom(from.continue_actions_);
  continue_hints_.MergeFrom(from.continue_hints_);
}

void GcState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GcState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcState::CopyFrom(const GcState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GcState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcState::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->continue_actions())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->continue_hints())) return false;
  return true;
}

void GcState::Swap(GcState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcState::InternalSwap(GcState* other) {
  using std::swap;
  team_state_.Swap(&other->team_state_);
  auto_ref_state_.Swap(&other->auto_ref_state_);
  trackers_.Swap(&other->trackers_);
  CastToBase(&continue_actions_)->InternalSwap(CastToBase(&other->continue_actions_));
  CastToBase(&continue_hints_)->InternalSwap(CastToBase(&other->continue_hints_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GcState::GetMetadata() const {
  protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GcStateTeam::InitAsDefaultInstance() {
  ::_GcStateTeam_default_instance_._instance.get_mutable()->advantage_choice_ = const_cast< ::TeamAdvantageChoice*>(
      ::TeamAdvantageChoice::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcStateTeam::kConnectedFieldNumber;
const int GcStateTeam::kConnectionVerifiedFieldNumber;
const int GcStateTeam::kRemoteControlConnectedFieldNumber;
const int GcStateTeam::kRemoteControlConnectionVerifiedFieldNumber;
const int GcStateTeam::kAdvantageChoiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcStateTeam::GcStateTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_GcStateTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GcStateTeam)
}
GcStateTeam::GcStateTeam(const GcStateTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_advantage_choice()) {
    advantage_choice_ = new ::TeamAdvantageChoice(*from.advantage_choice_);
  } else {
    advantage_choice_ = NULL;
  }
  ::memcpy(&connected_, &from.connected_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_control_connection_verified_) -
    reinterpret_cast<char*>(&connected_)) + sizeof(remote_control_connection_verified_));
  // @@protoc_insertion_point(copy_constructor:GcStateTeam)
}

void GcStateTeam::SharedCtor() {
  ::memset(&advantage_choice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_control_connection_verified_) -
      reinterpret_cast<char*>(&advantage_choice_)) + sizeof(remote_control_connection_verified_));
}

GcStateTeam::~GcStateTeam() {
  // @@protoc_insertion_point(destructor:GcStateTeam)
  SharedDtor();
}

void GcStateTeam::SharedDtor() {
  if (this != internal_default_instance()) delete advantage_choice_;
}

void GcStateTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GcStateTeam::descriptor() {
  ::protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcStateTeam& GcStateTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fengine_2eproto::scc_info_GcStateTeam.base);
  return *internal_default_instance();
}


void GcStateTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:GcStateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(advantage_choice_ != NULL);
    advantage_choice_->Clear();
  }
  ::memset(&connected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_control_connection_verified_) -
      reinterpret_cast<char*>(&connected_)) + sizeof(remote_control_connection_verified_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GcStateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GcStateTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool connected = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_connected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool connection_verified = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_connection_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connection_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool remote_control_connected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_remote_control_connected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remote_control_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool remote_control_connection_verified = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_remote_control_connection_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remote_control_connection_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .TeamAdvantageChoice advantage_choice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_advantage_choice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GcStateTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GcStateTeam)
  return false;
#undef DO_
}

void GcStateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GcStateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool connected = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->connected(), output);
  }

  // optional bool connection_verified = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->connection_verified(), output);
  }

  // optional bool remote_control_connected = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->remote_control_connected(), output);
  }

  // optional bool remote_control_connection_verified = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->remote_control_connection_verified(), output);
  }

  // optional .TeamAdvantageChoice advantage_choice = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_advantage_choice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GcStateTeam)
}

::google::protobuf::uint8* GcStateTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GcStateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool connected = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->connected(), target);
  }

  // optional bool connection_verified = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->connection_verified(), target);
  }

  // optional bool remote_control_connected = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->remote_control_connected(), target);
  }

  // optional bool remote_control_connection_verified = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->remote_control_connection_verified(), target);
  }

  // optional .TeamAdvantageChoice advantage_choice = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_advantage_choice(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GcStateTeam)
  return target;
}

size_t GcStateTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GcStateTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .TeamAdvantageChoice advantage_choice = 5;
    if (has_advantage_choice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *advantage_choice_);
    }

    // optional bool connected = 1;
    if (has_connected()) {
      total_size += 1 + 1;
    }

    // optional bool connection_verified = 2;
    if (has_connection_verified()) {
      total_size += 1 + 1;
    }

    // optional bool remote_control_connected = 3;
    if (has_remote_control_connected()) {
      total_size += 1 + 1;
    }

    // optional bool remote_control_connection_verified = 4;
    if (has_remote_control_connection_verified()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcStateTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GcStateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const GcStateTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcStateTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GcStateTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GcStateTeam)
    MergeFrom(*source);
  }
}

void GcStateTeam::MergeFrom(const GcStateTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GcStateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_advantage_choice()->::TeamAdvantageChoice::MergeFrom(from.advantage_choice());
    }
    if (cached_has_bits & 0x00000002u) {
      connected_ = from.connected_;
    }
    if (cached_has_bits & 0x00000004u) {
      connection_verified_ = from.connection_verified_;
    }
    if (cached_has_bits & 0x00000008u) {
      remote_control_connected_ = from.remote_control_connected_;
    }
    if (cached_has_bits & 0x00000010u) {
      remote_control_connection_verified_ = from.remote_control_connection_verified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GcStateTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GcStateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcStateTeam::CopyFrom(const GcStateTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GcStateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcStateTeam::IsInitialized() const {
  return true;
}

void GcStateTeam::Swap(GcStateTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcStateTeam::InternalSwap(GcStateTeam* other) {
  using std::swap;
  swap(advantage_choice_, other->advantage_choice_);
  swap(connected_, other->connected_);
  swap(connection_verified_, other->connection_verified_);
  swap(remote_control_connected_, other->remote_control_connected_);
  swap(remote_control_connection_verified_, other->remote_control_connection_verified_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GcStateTeam::GetMetadata() const {
  protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamAdvantageChoice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamAdvantageChoice::kChoiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamAdvantageChoice::TeamAdvantageChoice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_TeamAdvantageChoice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamAdvantageChoice)
}
TeamAdvantageChoice::TeamAdvantageChoice(const TeamAdvantageChoice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  choice_ = from.choice_;
  // @@protoc_insertion_point(copy_constructor:TeamAdvantageChoice)
}

void TeamAdvantageChoice::SharedCtor() {
  choice_ = 0;
}

TeamAdvantageChoice::~TeamAdvantageChoice() {
  // @@protoc_insertion_point(destructor:TeamAdvantageChoice)
  SharedDtor();
}

void TeamAdvantageChoice::SharedDtor() {
}

void TeamAdvantageChoice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TeamAdvantageChoice::descriptor() {
  ::protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamAdvantageChoice& TeamAdvantageChoice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fengine_2eproto::scc_info_TeamAdvantageChoice.base);
  return *internal_default_instance();
}


void TeamAdvantageChoice::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamAdvantageChoice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choice_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamAdvantageChoice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamAdvantageChoice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamAdvantageChoice_AdvantageChoice_IsValid(value)) {
            set_choice(static_cast< ::TeamAdvantageChoice_AdvantageChoice >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamAdvantageChoice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamAdvantageChoice)
  return false;
#undef DO_
}

void TeamAdvantageChoice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamAdvantageChoice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->choice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamAdvantageChoice)
}

::google::protobuf::uint8* TeamAdvantageChoice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamAdvantageChoice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->choice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamAdvantageChoice)
  return target;
}

size_t TeamAdvantageChoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamAdvantageChoice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
  if (has_choice()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->choice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamAdvantageChoice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamAdvantageChoice)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamAdvantageChoice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamAdvantageChoice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamAdvantageChoice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamAdvantageChoice)
    MergeFrom(*source);
  }
}

void TeamAdvantageChoice::MergeFrom(const TeamAdvantageChoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamAdvantageChoice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_choice()) {
    set_choice(from.choice());
  }
}

void TeamAdvantageChoice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamAdvantageChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAdvantageChoice::CopyFrom(const TeamAdvantageChoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamAdvantageChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAdvantageChoice::IsInitialized() const {
  return true;
}

void TeamAdvantageChoice::Swap(TeamAdvantageChoice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamAdvantageChoice::InternalSwap(TeamAdvantageChoice* other) {
  using std::swap;
  swap(choice_, other->choice_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TeamAdvantageChoice::GetMetadata() const {
  protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GcStateAutoRef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcStateAutoRef::kConnectionVerifiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcStateAutoRef::GcStateAutoRef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_GcStateAutoRef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GcStateAutoRef)
}
GcStateAutoRef::GcStateAutoRef(const GcStateAutoRef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_verified_ = from.connection_verified_;
  // @@protoc_insertion_point(copy_constructor:GcStateAutoRef)
}

void GcStateAutoRef::SharedCtor() {
  connection_verified_ = false;
}

GcStateAutoRef::~GcStateAutoRef() {
  // @@protoc_insertion_point(destructor:GcStateAutoRef)
  SharedDtor();
}

void GcStateAutoRef::SharedDtor() {
}

void GcStateAutoRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GcStateAutoRef::descriptor() {
  ::protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcStateAutoRef& GcStateAutoRef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fengine_2eproto::scc_info_GcStateAutoRef.base);
  return *internal_default_instance();
}


void GcStateAutoRef::Clear() {
// @@protoc_insertion_point(message_clear_start:GcStateAutoRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_verified_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GcStateAutoRef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GcStateAutoRef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool connection_verified = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_connection_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connection_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GcStateAutoRef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GcStateAutoRef)
  return false;
#undef DO_
}

void GcStateAutoRef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GcStateAutoRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool connection_verified = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->connection_verified(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GcStateAutoRef)
}

::google::protobuf::uint8* GcStateAutoRef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GcStateAutoRef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool connection_verified = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->connection_verified(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GcStateAutoRef)
  return target;
}

size_t GcStateAutoRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GcStateAutoRef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool connection_verified = 1;
  if (has_connection_verified()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcStateAutoRef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GcStateAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  const GcStateAutoRef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcStateAutoRef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GcStateAutoRef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GcStateAutoRef)
    MergeFrom(*source);
  }
}

void GcStateAutoRef::MergeFrom(const GcStateAutoRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GcStateAutoRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connection_verified()) {
    set_connection_verified(from.connection_verified());
  }
}

void GcStateAutoRef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GcStateAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcStateAutoRef::CopyFrom(const GcStateAutoRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GcStateAutoRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcStateAutoRef::IsInitialized() const {
  return true;
}

void GcStateAutoRef::Swap(GcStateAutoRef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcStateAutoRef::InternalSwap(GcStateAutoRef* other) {
  using std::swap;
  swap(connection_verified_, other->connection_verified_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GcStateAutoRef::GetMetadata() const {
  protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GcStateTracker::InitAsDefaultInstance() {
  ::_GcStateTracker_default_instance_._instance.get_mutable()->ball_ = const_cast< ::Ball*>(
      ::Ball::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcStateTracker::kSourceNameFieldNumber;
const int GcStateTracker::kUuidFieldNumber;
const int GcStateTracker::kBallFieldNumber;
const int GcStateTracker::kRobotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcStateTracker::GcStateTracker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_GcStateTracker.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GcStateTracker)
}
GcStateTracker::GcStateTracker(const GcStateTracker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      robots_(from.robots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_name()) {
    source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uuid()) {
    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_ball()) {
    ball_ = new ::Ball(*from.ball_);
  } else {
    ball_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GcStateTracker)
}

void GcStateTracker::SharedCtor() {
  source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ball_ = NULL;
}

GcStateTracker::~GcStateTracker() {
  // @@protoc_insertion_point(destructor:GcStateTracker)
  SharedDtor();
}

void GcStateTracker::SharedDtor() {
  source_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ball_;
}

void GcStateTracker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GcStateTracker::descriptor() {
  ::protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GcStateTracker& GcStateTracker::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fengine_2eproto::scc_info_GcStateTracker.base);
  return *internal_default_instance();
}


void GcStateTracker::Clear() {
// @@protoc_insertion_point(message_clear_start:GcStateTracker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      source_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      uuid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ball_ != NULL);
      ball_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GcStateTracker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GcStateTracker)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_name().data(), static_cast<int>(this->source_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GcStateTracker.source_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Ball ball = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ball()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Robot robots = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_robots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string uuid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), static_cast<int>(this->uuid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GcStateTracker.uuid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GcStateTracker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GcStateTracker)
  return false;
#undef DO_
}

void GcStateTracker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GcStateTracker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_name().data(), static_cast<int>(this->source_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GcStateTracker.source_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source_name(), output);
  }

  // optional .Ball ball = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ball(), output);
  }

  // repeated .Robot robots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->robots(static_cast<int>(i)),
      output);
  }

  // optional string uuid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GcStateTracker.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GcStateTracker)
}

::google::protobuf::uint8* GcStateTracker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GcStateTracker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_name().data(), static_cast<int>(this->source_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GcStateTracker.source_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source_name(), target);
  }

  // optional .Ball ball = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ball(), deterministic, target);
  }

  // repeated .Robot robots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->robots(static_cast<int>(i)), deterministic, target);
  }

  // optional string uuid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), static_cast<int>(this->uuid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GcStateTracker.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GcStateTracker)
  return target;
}

size_t GcStateTracker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GcStateTracker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .Robot robots = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->robots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->robots(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string source_name = 1;
    if (has_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_name());
    }

    // optional string uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional .Ball ball = 2;
    if (has_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ball_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GcStateTracker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GcStateTracker)
  GOOGLE_DCHECK_NE(&from, this);
  const GcStateTracker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcStateTracker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GcStateTracker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GcStateTracker)
    MergeFrom(*source);
  }
}

void GcStateTracker::MergeFrom(const GcStateTracker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GcStateTracker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robots_.MergeFrom(from.robots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source_name();
      source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ball()->::Ball::MergeFrom(from.ball());
    }
  }
}

void GcStateTracker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GcStateTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcStateTracker::CopyFrom(const GcStateTracker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GcStateTracker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcStateTracker::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->robots())) return false;
  if (has_ball()) {
    if (!this->ball_->IsInitialized()) return false;
  }
  return true;
}

void GcStateTracker::Swap(GcStateTracker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GcStateTracker::InternalSwap(GcStateTracker* other) {
  using std::swap;
  CastToBase(&robots_)->InternalSwap(CastToBase(&other->robots_));
  source_name_.Swap(&other->source_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uuid_.Swap(&other->uuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ball_, other->ball_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GcStateTracker::GetMetadata() const {
  protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ball::InitAsDefaultInstance() {
  ::_Ball_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Vector3*>(
      ::Vector3::internal_default_instance());
  ::_Ball_default_instance_._instance.get_mutable()->vel_ = const_cast< ::Vector3*>(
      ::Vector3::internal_default_instance());
}
void Ball::clear_pos() {
  if (pos_ != NULL) pos_->Clear();
  clear_has_pos();
}
void Ball::clear_vel() {
  if (vel_ != NULL) vel_->Clear();
  clear_has_vel();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ball::kPosFieldNumber;
const int Ball::kVelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ball::Ball()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_Ball.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ball)
}
Ball::Ball(const Ball& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::Vector3(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_vel()) {
    vel_ = new ::Vector3(*from.vel_);
  } else {
    vel_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Ball)
}

void Ball::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(vel_));
}

Ball::~Ball() {
  // @@protoc_insertion_point(destructor:Ball)
  SharedDtor();
}

void Ball::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
}

void Ball::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ball::descriptor() {
  ::protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ball& Ball::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fengine_2eproto::scc_info_Ball.base);
  return *internal_default_instance();
}


void Ball::Clear() {
// @@protoc_insertion_point(message_clear_start:Ball)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vel_ != NULL);
      vel_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ball::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ball)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Vector3 pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Vector3 vel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ball)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ball)
  return false;
#undef DO_
}

void Ball::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ball)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Vector3 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pos(), output);
  }

  // optional .Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_vel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Ball)
}

::google::protobuf::uint8* Ball::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Ball)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Vector3 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pos(), deterministic, target);
  }

  // optional .Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_vel(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ball)
  return target;
}

size_t Ball::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ball)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .Vector3 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional .Vector3 vel = 2;
    if (has_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vel_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ball::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Ball)
  GOOGLE_DCHECK_NE(&from, this);
  const Ball* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ball>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Ball)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Ball)
    MergeFrom(*source);
  }
}

void Ball::MergeFrom(const Ball& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ball)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::Vector3::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vel()->::Vector3::MergeFrom(from.vel());
    }
  }
}

void Ball::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Ball)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ball::CopyFrom(const Ball& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ball)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball::IsInitialized() const {
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  if (has_vel()) {
    if (!this->vel_->IsInitialized()) return false;
  }
  return true;
}

void Ball::Swap(Ball* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ball::InternalSwap(Ball* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(vel_, other->vel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ball::GetMetadata() const {
  protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Robot::InitAsDefaultInstance() {
  ::_Robot_default_instance_._instance.get_mutable()->id_ = const_cast< ::RobotId*>(
      ::RobotId::internal_default_instance());
  ::_Robot_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
void Robot::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void Robot::clear_pos() {
  if (pos_ != NULL) pos_->Clear();
  clear_has_pos();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot::kIdFieldNumber;
const int Robot::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot::Robot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_Robot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Robot)
}
Robot::Robot(const Robot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::RobotId(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_pos()) {
    pos_ = new ::Vector2(*from.pos_);
  } else {
    pos_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Robot)
}

void Robot::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pos_));
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:Robot)
  SharedDtor();
}

void Robot::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete pos_;
}

void Robot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  ::protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Robot& Robot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fengine_2eproto::scc_info_Robot.base);
  return *internal_default_instance();
}


void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Robot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RobotId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Vector2 pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Robot)
  return false;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RobotId id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // optional .Vector2 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Robot)
}

::google::protobuf::uint8* Robot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .RobotId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // optional .Vector2 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pos(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Robot)
  return target;
}

size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Robot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .RobotId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .Vector2 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pos_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Robot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::RobotId::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pos()->::Vector2::MergeFrom(from.pos());
    }
  }
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  return true;
}

void Robot::Swap(Robot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot::InternalSwap(Robot* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(pos_, other->pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContinueAction::InitAsDefaultInstance() {
  ::_ContinueAction_default_instance_._instance.get_mutable()->ready_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void ContinueAction::clear_ready_at() {
  if (ready_at_ != NULL) ready_at_->Clear();
  clear_has_ready_at();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContinueAction::kTypeFieldNumber;
const int ContinueAction::kForTeamFieldNumber;
const int ContinueAction::kContinuationIssuesFieldNumber;
const int ContinueAction::kReadyAtFieldNumber;
const int ContinueAction::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContinueAction::ContinueAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_ContinueAction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContinueAction)
}
ContinueAction::ContinueAction(const ContinueAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      continuation_issues_(from.continuation_issues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ready_at()) {
    ready_at_ = new ::google::protobuf::Timestamp(*from.ready_at_);
  } else {
    ready_at_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&type_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:ContinueAction)
}

void ContinueAction::SharedCtor() {
  ::memset(&ready_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&ready_at_)) + sizeof(state_));
}

ContinueAction::~ContinueAction() {
  // @@protoc_insertion_point(destructor:ContinueAction)
  SharedDtor();
}

void ContinueAction::SharedDtor() {
  if (this != internal_default_instance()) delete ready_at_;
}

void ContinueAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContinueAction::descriptor() {
  ::protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContinueAction& ContinueAction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fengine_2eproto::scc_info_ContinueAction.base);
  return *internal_default_instance();
}


void ContinueAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ContinueAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  continuation_issues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ready_at_ != NULL);
    ready_at_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&type_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContinueAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContinueAction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ContinueAction.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContinueAction_Type_IsValid(value)) {
            set_type(static_cast< ::ContinueAction_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Team for_team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_for_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string continuation_issues = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_continuation_issues()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->continuation_issues(this->continuation_issues_size() - 1).data(),
            static_cast<int>(this->continuation_issues(this->continuation_issues_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContinueAction.continuation_issues");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp ready_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ready_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ContinueAction.State state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContinueAction_State_IsValid(value)) {
            set_state(static_cast< ::ContinueAction_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContinueAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContinueAction)
  return false;
#undef DO_
}

void ContinueAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContinueAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ContinueAction.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .Team for_team = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->for_team(), output);
  }

  // repeated string continuation_issues = 3;
  for (int i = 0, n = this->continuation_issues_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continuation_issues(i).data(), static_cast<int>(this->continuation_issues(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContinueAction.continuation_issues");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->continuation_issues(i), output);
  }

  // optional .google.protobuf.Timestamp ready_at = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_ready_at(), output);
  }

  // optional .ContinueAction.State state = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContinueAction)
}

::google::protobuf::uint8* ContinueAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContinueAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ContinueAction.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .Team for_team = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->for_team(), target);
  }

  // repeated string continuation_issues = 3;
  for (int i = 0, n = this->continuation_issues_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continuation_issues(i).data(), static_cast<int>(this->continuation_issues(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContinueAction.continuation_issues");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->continuation_issues(i), target);
  }

  // optional .google.protobuf.Timestamp ready_at = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_ready_at(), deterministic, target);
  }

  // optional .ContinueAction.State state = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContinueAction)
  return target;
}

size_t ContinueAction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ContinueAction)
  size_t total_size = 0;

  if (has_type()) {
    // required .ContinueAction.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_for_team()) {
    // required .Team for_team = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->for_team());
  }

  return total_size;
}
size_t ContinueAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContinueAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .ContinueAction.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required .Team for_team = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->for_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string continuation_issues = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->continuation_issues_size());
  for (int i = 0, n = this->continuation_issues_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->continuation_issues(i));
  }

  // optional .google.protobuf.Timestamp ready_at = 4;
  if (has_ready_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ready_at_);
  }

  // optional .ContinueAction.State state = 5;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContinueAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContinueAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ContinueAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContinueAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContinueAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContinueAction)
    MergeFrom(*source);
  }
}

void ContinueAction::MergeFrom(const ContinueAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContinueAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  continuation_issues_.MergeFrom(from.continuation_issues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ready_at()->::google::protobuf::Timestamp::MergeFrom(from.ready_at());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      for_team_ = from.for_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContinueAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContinueAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContinueAction::CopyFrom(const ContinueAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContinueAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinueAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void ContinueAction::Swap(ContinueAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContinueAction::InternalSwap(ContinueAction* other) {
  using std::swap;
  continuation_issues_.InternalSwap(CastToBase(&other->continuation_issues_));
  swap(ready_at_, other->ready_at_);
  swap(type_, other->type_);
  swap(for_team_, other->for_team_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContinueAction::GetMetadata() const {
  protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContinueHint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContinueHint::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContinueHint::ContinueHint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fengine_2eproto::scc_info_ContinueHint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContinueHint)
}
ContinueHint::ContinueHint(const ContinueHint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:ContinueHint)
}

void ContinueHint::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ContinueHint::~ContinueHint() {
  // @@protoc_insertion_point(destructor:ContinueHint)
  SharedDtor();
}

void ContinueHint::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContinueHint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContinueHint::descriptor() {
  ::protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContinueHint& ContinueHint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fengine_2eproto::scc_info_ContinueHint.base);
  return *internal_default_instance();
}


void ContinueHint::Clear() {
// @@protoc_insertion_point(message_clear_start:ContinueHint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContinueHint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContinueHint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ContinueHint.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContinueHint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContinueHint)
  return false;
#undef DO_
}

void ContinueHint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContinueHint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContinueHint.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContinueHint)
}

::google::protobuf::uint8* ContinueHint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ContinueHint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ContinueHint.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContinueHint)
  return target;
}

size_t ContinueHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContinueHint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContinueHint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContinueHint)
  GOOGLE_DCHECK_NE(&from, this);
  const ContinueHint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContinueHint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContinueHint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContinueHint)
    MergeFrom(*source);
  }
}

void ContinueHint::MergeFrom(const ContinueHint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContinueHint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    set_has_message();
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void ContinueHint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContinueHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContinueHint::CopyFrom(const ContinueHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContinueHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinueHint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ContinueHint::Swap(ContinueHint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContinueHint::InternalSwap(ContinueHint* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContinueHint::GetMetadata() const {
  protobuf_ssl_5fgc_5fengine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fengine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GcState_TeamStateEntry_DoNotUse* Arena::CreateMaybeMessage< ::GcState_TeamStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::GcState_TeamStateEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GcState_AutoRefStateEntry_DoNotUse* Arena::CreateMaybeMessage< ::GcState_AutoRefStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::GcState_AutoRefStateEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GcState_TrackersEntry_DoNotUse* Arena::CreateMaybeMessage< ::GcState_TrackersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::GcState_TrackersEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GcState* Arena::CreateMaybeMessage< ::GcState >(Arena* arena) {
  return Arena::CreateInternal< ::GcState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GcStateTeam* Arena::CreateMaybeMessage< ::GcStateTeam >(Arena* arena) {
  return Arena::CreateInternal< ::GcStateTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TeamAdvantageChoice* Arena::CreateMaybeMessage< ::TeamAdvantageChoice >(Arena* arena) {
  return Arena::CreateInternal< ::TeamAdvantageChoice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GcStateAutoRef* Arena::CreateMaybeMessage< ::GcStateAutoRef >(Arena* arena) {
  return Arena::CreateInternal< ::GcStateAutoRef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GcStateTracker* Arena::CreateMaybeMessage< ::GcStateTracker >(Arena* arena) {
  return Arena::CreateInternal< ::GcStateTracker >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Ball* Arena::CreateMaybeMessage< ::Ball >(Arena* arena) {
  return Arena::CreateInternal< ::Ball >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Robot* Arena::CreateMaybeMessage< ::Robot >(Arena* arena) {
  return Arena::CreateInternal< ::Robot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContinueAction* Arena::CreateMaybeMessage< ::ContinueAction >(Arena* arena) {
  return Arena::CreateInternal< ::ContinueAction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ContinueHint* Arena::CreateMaybeMessage< ::ContinueHint >(Arena* arena) {
  return Arena::CreateInternal< ::ContinueHint >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
