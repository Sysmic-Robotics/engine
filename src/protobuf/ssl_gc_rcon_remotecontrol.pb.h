// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_rcon_remotecontrol.proto

#ifndef PROTOBUF_INCLUDED_ssl_5fgc_5frcon_5fremotecontrol_2eproto
#define PROTOBUF_INCLUDED_ssl_5fgc_5frcon_5fremotecontrol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ssl_gc_common.pb.h"
#include "ssl_gc_rcon.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto 

namespace protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto
class ControllerToRemoteControl;
class ControllerToRemoteControlDefaultTypeInternal;
extern ControllerToRemoteControlDefaultTypeInternal _ControllerToRemoteControl_default_instance_;
class RemoteControlRegistration;
class RemoteControlRegistrationDefaultTypeInternal;
extern RemoteControlRegistrationDefaultTypeInternal _RemoteControlRegistration_default_instance_;
class RemoteControlTeamState;
class RemoteControlTeamStateDefaultTypeInternal;
extern RemoteControlTeamStateDefaultTypeInternal _RemoteControlTeamState_default_instance_;
class RemoteControlToController;
class RemoteControlToControllerDefaultTypeInternal;
extern RemoteControlToControllerDefaultTypeInternal _RemoteControlToController_default_instance_;
namespace google {
namespace protobuf {
template<> ::ControllerToRemoteControl* Arena::CreateMaybeMessage<::ControllerToRemoteControl>(Arena*);
template<> ::RemoteControlRegistration* Arena::CreateMaybeMessage<::RemoteControlRegistration>(Arena*);
template<> ::RemoteControlTeamState* Arena::CreateMaybeMessage<::RemoteControlTeamState>(Arena*);
template<> ::RemoteControlToController* Arena::CreateMaybeMessage<::RemoteControlToController>(Arena*);
}  // namespace protobuf
}  // namespace google

enum RemoteControlToController_Request {
  RemoteControlToController_Request_UNKNOWN = 0,
  RemoteControlToController_Request_PING = 1,
  RemoteControlToController_Request_CHALLENGE_FLAG = 2,
  RemoteControlToController_Request_STOP_TIMEOUT = 3,
  RemoteControlToController_Request_FAIL_BALLPLACEMENT = 4
};
bool RemoteControlToController_Request_IsValid(int value);
const RemoteControlToController_Request RemoteControlToController_Request_Request_MIN = RemoteControlToController_Request_UNKNOWN;
const RemoteControlToController_Request RemoteControlToController_Request_Request_MAX = RemoteControlToController_Request_FAIL_BALLPLACEMENT;
const int RemoteControlToController_Request_Request_ARRAYSIZE = RemoteControlToController_Request_Request_MAX + 1;

const ::google::protobuf::EnumDescriptor* RemoteControlToController_Request_descriptor();
inline const ::std::string& RemoteControlToController_Request_Name(RemoteControlToController_Request value) {
  return ::google::protobuf::internal::NameOfEnum(
    RemoteControlToController_Request_descriptor(), value);
}
inline bool RemoteControlToController_Request_Parse(
    const ::std::string& name, RemoteControlToController_Request* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RemoteControlToController_Request>(
    RemoteControlToController_Request_descriptor(), name, value);
}
enum RemoteControlRequestType {
  UNKNOWN_REQUEST_TYPE = 0,
  EMERGENCY_STOP = 1,
  ROBOT_SUBSTITUTION = 2,
  TIMEOUT = 3,
  CHALLENGE_FLAG = 4,
  CHANGE_KEEPER_ID = 5,
  STOP_TIMEOUT = 6,
  FAIL_BALLPLACEMENT = 7
};
bool RemoteControlRequestType_IsValid(int value);
const RemoteControlRequestType RemoteControlRequestType_MIN = UNKNOWN_REQUEST_TYPE;
const RemoteControlRequestType RemoteControlRequestType_MAX = FAIL_BALLPLACEMENT;
const int RemoteControlRequestType_ARRAYSIZE = RemoteControlRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RemoteControlRequestType_descriptor();
inline const ::std::string& RemoteControlRequestType_Name(RemoteControlRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RemoteControlRequestType_descriptor(), value);
}
inline bool RemoteControlRequestType_Parse(
    const ::std::string& name, RemoteControlRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RemoteControlRequestType>(
    RemoteControlRequestType_descriptor(), name, value);
}
// ===================================================================

class RemoteControlRegistration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemoteControlRegistration) */ {
 public:
  RemoteControlRegistration();
  virtual ~RemoteControlRegistration();

  RemoteControlRegistration(const RemoteControlRegistration& from);

  inline RemoteControlRegistration& operator=(const RemoteControlRegistration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoteControlRegistration(RemoteControlRegistration&& from) noexcept
    : RemoteControlRegistration() {
    *this = ::std::move(from);
  }

  inline RemoteControlRegistration& operator=(RemoteControlRegistration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteControlRegistration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteControlRegistration* internal_default_instance() {
    return reinterpret_cast<const RemoteControlRegistration*>(
               &_RemoteControlRegistration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RemoteControlRegistration* other);
  friend void swap(RemoteControlRegistration& a, RemoteControlRegistration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoteControlRegistration* New() const final {
    return CreateMaybeMessage<RemoteControlRegistration>(NULL);
  }

  RemoteControlRegistration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoteControlRegistration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoteControlRegistration& from);
  void MergeFrom(const RemoteControlRegistration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteControlRegistration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Signature signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  private:
  const ::Signature& _internal_signature() const;
  public:
  const ::Signature& signature() const;
  ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);

  // required .Team team = 1;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 1;
  ::Team team() const;
  void set_team(::Team value);

  // @@protoc_insertion_point(class_scope:RemoteControlRegistration)
 private:
  void set_has_team();
  void clear_has_team();
  void set_has_signature();
  void clear_has_signature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::Signature* signature_;
  int team_;
  friend struct ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoteControlToController : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemoteControlToController) */ {
 public:
  RemoteControlToController();
  virtual ~RemoteControlToController();

  RemoteControlToController(const RemoteControlToController& from);

  inline RemoteControlToController& operator=(const RemoteControlToController& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoteControlToController(RemoteControlToController&& from) noexcept
    : RemoteControlToController() {
    *this = ::std::move(from);
  }

  inline RemoteControlToController& operator=(RemoteControlToController&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteControlToController& default_instance();

  enum MsgCase {
    kRequest = 2,
    kDesiredKeeper = 3,
    kRequestRobotSubstitution = 4,
    kRequestTimeout = 5,
    kRequestEmergencyStop = 6,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteControlToController* internal_default_instance() {
    return reinterpret_cast<const RemoteControlToController*>(
               &_RemoteControlToController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RemoteControlToController* other);
  friend void swap(RemoteControlToController& a, RemoteControlToController& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoteControlToController* New() const final {
    return CreateMaybeMessage<RemoteControlToController>(NULL);
  }

  RemoteControlToController* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoteControlToController>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoteControlToController& from);
  void MergeFrom(const RemoteControlToController& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteControlToController* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RemoteControlToController_Request Request;
  static const Request UNKNOWN =
    RemoteControlToController_Request_UNKNOWN;
  static const Request PING =
    RemoteControlToController_Request_PING;
  static const Request CHALLENGE_FLAG =
    RemoteControlToController_Request_CHALLENGE_FLAG;
  static const Request STOP_TIMEOUT =
    RemoteControlToController_Request_STOP_TIMEOUT;
  static const Request FAIL_BALLPLACEMENT =
    RemoteControlToController_Request_FAIL_BALLPLACEMENT;
  static inline bool Request_IsValid(int value) {
    return RemoteControlToController_Request_IsValid(value);
  }
  static const Request Request_MIN =
    RemoteControlToController_Request_Request_MIN;
  static const Request Request_MAX =
    RemoteControlToController_Request_Request_MAX;
  static const int Request_ARRAYSIZE =
    RemoteControlToController_Request_Request_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Request_descriptor() {
    return RemoteControlToController_Request_descriptor();
  }
  static inline const ::std::string& Request_Name(Request value) {
    return RemoteControlToController_Request_Name(value);
  }
  static inline bool Request_Parse(const ::std::string& name,
      Request* value) {
    return RemoteControlToController_Request_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Signature signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  private:
  const ::Signature& _internal_signature() const;
  public:
  const ::Signature& signature() const;
  ::Signature* release_signature();
  ::Signature* mutable_signature();
  void set_allocated_signature(::Signature* signature);

  // optional .RemoteControlToController.Request request = 2;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 2;
  ::RemoteControlToController_Request request() const;
  void set_request(::RemoteControlToController_Request value);

  // optional int32 desired_keeper = 3;
  bool has_desired_keeper() const;
  void clear_desired_keeper();
  static const int kDesiredKeeperFieldNumber = 3;
  ::google::protobuf::int32 desired_keeper() const;
  void set_desired_keeper(::google::protobuf::int32 value);

  // optional bool request_robot_substitution = 4;
  bool has_request_robot_substitution() const;
  void clear_request_robot_substitution();
  static const int kRequestRobotSubstitutionFieldNumber = 4;
  bool request_robot_substitution() const;
  void set_request_robot_substitution(bool value);

  // optional bool request_timeout = 5;
  bool has_request_timeout() const;
  void clear_request_timeout();
  static const int kRequestTimeoutFieldNumber = 5;
  bool request_timeout() const;
  void set_request_timeout(bool value);

  // optional bool request_emergency_stop = 6;
  bool has_request_emergency_stop() const;
  void clear_request_emergency_stop();
  static const int kRequestEmergencyStopFieldNumber = 6;
  bool request_emergency_stop() const;
  void set_request_emergency_stop(bool value);

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:RemoteControlToController)
 private:
  void set_has_signature();
  void clear_has_signature();
  void set_has_request();
  void set_has_desired_keeper();
  void set_has_request_robot_substitution();
  void set_has_request_timeout();
  void set_has_request_emergency_stop();

  inline bool has_msg() const;
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::Signature* signature_;
  union MsgUnion {
    MsgUnion() {}
    int request_;
    ::google::protobuf::int32 desired_keeper_;
    bool request_robot_substitution_;
    bool request_timeout_;
    bool request_emergency_stop_;
  } msg_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControllerToRemoteControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ControllerToRemoteControl) */ {
 public:
  ControllerToRemoteControl();
  virtual ~ControllerToRemoteControl();

  ControllerToRemoteControl(const ControllerToRemoteControl& from);

  inline ControllerToRemoteControl& operator=(const ControllerToRemoteControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControllerToRemoteControl(ControllerToRemoteControl&& from) noexcept
    : ControllerToRemoteControl() {
    *this = ::std::move(from);
  }

  inline ControllerToRemoteControl& operator=(ControllerToRemoteControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControllerToRemoteControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerToRemoteControl* internal_default_instance() {
    return reinterpret_cast<const ControllerToRemoteControl*>(
               &_ControllerToRemoteControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ControllerToRemoteControl* other);
  friend void swap(ControllerToRemoteControl& a, ControllerToRemoteControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControllerToRemoteControl* New() const final {
    return CreateMaybeMessage<ControllerToRemoteControl>(NULL);
  }

  ControllerToRemoteControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControllerToRemoteControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControllerToRemoteControl& from);
  void MergeFrom(const ControllerToRemoteControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerToRemoteControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ControllerReply controller_reply = 1;
  bool has_controller_reply() const;
  void clear_controller_reply();
  static const int kControllerReplyFieldNumber = 1;
  private:
  const ::ControllerReply& _internal_controller_reply() const;
  public:
  const ::ControllerReply& controller_reply() const;
  ::ControllerReply* release_controller_reply();
  ::ControllerReply* mutable_controller_reply();
  void set_allocated_controller_reply(::ControllerReply* controller_reply);

  // optional .RemoteControlTeamState state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  private:
  const ::RemoteControlTeamState& _internal_state() const;
  public:
  const ::RemoteControlTeamState& state() const;
  ::RemoteControlTeamState* release_state();
  ::RemoteControlTeamState* mutable_state();
  void set_allocated_state(::RemoteControlTeamState* state);

  // @@protoc_insertion_point(class_scope:ControllerToRemoteControl)
 private:
  void set_has_controller_reply();
  void clear_has_controller_reply();
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::ControllerReply* controller_reply_;
  ::RemoteControlTeamState* state_;
  friend struct ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoteControlTeamState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemoteControlTeamState) */ {
 public:
  RemoteControlTeamState();
  virtual ~RemoteControlTeamState();

  RemoteControlTeamState(const RemoteControlTeamState& from);

  inline RemoteControlTeamState& operator=(const RemoteControlTeamState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoteControlTeamState(RemoteControlTeamState&& from) noexcept
    : RemoteControlTeamState() {
    *this = ::std::move(from);
  }

  inline RemoteControlTeamState& operator=(RemoteControlTeamState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteControlTeamState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteControlTeamState* internal_default_instance() {
    return reinterpret_cast<const RemoteControlTeamState*>(
               &_RemoteControlTeamState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RemoteControlTeamState* other);
  friend void swap(RemoteControlTeamState& a, RemoteControlTeamState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoteControlTeamState* New() const final {
    return CreateMaybeMessage<RemoteControlTeamState>(NULL);
  }

  RemoteControlTeamState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoteControlTeamState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoteControlTeamState& from);
  void MergeFrom(const RemoteControlTeamState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteControlTeamState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RemoteControlRequestType available_requests = 1;
  int available_requests_size() const;
  void clear_available_requests();
  static const int kAvailableRequestsFieldNumber = 1;
  ::RemoteControlRequestType available_requests(int index) const;
  void set_available_requests(int index, ::RemoteControlRequestType value);
  void add_available_requests(::RemoteControlRequestType value);
  const ::google::protobuf::RepeatedField<int>& available_requests() const;
  ::google::protobuf::RepeatedField<int>* mutable_available_requests();

  // repeated .RemoteControlRequestType active_requests = 2;
  int active_requests_size() const;
  void clear_active_requests();
  static const int kActiveRequestsFieldNumber = 2;
  ::RemoteControlRequestType active_requests(int index) const;
  void set_active_requests(int index, ::RemoteControlRequestType value);
  void add_active_requests(::RemoteControlRequestType value);
  const ::google::protobuf::RepeatedField<int>& active_requests() const;
  ::google::protobuf::RepeatedField<int>* mutable_active_requests();

  // repeated float yellow_cards_due = 8;
  int yellow_cards_due_size() const;
  void clear_yellow_cards_due();
  static const int kYellowCardsDueFieldNumber = 8;
  float yellow_cards_due(int index) const;
  void set_yellow_cards_due(int index, float value);
  void add_yellow_cards_due(float value);
  const ::google::protobuf::RepeatedField< float >&
      yellow_cards_due() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_yellow_cards_due();

  // optional int32 keeper_id = 3;
  bool has_keeper_id() const;
  void clear_keeper_id();
  static const int kKeeperIdFieldNumber = 3;
  ::google::protobuf::int32 keeper_id() const;
  void set_keeper_id(::google::protobuf::int32 value);

  // optional float emergency_stop_in = 4;
  bool has_emergency_stop_in() const;
  void clear_emergency_stop_in();
  static const int kEmergencyStopInFieldNumber = 4;
  float emergency_stop_in() const;
  void set_emergency_stop_in(float value);

  // optional int32 timeouts_left = 5;
  bool has_timeouts_left() const;
  void clear_timeouts_left();
  static const int kTimeoutsLeftFieldNumber = 5;
  ::google::protobuf::int32 timeouts_left() const;
  void set_timeouts_left(::google::protobuf::int32 value);

  // optional int32 challenge_flags_left = 6;
  bool has_challenge_flags_left() const;
  void clear_challenge_flags_left();
  static const int kChallengeFlagsLeftFieldNumber = 6;
  ::google::protobuf::int32 challenge_flags_left() const;
  void set_challenge_flags_left(::google::protobuf::int32 value);

  // optional int32 max_robots = 7;
  bool has_max_robots() const;
  void clear_max_robots();
  static const int kMaxRobotsFieldNumber = 7;
  ::google::protobuf::int32 max_robots() const;
  void set_max_robots(::google::protobuf::int32 value);

  // optional int32 robots_on_field = 9;
  bool has_robots_on_field() const;
  void clear_robots_on_field();
  static const int kRobotsOnFieldFieldNumber = 9;
  ::google::protobuf::int32 robots_on_field() const;
  void set_robots_on_field(::google::protobuf::int32 value);

  // optional float timeout_time_left = 10;
  bool has_timeout_time_left() const;
  void clear_timeout_time_left();
  static const int kTimeoutTimeLeftFieldNumber = 10;
  float timeout_time_left() const;
  void set_timeout_time_left(float value);

  // optional bool can_substitute_robot = 11;
  bool has_can_substitute_robot() const;
  void clear_can_substitute_robot();
  static const int kCanSubstituteRobotFieldNumber = 11;
  bool can_substitute_robot() const;
  void set_can_substitute_robot(bool value);

  // optional .Team team = 12;
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 12;
  ::Team team() const;
  void set_team(::Team value);

  // optional uint32 bot_substitutions_left = 13;
  bool has_bot_substitutions_left() const;
  void clear_bot_substitutions_left();
  static const int kBotSubstitutionsLeftFieldNumber = 13;
  ::google::protobuf::uint32 bot_substitutions_left() const;
  void set_bot_substitutions_left(::google::protobuf::uint32 value);

  // optional float bot_substitution_time_left = 14;
  bool has_bot_substitution_time_left() const;
  void clear_bot_substitution_time_left();
  static const int kBotSubstitutionTimeLeftFieldNumber = 14;
  float bot_substitution_time_left() const;
  void set_bot_substitution_time_left(float value);

  // @@protoc_insertion_point(class_scope:RemoteControlTeamState)
 private:
  void set_has_team();
  void clear_has_team();
  void set_has_keeper_id();
  void clear_has_keeper_id();
  void set_has_emergency_stop_in();
  void clear_has_emergency_stop_in();
  void set_has_timeouts_left();
  void clear_has_timeouts_left();
  void set_has_timeout_time_left();
  void clear_has_timeout_time_left();
  void set_has_challenge_flags_left();
  void clear_has_challenge_flags_left();
  void set_has_max_robots();
  void clear_has_max_robots();
  void set_has_robots_on_field();
  void clear_has_robots_on_field();
  void set_has_can_substitute_robot();
  void clear_has_can_substitute_robot();
  void set_has_bot_substitutions_left();
  void clear_has_bot_substitutions_left();
  void set_has_bot_substitution_time_left();
  void clear_has_bot_substitution_time_left();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField<int> available_requests_;
  ::google::protobuf::RepeatedField<int> active_requests_;
  ::google::protobuf::RepeatedField< float > yellow_cards_due_;
  ::google::protobuf::int32 keeper_id_;
  float emergency_stop_in_;
  ::google::protobuf::int32 timeouts_left_;
  ::google::protobuf::int32 challenge_flags_left_;
  ::google::protobuf::int32 max_robots_;
  ::google::protobuf::int32 robots_on_field_;
  float timeout_time_left_;
  bool can_substitute_robot_;
  int team_;
  ::google::protobuf::uint32 bot_substitutions_left_;
  float bot_substitution_time_left_;
  friend struct ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RemoteControlRegistration

// required .Team team = 1;
inline bool RemoteControlRegistration::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteControlRegistration::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoteControlRegistration::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoteControlRegistration::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::Team RemoteControlRegistration::team() const {
  // @@protoc_insertion_point(field_get:RemoteControlRegistration.team)
  return static_cast< ::Team >(team_);
}
inline void RemoteControlRegistration::set_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlRegistration.team)
}

// optional .Signature signature = 2;
inline bool RemoteControlRegistration::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteControlRegistration::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteControlRegistration::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Signature& RemoteControlRegistration::_internal_signature() const {
  return *signature_;
}
inline const ::Signature& RemoteControlRegistration::signature() const {
  const ::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:RemoteControlRegistration.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::Signature*>(
      &::_Signature_default_instance_);
}
inline ::Signature* RemoteControlRegistration::release_signature() {
  // @@protoc_insertion_point(field_release:RemoteControlRegistration.signature)
  clear_has_signature();
  ::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::Signature* RemoteControlRegistration::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RemoteControlRegistration.signature)
  return signature_;
}
inline void RemoteControlRegistration::set_allocated_signature(::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:RemoteControlRegistration.signature)
}

// -------------------------------------------------------------------

// RemoteControlToController

// optional .Signature signature = 1;
inline bool RemoteControlToController::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteControlToController::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteControlToController::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Signature& RemoteControlToController::_internal_signature() const {
  return *signature_;
}
inline const ::Signature& RemoteControlToController::signature() const {
  const ::Signature* p = signature_;
  // @@protoc_insertion_point(field_get:RemoteControlToController.signature)
  return p != NULL ? *p : *reinterpret_cast<const ::Signature*>(
      &::_Signature_default_instance_);
}
inline ::Signature* RemoteControlToController::release_signature() {
  // @@protoc_insertion_point(field_release:RemoteControlToController.signature)
  clear_has_signature();
  ::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
inline ::Signature* RemoteControlToController::mutable_signature() {
  set_has_signature();
  if (signature_ == NULL) {
    auto* p = CreateMaybeMessage<::Signature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RemoteControlToController.signature)
  return signature_;
}
inline void RemoteControlToController::set_allocated_signature(::Signature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signature_);
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:RemoteControlToController.signature)
}

// optional .RemoteControlToController.Request request = 2;
inline bool RemoteControlToController::has_request() const {
  return msg_case() == kRequest;
}
inline void RemoteControlToController::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void RemoteControlToController::clear_request() {
  if (has_request()) {
    msg_.request_ = 0;
    clear_has_msg();
  }
}
inline ::RemoteControlToController_Request RemoteControlToController::request() const {
  // @@protoc_insertion_point(field_get:RemoteControlToController.request)
  if (has_request()) {
    return static_cast< ::RemoteControlToController_Request >(msg_.request_);
  }
  return static_cast< ::RemoteControlToController_Request >(0);
}
inline void RemoteControlToController::set_request(::RemoteControlToController_Request value) {
  assert(::RemoteControlToController_Request_IsValid(value));
  if (!has_request()) {
    clear_msg();
    set_has_request();
  }
  msg_.request_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlToController.request)
}

// optional int32 desired_keeper = 3;
inline bool RemoteControlToController::has_desired_keeper() const {
  return msg_case() == kDesiredKeeper;
}
inline void RemoteControlToController::set_has_desired_keeper() {
  _oneof_case_[0] = kDesiredKeeper;
}
inline void RemoteControlToController::clear_desired_keeper() {
  if (has_desired_keeper()) {
    msg_.desired_keeper_ = 0;
    clear_has_msg();
  }
}
inline ::google::protobuf::int32 RemoteControlToController::desired_keeper() const {
  // @@protoc_insertion_point(field_get:RemoteControlToController.desired_keeper)
  if (has_desired_keeper()) {
    return msg_.desired_keeper_;
  }
  return 0;
}
inline void RemoteControlToController::set_desired_keeper(::google::protobuf::int32 value) {
  if (!has_desired_keeper()) {
    clear_msg();
    set_has_desired_keeper();
  }
  msg_.desired_keeper_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlToController.desired_keeper)
}

// optional bool request_robot_substitution = 4;
inline bool RemoteControlToController::has_request_robot_substitution() const {
  return msg_case() == kRequestRobotSubstitution;
}
inline void RemoteControlToController::set_has_request_robot_substitution() {
  _oneof_case_[0] = kRequestRobotSubstitution;
}
inline void RemoteControlToController::clear_request_robot_substitution() {
  if (has_request_robot_substitution()) {
    msg_.request_robot_substitution_ = false;
    clear_has_msg();
  }
}
inline bool RemoteControlToController::request_robot_substitution() const {
  // @@protoc_insertion_point(field_get:RemoteControlToController.request_robot_substitution)
  if (has_request_robot_substitution()) {
    return msg_.request_robot_substitution_;
  }
  return false;
}
inline void RemoteControlToController::set_request_robot_substitution(bool value) {
  if (!has_request_robot_substitution()) {
    clear_msg();
    set_has_request_robot_substitution();
  }
  msg_.request_robot_substitution_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlToController.request_robot_substitution)
}

// optional bool request_timeout = 5;
inline bool RemoteControlToController::has_request_timeout() const {
  return msg_case() == kRequestTimeout;
}
inline void RemoteControlToController::set_has_request_timeout() {
  _oneof_case_[0] = kRequestTimeout;
}
inline void RemoteControlToController::clear_request_timeout() {
  if (has_request_timeout()) {
    msg_.request_timeout_ = false;
    clear_has_msg();
  }
}
inline bool RemoteControlToController::request_timeout() const {
  // @@protoc_insertion_point(field_get:RemoteControlToController.request_timeout)
  if (has_request_timeout()) {
    return msg_.request_timeout_;
  }
  return false;
}
inline void RemoteControlToController::set_request_timeout(bool value) {
  if (!has_request_timeout()) {
    clear_msg();
    set_has_request_timeout();
  }
  msg_.request_timeout_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlToController.request_timeout)
}

// optional bool request_emergency_stop = 6;
inline bool RemoteControlToController::has_request_emergency_stop() const {
  return msg_case() == kRequestEmergencyStop;
}
inline void RemoteControlToController::set_has_request_emergency_stop() {
  _oneof_case_[0] = kRequestEmergencyStop;
}
inline void RemoteControlToController::clear_request_emergency_stop() {
  if (has_request_emergency_stop()) {
    msg_.request_emergency_stop_ = false;
    clear_has_msg();
  }
}
inline bool RemoteControlToController::request_emergency_stop() const {
  // @@protoc_insertion_point(field_get:RemoteControlToController.request_emergency_stop)
  if (has_request_emergency_stop()) {
    return msg_.request_emergency_stop_;
  }
  return false;
}
inline void RemoteControlToController::set_request_emergency_stop(bool value) {
  if (!has_request_emergency_stop()) {
    clear_msg();
    set_has_request_emergency_stop();
  }
  msg_.request_emergency_stop_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlToController.request_emergency_stop)
}

inline bool RemoteControlToController::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void RemoteControlToController::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline RemoteControlToController::MsgCase RemoteControlToController::msg_case() const {
  return RemoteControlToController::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ControllerToRemoteControl

// optional .ControllerReply controller_reply = 1;
inline bool ControllerToRemoteControl::has_controller_reply() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControllerToRemoteControl::set_has_controller_reply() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControllerToRemoteControl::clear_has_controller_reply() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ControllerReply& ControllerToRemoteControl::_internal_controller_reply() const {
  return *controller_reply_;
}
inline const ::ControllerReply& ControllerToRemoteControl::controller_reply() const {
  const ::ControllerReply* p = controller_reply_;
  // @@protoc_insertion_point(field_get:ControllerToRemoteControl.controller_reply)
  return p != NULL ? *p : *reinterpret_cast<const ::ControllerReply*>(
      &::_ControllerReply_default_instance_);
}
inline ::ControllerReply* ControllerToRemoteControl::release_controller_reply() {
  // @@protoc_insertion_point(field_release:ControllerToRemoteControl.controller_reply)
  clear_has_controller_reply();
  ::ControllerReply* temp = controller_reply_;
  controller_reply_ = NULL;
  return temp;
}
inline ::ControllerReply* ControllerToRemoteControl::mutable_controller_reply() {
  set_has_controller_reply();
  if (controller_reply_ == NULL) {
    auto* p = CreateMaybeMessage<::ControllerReply>(GetArenaNoVirtual());
    controller_reply_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ControllerToRemoteControl.controller_reply)
  return controller_reply_;
}
inline void ControllerToRemoteControl::set_allocated_controller_reply(::ControllerReply* controller_reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(controller_reply_);
  }
  if (controller_reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controller_reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controller_reply, submessage_arena);
    }
    set_has_controller_reply();
  } else {
    clear_has_controller_reply();
  }
  controller_reply_ = controller_reply;
  // @@protoc_insertion_point(field_set_allocated:ControllerToRemoteControl.controller_reply)
}

// optional .RemoteControlTeamState state = 2;
inline bool ControllerToRemoteControl::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControllerToRemoteControl::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControllerToRemoteControl::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControllerToRemoteControl::clear_state() {
  if (state_ != NULL) state_->Clear();
  clear_has_state();
}
inline const ::RemoteControlTeamState& ControllerToRemoteControl::_internal_state() const {
  return *state_;
}
inline const ::RemoteControlTeamState& ControllerToRemoteControl::state() const {
  const ::RemoteControlTeamState* p = state_;
  // @@protoc_insertion_point(field_get:ControllerToRemoteControl.state)
  return p != NULL ? *p : *reinterpret_cast<const ::RemoteControlTeamState*>(
      &::_RemoteControlTeamState_default_instance_);
}
inline ::RemoteControlTeamState* ControllerToRemoteControl::release_state() {
  // @@protoc_insertion_point(field_release:ControllerToRemoteControl.state)
  clear_has_state();
  ::RemoteControlTeamState* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::RemoteControlTeamState* ControllerToRemoteControl::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::RemoteControlTeamState>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ControllerToRemoteControl.state)
  return state_;
}
inline void ControllerToRemoteControl::set_allocated_state(::RemoteControlTeamState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
  } else {
    clear_has_state();
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:ControllerToRemoteControl.state)
}

// -------------------------------------------------------------------

// RemoteControlTeamState

// optional .Team team = 12;
inline bool RemoteControlTeamState::has_team() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RemoteControlTeamState::set_has_team() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RemoteControlTeamState::clear_has_team() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RemoteControlTeamState::clear_team() {
  team_ = 0;
  clear_has_team();
}
inline ::Team RemoteControlTeamState::team() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.team)
  return static_cast< ::Team >(team_);
}
inline void RemoteControlTeamState::set_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.team)
}

// repeated .RemoteControlRequestType available_requests = 1;
inline int RemoteControlTeamState::available_requests_size() const {
  return available_requests_.size();
}
inline void RemoteControlTeamState::clear_available_requests() {
  available_requests_.Clear();
}
inline ::RemoteControlRequestType RemoteControlTeamState::available_requests(int index) const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.available_requests)
  return static_cast< ::RemoteControlRequestType >(available_requests_.Get(index));
}
inline void RemoteControlTeamState::set_available_requests(int index, ::RemoteControlRequestType value) {
  assert(::RemoteControlRequestType_IsValid(value));
  available_requests_.Set(index, value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.available_requests)
}
inline void RemoteControlTeamState::add_available_requests(::RemoteControlRequestType value) {
  assert(::RemoteControlRequestType_IsValid(value));
  available_requests_.Add(value);
  // @@protoc_insertion_point(field_add:RemoteControlTeamState.available_requests)
}
inline const ::google::protobuf::RepeatedField<int>&
RemoteControlTeamState::available_requests() const {
  // @@protoc_insertion_point(field_list:RemoteControlTeamState.available_requests)
  return available_requests_;
}
inline ::google::protobuf::RepeatedField<int>*
RemoteControlTeamState::mutable_available_requests() {
  // @@protoc_insertion_point(field_mutable_list:RemoteControlTeamState.available_requests)
  return &available_requests_;
}

// repeated .RemoteControlRequestType active_requests = 2;
inline int RemoteControlTeamState::active_requests_size() const {
  return active_requests_.size();
}
inline void RemoteControlTeamState::clear_active_requests() {
  active_requests_.Clear();
}
inline ::RemoteControlRequestType RemoteControlTeamState::active_requests(int index) const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.active_requests)
  return static_cast< ::RemoteControlRequestType >(active_requests_.Get(index));
}
inline void RemoteControlTeamState::set_active_requests(int index, ::RemoteControlRequestType value) {
  assert(::RemoteControlRequestType_IsValid(value));
  active_requests_.Set(index, value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.active_requests)
}
inline void RemoteControlTeamState::add_active_requests(::RemoteControlRequestType value) {
  assert(::RemoteControlRequestType_IsValid(value));
  active_requests_.Add(value);
  // @@protoc_insertion_point(field_add:RemoteControlTeamState.active_requests)
}
inline const ::google::protobuf::RepeatedField<int>&
RemoteControlTeamState::active_requests() const {
  // @@protoc_insertion_point(field_list:RemoteControlTeamState.active_requests)
  return active_requests_;
}
inline ::google::protobuf::RepeatedField<int>*
RemoteControlTeamState::mutable_active_requests() {
  // @@protoc_insertion_point(field_mutable_list:RemoteControlTeamState.active_requests)
  return &active_requests_;
}

// optional int32 keeper_id = 3;
inline bool RemoteControlTeamState::has_keeper_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteControlTeamState::set_has_keeper_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteControlTeamState::clear_has_keeper_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoteControlTeamState::clear_keeper_id() {
  keeper_id_ = 0;
  clear_has_keeper_id();
}
inline ::google::protobuf::int32 RemoteControlTeamState::keeper_id() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.keeper_id)
  return keeper_id_;
}
inline void RemoteControlTeamState::set_keeper_id(::google::protobuf::int32 value) {
  set_has_keeper_id();
  keeper_id_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.keeper_id)
}

// optional float emergency_stop_in = 4;
inline bool RemoteControlTeamState::has_emergency_stop_in() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteControlTeamState::set_has_emergency_stop_in() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoteControlTeamState::clear_has_emergency_stop_in() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoteControlTeamState::clear_emergency_stop_in() {
  emergency_stop_in_ = 0;
  clear_has_emergency_stop_in();
}
inline float RemoteControlTeamState::emergency_stop_in() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.emergency_stop_in)
  return emergency_stop_in_;
}
inline void RemoteControlTeamState::set_emergency_stop_in(float value) {
  set_has_emergency_stop_in();
  emergency_stop_in_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.emergency_stop_in)
}

// optional int32 timeouts_left = 5;
inline bool RemoteControlTeamState::has_timeouts_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoteControlTeamState::set_has_timeouts_left() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoteControlTeamState::clear_has_timeouts_left() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoteControlTeamState::clear_timeouts_left() {
  timeouts_left_ = 0;
  clear_has_timeouts_left();
}
inline ::google::protobuf::int32 RemoteControlTeamState::timeouts_left() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.timeouts_left)
  return timeouts_left_;
}
inline void RemoteControlTeamState::set_timeouts_left(::google::protobuf::int32 value) {
  set_has_timeouts_left();
  timeouts_left_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.timeouts_left)
}

// optional float timeout_time_left = 10;
inline bool RemoteControlTeamState::has_timeout_time_left() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RemoteControlTeamState::set_has_timeout_time_left() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RemoteControlTeamState::clear_has_timeout_time_left() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RemoteControlTeamState::clear_timeout_time_left() {
  timeout_time_left_ = 0;
  clear_has_timeout_time_left();
}
inline float RemoteControlTeamState::timeout_time_left() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.timeout_time_left)
  return timeout_time_left_;
}
inline void RemoteControlTeamState::set_timeout_time_left(float value) {
  set_has_timeout_time_left();
  timeout_time_left_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.timeout_time_left)
}

// optional int32 challenge_flags_left = 6;
inline bool RemoteControlTeamState::has_challenge_flags_left() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RemoteControlTeamState::set_has_challenge_flags_left() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RemoteControlTeamState::clear_has_challenge_flags_left() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RemoteControlTeamState::clear_challenge_flags_left() {
  challenge_flags_left_ = 0;
  clear_has_challenge_flags_left();
}
inline ::google::protobuf::int32 RemoteControlTeamState::challenge_flags_left() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.challenge_flags_left)
  return challenge_flags_left_;
}
inline void RemoteControlTeamState::set_challenge_flags_left(::google::protobuf::int32 value) {
  set_has_challenge_flags_left();
  challenge_flags_left_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.challenge_flags_left)
}

// optional int32 max_robots = 7;
inline bool RemoteControlTeamState::has_max_robots() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RemoteControlTeamState::set_has_max_robots() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RemoteControlTeamState::clear_has_max_robots() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RemoteControlTeamState::clear_max_robots() {
  max_robots_ = 0;
  clear_has_max_robots();
}
inline ::google::protobuf::int32 RemoteControlTeamState::max_robots() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.max_robots)
  return max_robots_;
}
inline void RemoteControlTeamState::set_max_robots(::google::protobuf::int32 value) {
  set_has_max_robots();
  max_robots_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.max_robots)
}

// optional int32 robots_on_field = 9;
inline bool RemoteControlTeamState::has_robots_on_field() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RemoteControlTeamState::set_has_robots_on_field() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RemoteControlTeamState::clear_has_robots_on_field() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RemoteControlTeamState::clear_robots_on_field() {
  robots_on_field_ = 0;
  clear_has_robots_on_field();
}
inline ::google::protobuf::int32 RemoteControlTeamState::robots_on_field() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.robots_on_field)
  return robots_on_field_;
}
inline void RemoteControlTeamState::set_robots_on_field(::google::protobuf::int32 value) {
  set_has_robots_on_field();
  robots_on_field_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.robots_on_field)
}

// repeated float yellow_cards_due = 8;
inline int RemoteControlTeamState::yellow_cards_due_size() const {
  return yellow_cards_due_.size();
}
inline void RemoteControlTeamState::clear_yellow_cards_due() {
  yellow_cards_due_.Clear();
}
inline float RemoteControlTeamState::yellow_cards_due(int index) const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.yellow_cards_due)
  return yellow_cards_due_.Get(index);
}
inline void RemoteControlTeamState::set_yellow_cards_due(int index, float value) {
  yellow_cards_due_.Set(index, value);
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.yellow_cards_due)
}
inline void RemoteControlTeamState::add_yellow_cards_due(float value) {
  yellow_cards_due_.Add(value);
  // @@protoc_insertion_point(field_add:RemoteControlTeamState.yellow_cards_due)
}
inline const ::google::protobuf::RepeatedField< float >&
RemoteControlTeamState::yellow_cards_due() const {
  // @@protoc_insertion_point(field_list:RemoteControlTeamState.yellow_cards_due)
  return yellow_cards_due_;
}
inline ::google::protobuf::RepeatedField< float >*
RemoteControlTeamState::mutable_yellow_cards_due() {
  // @@protoc_insertion_point(field_mutable_list:RemoteControlTeamState.yellow_cards_due)
  return &yellow_cards_due_;
}

// optional bool can_substitute_robot = 11;
inline bool RemoteControlTeamState::has_can_substitute_robot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RemoteControlTeamState::set_has_can_substitute_robot() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RemoteControlTeamState::clear_has_can_substitute_robot() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RemoteControlTeamState::clear_can_substitute_robot() {
  can_substitute_robot_ = false;
  clear_has_can_substitute_robot();
}
inline bool RemoteControlTeamState::can_substitute_robot() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.can_substitute_robot)
  return can_substitute_robot_;
}
inline void RemoteControlTeamState::set_can_substitute_robot(bool value) {
  set_has_can_substitute_robot();
  can_substitute_robot_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.can_substitute_robot)
}

// optional uint32 bot_substitutions_left = 13;
inline bool RemoteControlTeamState::has_bot_substitutions_left() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RemoteControlTeamState::set_has_bot_substitutions_left() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RemoteControlTeamState::clear_has_bot_substitutions_left() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RemoteControlTeamState::clear_bot_substitutions_left() {
  bot_substitutions_left_ = 0u;
  clear_has_bot_substitutions_left();
}
inline ::google::protobuf::uint32 RemoteControlTeamState::bot_substitutions_left() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.bot_substitutions_left)
  return bot_substitutions_left_;
}
inline void RemoteControlTeamState::set_bot_substitutions_left(::google::protobuf::uint32 value) {
  set_has_bot_substitutions_left();
  bot_substitutions_left_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.bot_substitutions_left)
}

// optional float bot_substitution_time_left = 14;
inline bool RemoteControlTeamState::has_bot_substitution_time_left() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RemoteControlTeamState::set_has_bot_substitution_time_left() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RemoteControlTeamState::clear_has_bot_substitution_time_left() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RemoteControlTeamState::clear_bot_substitution_time_left() {
  bot_substitution_time_left_ = 0;
  clear_has_bot_substitution_time_left();
}
inline float RemoteControlTeamState::bot_substitution_time_left() const {
  // @@protoc_insertion_point(field_get:RemoteControlTeamState.bot_substitution_time_left)
  return bot_substitution_time_left_;
}
inline void RemoteControlTeamState::set_bot_substitution_time_left(float value) {
  set_has_bot_substitution_time_left();
  bot_substitution_time_left_ = value;
  // @@protoc_insertion_point(field_set:RemoteControlTeamState.bot_substitution_time_left)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::RemoteControlToController_Request> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RemoteControlToController_Request>() {
  return ::RemoteControlToController_Request_descriptor();
}
template <> struct is_proto_enum< ::RemoteControlRequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RemoteControlRequestType>() {
  return ::RemoteControlRequestType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ssl_5fgc_5frcon_5fremotecontrol_2eproto
