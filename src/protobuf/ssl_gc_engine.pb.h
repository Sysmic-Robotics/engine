// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_engine.proto

#ifndef PROTOBUF_INCLUDED_ssl_5fgc_5fengine_2eproto
#define PROTOBUF_INCLUDED_ssl_5fgc_5fengine_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ssl_gc_geometry.pb.h"
#include "ssl_gc_common.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fengine_2eproto 

namespace protobuf_ssl_5fgc_5fengine_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ssl_5fgc_5fengine_2eproto
class Ball;
class BallDefaultTypeInternal;
extern BallDefaultTypeInternal _Ball_default_instance_;
class ContinueAction;
class ContinueActionDefaultTypeInternal;
extern ContinueActionDefaultTypeInternal _ContinueAction_default_instance_;
class ContinueHint;
class ContinueHintDefaultTypeInternal;
extern ContinueHintDefaultTypeInternal _ContinueHint_default_instance_;
class GcState;
class GcStateDefaultTypeInternal;
extern GcStateDefaultTypeInternal _GcState_default_instance_;
class GcStateAutoRef;
class GcStateAutoRefDefaultTypeInternal;
extern GcStateAutoRefDefaultTypeInternal _GcStateAutoRef_default_instance_;
class GcStateTeam;
class GcStateTeamDefaultTypeInternal;
extern GcStateTeamDefaultTypeInternal _GcStateTeam_default_instance_;
class GcStateTracker;
class GcStateTrackerDefaultTypeInternal;
extern GcStateTrackerDefaultTypeInternal _GcStateTracker_default_instance_;
class GcState_AutoRefStateEntry_DoNotUse;
class GcState_AutoRefStateEntry_DoNotUseDefaultTypeInternal;
extern GcState_AutoRefStateEntry_DoNotUseDefaultTypeInternal _GcState_AutoRefStateEntry_DoNotUse_default_instance_;
class GcState_TeamStateEntry_DoNotUse;
class GcState_TeamStateEntry_DoNotUseDefaultTypeInternal;
extern GcState_TeamStateEntry_DoNotUseDefaultTypeInternal _GcState_TeamStateEntry_DoNotUse_default_instance_;
class GcState_TrackersEntry_DoNotUse;
class GcState_TrackersEntry_DoNotUseDefaultTypeInternal;
extern GcState_TrackersEntry_DoNotUseDefaultTypeInternal _GcState_TrackersEntry_DoNotUse_default_instance_;
class Robot;
class RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
class TeamAdvantageChoice;
class TeamAdvantageChoiceDefaultTypeInternal;
extern TeamAdvantageChoiceDefaultTypeInternal _TeamAdvantageChoice_default_instance_;
namespace google {
namespace protobuf {
template<> ::Ball* Arena::CreateMaybeMessage<::Ball>(Arena*);
template<> ::ContinueAction* Arena::CreateMaybeMessage<::ContinueAction>(Arena*);
template<> ::ContinueHint* Arena::CreateMaybeMessage<::ContinueHint>(Arena*);
template<> ::GcState* Arena::CreateMaybeMessage<::GcState>(Arena*);
template<> ::GcStateAutoRef* Arena::CreateMaybeMessage<::GcStateAutoRef>(Arena*);
template<> ::GcStateTeam* Arena::CreateMaybeMessage<::GcStateTeam>(Arena*);
template<> ::GcStateTracker* Arena::CreateMaybeMessage<::GcStateTracker>(Arena*);
template<> ::GcState_AutoRefStateEntry_DoNotUse* Arena::CreateMaybeMessage<::GcState_AutoRefStateEntry_DoNotUse>(Arena*);
template<> ::GcState_TeamStateEntry_DoNotUse* Arena::CreateMaybeMessage<::GcState_TeamStateEntry_DoNotUse>(Arena*);
template<> ::GcState_TrackersEntry_DoNotUse* Arena::CreateMaybeMessage<::GcState_TrackersEntry_DoNotUse>(Arena*);
template<> ::Robot* Arena::CreateMaybeMessage<::Robot>(Arena*);
template<> ::TeamAdvantageChoice* Arena::CreateMaybeMessage<::TeamAdvantageChoice>(Arena*);
}  // namespace protobuf
}  // namespace google

enum TeamAdvantageChoice_AdvantageChoice {
  TeamAdvantageChoice_AdvantageChoice_STOP = 0,
  TeamAdvantageChoice_AdvantageChoice_CONTINUE = 1
};
bool TeamAdvantageChoice_AdvantageChoice_IsValid(int value);
const TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_MIN = TeamAdvantageChoice_AdvantageChoice_STOP;
const TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_MAX = TeamAdvantageChoice_AdvantageChoice_CONTINUE;
const int TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_ARRAYSIZE = TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_MAX + 1;

const ::google::protobuf::EnumDescriptor* TeamAdvantageChoice_AdvantageChoice_descriptor();
inline const ::std::string& TeamAdvantageChoice_AdvantageChoice_Name(TeamAdvantageChoice_AdvantageChoice value) {
  return ::google::protobuf::internal::NameOfEnum(
    TeamAdvantageChoice_AdvantageChoice_descriptor(), value);
}
inline bool TeamAdvantageChoice_AdvantageChoice_Parse(
    const ::std::string& name, TeamAdvantageChoice_AdvantageChoice* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TeamAdvantageChoice_AdvantageChoice>(
    TeamAdvantageChoice_AdvantageChoice_descriptor(), name, value);
}
enum ContinueAction_Type {
  ContinueAction_Type_TYPE_UNKNOWN = 0,
  ContinueAction_Type_HALT = 1,
  ContinueAction_Type_RESUME_FROM_HALT = 10,
  ContinueAction_Type_STOP_GAME = 2,
  ContinueAction_Type_FORCE_START = 11,
  ContinueAction_Type_FREE_KICK = 17,
  ContinueAction_Type_NEXT_COMMAND = 3,
  ContinueAction_Type_BALL_PLACEMENT_START = 4,
  ContinueAction_Type_BALL_PLACEMENT_CANCEL = 9,
  ContinueAction_Type_BALL_PLACEMENT_COMPLETE = 14,
  ContinueAction_Type_BALL_PLACEMENT_FAIL = 15,
  ContinueAction_Type_TIMEOUT_START = 5,
  ContinueAction_Type_TIMEOUT_STOP = 6,
  ContinueAction_Type_BOT_SUBSTITUTION = 7,
  ContinueAction_Type_NEXT_STAGE = 8,
  ContinueAction_Type_END_GAME = 16,
  ContinueAction_Type_ACCEPT_GOAL = 12,
  ContinueAction_Type_REJECT_GOAL = 20,
  ContinueAction_Type_NORMAL_START = 13,
  ContinueAction_Type_CHALLENGE_ACCEPT = 18,
  ContinueAction_Type_CHALLENGE_REJECT = 19
};
bool ContinueAction_Type_IsValid(int value);
const ContinueAction_Type ContinueAction_Type_Type_MIN = ContinueAction_Type_TYPE_UNKNOWN;
const ContinueAction_Type ContinueAction_Type_Type_MAX = ContinueAction_Type_REJECT_GOAL;
const int ContinueAction_Type_Type_ARRAYSIZE = ContinueAction_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContinueAction_Type_descriptor();
inline const ::std::string& ContinueAction_Type_Name(ContinueAction_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContinueAction_Type_descriptor(), value);
}
inline bool ContinueAction_Type_Parse(
    const ::std::string& name, ContinueAction_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContinueAction_Type>(
    ContinueAction_Type_descriptor(), name, value);
}
enum ContinueAction_State {
  ContinueAction_State_STATE_UNKNOWN = 0,
  ContinueAction_State_BLOCKED = 1,
  ContinueAction_State_WAITING = 2,
  ContinueAction_State_READY_AUTO = 3,
  ContinueAction_State_READY_MANUAL = 4,
  ContinueAction_State_DISABLED = 5
};
bool ContinueAction_State_IsValid(int value);
const ContinueAction_State ContinueAction_State_State_MIN = ContinueAction_State_STATE_UNKNOWN;
const ContinueAction_State ContinueAction_State_State_MAX = ContinueAction_State_DISABLED;
const int ContinueAction_State_State_ARRAYSIZE = ContinueAction_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContinueAction_State_descriptor();
inline const ::std::string& ContinueAction_State_Name(ContinueAction_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContinueAction_State_descriptor(), value);
}
inline bool ContinueAction_State_Parse(
    const ::std::string& name, ContinueAction_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContinueAction_State>(
    ContinueAction_State_descriptor(), name, value);
}
// ===================================================================

class GcState_TeamStateEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GcState_TeamStateEntry_DoNotUse, 
    ::std::string, ::GcStateTeam,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GcState_TeamStateEntry_DoNotUse, 
    ::std::string, ::GcStateTeam,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GcState_TeamStateEntry_DoNotUse();
  GcState_TeamStateEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GcState_TeamStateEntry_DoNotUse& other);
  static const GcState_TeamStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GcState_TeamStateEntry_DoNotUse*>(&_GcState_TeamStateEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GcState_AutoRefStateEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GcState_AutoRefStateEntry_DoNotUse, 
    ::std::string, ::GcStateAutoRef,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GcState_AutoRefStateEntry_DoNotUse, 
    ::std::string, ::GcStateAutoRef,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GcState_AutoRefStateEntry_DoNotUse();
  GcState_AutoRefStateEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GcState_AutoRefStateEntry_DoNotUse& other);
  static const GcState_AutoRefStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GcState_AutoRefStateEntry_DoNotUse*>(&_GcState_AutoRefStateEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GcState_TrackersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GcState_TrackersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GcState_TrackersEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GcState_TrackersEntry_DoNotUse();
  GcState_TrackersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GcState_TrackersEntry_DoNotUse& other);
  static const GcState_TrackersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GcState_TrackersEntry_DoNotUse*>(&_GcState_TrackersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GcState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GcState) */ {
 public:
  GcState();
  virtual ~GcState();

  GcState(const GcState& from);

  inline GcState& operator=(const GcState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GcState(GcState&& from) noexcept
    : GcState() {
    *this = ::std::move(from);
  }

  inline GcState& operator=(GcState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GcState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GcState* internal_default_instance() {
    return reinterpret_cast<const GcState*>(
               &_GcState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GcState* other);
  friend void swap(GcState& a, GcState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GcState* New() const final {
    return CreateMaybeMessage<GcState>(NULL);
  }

  GcState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GcState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GcState& from);
  void MergeFrom(const GcState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .GcStateTeam> team_state = 1;
  int team_state_size() const;
  void clear_team_state();
  static const int kTeamStateFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::GcStateTeam >&
      team_state() const;
  ::google::protobuf::Map< ::std::string, ::GcStateTeam >*
      mutable_team_state();

  // map<string, .GcStateAutoRef> auto_ref_state = 2;
  int auto_ref_state_size() const;
  void clear_auto_ref_state();
  static const int kAutoRefStateFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::GcStateAutoRef >&
      auto_ref_state() const;
  ::google::protobuf::Map< ::std::string, ::GcStateAutoRef >*
      mutable_auto_ref_state();

  // map<string, string> trackers = 3;
  int trackers_size() const;
  void clear_trackers();
  static const int kTrackersFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      trackers() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_trackers();

  // repeated .ContinueAction continue_actions = 4;
  int continue_actions_size() const;
  void clear_continue_actions();
  static const int kContinueActionsFieldNumber = 4;
  ::ContinueAction* mutable_continue_actions(int index);
  ::google::protobuf::RepeatedPtrField< ::ContinueAction >*
      mutable_continue_actions();
  const ::ContinueAction& continue_actions(int index) const;
  ::ContinueAction* add_continue_actions();
  const ::google::protobuf::RepeatedPtrField< ::ContinueAction >&
      continue_actions() const;

  // repeated .ContinueHint continue_hints = 5;
  int continue_hints_size() const;
  void clear_continue_hints();
  static const int kContinueHintsFieldNumber = 5;
  ::ContinueHint* mutable_continue_hints(int index);
  ::google::protobuf::RepeatedPtrField< ::ContinueHint >*
      mutable_continue_hints();
  const ::ContinueHint& continue_hints(int index) const;
  ::ContinueHint* add_continue_hints();
  const ::google::protobuf::RepeatedPtrField< ::ContinueHint >&
      continue_hints() const;

  // @@protoc_insertion_point(class_scope:GcState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      GcState_TeamStateEntry_DoNotUse,
      ::std::string, ::GcStateTeam,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > team_state_;
  ::google::protobuf::internal::MapField<
      GcState_AutoRefStateEntry_DoNotUse,
      ::std::string, ::GcStateAutoRef,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > auto_ref_state_;
  ::google::protobuf::internal::MapField<
      GcState_TrackersEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > trackers_;
  ::google::protobuf::RepeatedPtrField< ::ContinueAction > continue_actions_;
  ::google::protobuf::RepeatedPtrField< ::ContinueHint > continue_hints_;
  friend struct ::protobuf_ssl_5fgc_5fengine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GcStateTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GcStateTeam) */ {
 public:
  GcStateTeam();
  virtual ~GcStateTeam();

  GcStateTeam(const GcStateTeam& from);

  inline GcStateTeam& operator=(const GcStateTeam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GcStateTeam(GcStateTeam&& from) noexcept
    : GcStateTeam() {
    *this = ::std::move(from);
  }

  inline GcStateTeam& operator=(GcStateTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GcStateTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GcStateTeam* internal_default_instance() {
    return reinterpret_cast<const GcStateTeam*>(
               &_GcStateTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GcStateTeam* other);
  friend void swap(GcStateTeam& a, GcStateTeam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GcStateTeam* New() const final {
    return CreateMaybeMessage<GcStateTeam>(NULL);
  }

  GcStateTeam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GcStateTeam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GcStateTeam& from);
  void MergeFrom(const GcStateTeam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcStateTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TeamAdvantageChoice advantage_choice = 5;
  bool has_advantage_choice() const;
  void clear_advantage_choice();
  static const int kAdvantageChoiceFieldNumber = 5;
  private:
  const ::TeamAdvantageChoice& _internal_advantage_choice() const;
  public:
  const ::TeamAdvantageChoice& advantage_choice() const;
  ::TeamAdvantageChoice* release_advantage_choice();
  ::TeamAdvantageChoice* mutable_advantage_choice();
  void set_allocated_advantage_choice(::TeamAdvantageChoice* advantage_choice);

  // optional bool connected = 1;
  bool has_connected() const;
  void clear_connected();
  static const int kConnectedFieldNumber = 1;
  bool connected() const;
  void set_connected(bool value);

  // optional bool connection_verified = 2;
  bool has_connection_verified() const;
  void clear_connection_verified();
  static const int kConnectionVerifiedFieldNumber = 2;
  bool connection_verified() const;
  void set_connection_verified(bool value);

  // optional bool remote_control_connected = 3;
  bool has_remote_control_connected() const;
  void clear_remote_control_connected();
  static const int kRemoteControlConnectedFieldNumber = 3;
  bool remote_control_connected() const;
  void set_remote_control_connected(bool value);

  // optional bool remote_control_connection_verified = 4;
  bool has_remote_control_connection_verified() const;
  void clear_remote_control_connection_verified();
  static const int kRemoteControlConnectionVerifiedFieldNumber = 4;
  bool remote_control_connection_verified() const;
  void set_remote_control_connection_verified(bool value);

  // @@protoc_insertion_point(class_scope:GcStateTeam)
 private:
  void set_has_connected();
  void clear_has_connected();
  void set_has_connection_verified();
  void clear_has_connection_verified();
  void set_has_remote_control_connected();
  void clear_has_remote_control_connected();
  void set_has_remote_control_connection_verified();
  void clear_has_remote_control_connection_verified();
  void set_has_advantage_choice();
  void clear_has_advantage_choice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::TeamAdvantageChoice* advantage_choice_;
  bool connected_;
  bool connection_verified_;
  bool remote_control_connected_;
  bool remote_control_connection_verified_;
  friend struct ::protobuf_ssl_5fgc_5fengine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeamAdvantageChoice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeamAdvantageChoice) */ {
 public:
  TeamAdvantageChoice();
  virtual ~TeamAdvantageChoice();

  TeamAdvantageChoice(const TeamAdvantageChoice& from);

  inline TeamAdvantageChoice& operator=(const TeamAdvantageChoice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeamAdvantageChoice(TeamAdvantageChoice&& from) noexcept
    : TeamAdvantageChoice() {
    *this = ::std::move(from);
  }

  inline TeamAdvantageChoice& operator=(TeamAdvantageChoice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamAdvantageChoice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamAdvantageChoice* internal_default_instance() {
    return reinterpret_cast<const TeamAdvantageChoice*>(
               &_TeamAdvantageChoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TeamAdvantageChoice* other);
  friend void swap(TeamAdvantageChoice& a, TeamAdvantageChoice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeamAdvantageChoice* New() const final {
    return CreateMaybeMessage<TeamAdvantageChoice>(NULL);
  }

  TeamAdvantageChoice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TeamAdvantageChoice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TeamAdvantageChoice& from);
  void MergeFrom(const TeamAdvantageChoice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamAdvantageChoice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TeamAdvantageChoice_AdvantageChoice AdvantageChoice;
  static const AdvantageChoice STOP =
    TeamAdvantageChoice_AdvantageChoice_STOP;
  static const AdvantageChoice CONTINUE =
    TeamAdvantageChoice_AdvantageChoice_CONTINUE;
  static inline bool AdvantageChoice_IsValid(int value) {
    return TeamAdvantageChoice_AdvantageChoice_IsValid(value);
  }
  static const AdvantageChoice AdvantageChoice_MIN =
    TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_MIN;
  static const AdvantageChoice AdvantageChoice_MAX =
    TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_MAX;
  static const int AdvantageChoice_ARRAYSIZE =
    TeamAdvantageChoice_AdvantageChoice_AdvantageChoice_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AdvantageChoice_descriptor() {
    return TeamAdvantageChoice_AdvantageChoice_descriptor();
  }
  static inline const ::std::string& AdvantageChoice_Name(AdvantageChoice value) {
    return TeamAdvantageChoice_AdvantageChoice_Name(value);
  }
  static inline bool AdvantageChoice_Parse(const ::std::string& name,
      AdvantageChoice* value) {
    return TeamAdvantageChoice_AdvantageChoice_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
  bool has_choice() const;
  void clear_choice();
  static const int kChoiceFieldNumber = 1;
  ::TeamAdvantageChoice_AdvantageChoice choice() const;
  void set_choice(::TeamAdvantageChoice_AdvantageChoice value);

  // @@protoc_insertion_point(class_scope:TeamAdvantageChoice)
 private:
  void set_has_choice();
  void clear_has_choice();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int choice_;
  friend struct ::protobuf_ssl_5fgc_5fengine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GcStateAutoRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GcStateAutoRef) */ {
 public:
  GcStateAutoRef();
  virtual ~GcStateAutoRef();

  GcStateAutoRef(const GcStateAutoRef& from);

  inline GcStateAutoRef& operator=(const GcStateAutoRef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GcStateAutoRef(GcStateAutoRef&& from) noexcept
    : GcStateAutoRef() {
    *this = ::std::move(from);
  }

  inline GcStateAutoRef& operator=(GcStateAutoRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GcStateAutoRef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GcStateAutoRef* internal_default_instance() {
    return reinterpret_cast<const GcStateAutoRef*>(
               &_GcStateAutoRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GcStateAutoRef* other);
  friend void swap(GcStateAutoRef& a, GcStateAutoRef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GcStateAutoRef* New() const final {
    return CreateMaybeMessage<GcStateAutoRef>(NULL);
  }

  GcStateAutoRef* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GcStateAutoRef>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GcStateAutoRef& from);
  void MergeFrom(const GcStateAutoRef& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcStateAutoRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool connection_verified = 1;
  bool has_connection_verified() const;
  void clear_connection_verified();
  static const int kConnectionVerifiedFieldNumber = 1;
  bool connection_verified() const;
  void set_connection_verified(bool value);

  // @@protoc_insertion_point(class_scope:GcStateAutoRef)
 private:
  void set_has_connection_verified();
  void clear_has_connection_verified();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool connection_verified_;
  friend struct ::protobuf_ssl_5fgc_5fengine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GcStateTracker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GcStateTracker) */ {
 public:
  GcStateTracker();
  virtual ~GcStateTracker();

  GcStateTracker(const GcStateTracker& from);

  inline GcStateTracker& operator=(const GcStateTracker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GcStateTracker(GcStateTracker&& from) noexcept
    : GcStateTracker() {
    *this = ::std::move(from);
  }

  inline GcStateTracker& operator=(GcStateTracker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GcStateTracker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GcStateTracker* internal_default_instance() {
    return reinterpret_cast<const GcStateTracker*>(
               &_GcStateTracker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GcStateTracker* other);
  friend void swap(GcStateTracker& a, GcStateTracker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GcStateTracker* New() const final {
    return CreateMaybeMessage<GcStateTracker>(NULL);
  }

  GcStateTracker* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GcStateTracker>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GcStateTracker& from);
  void MergeFrom(const GcStateTracker& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GcStateTracker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Robot robots = 3;
  int robots_size() const;
  void clear_robots();
  static const int kRobotsFieldNumber = 3;
  ::Robot* mutable_robots(int index);
  ::google::protobuf::RepeatedPtrField< ::Robot >*
      mutable_robots();
  const ::Robot& robots(int index) const;
  ::Robot* add_robots();
  const ::google::protobuf::RepeatedPtrField< ::Robot >&
      robots() const;

  // optional string source_name = 1;
  bool has_source_name() const;
  void clear_source_name();
  static const int kSourceNameFieldNumber = 1;
  const ::std::string& source_name() const;
  void set_source_name(const ::std::string& value);
  #if LANG_CXX11
  void set_source_name(::std::string&& value);
  #endif
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  ::std::string* mutable_source_name();
  ::std::string* release_source_name();
  void set_allocated_source_name(::std::string* source_name);

  // optional string uuid = 4;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 4;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional .Ball ball = 2;
  bool has_ball() const;
  void clear_ball();
  static const int kBallFieldNumber = 2;
  private:
  const ::Ball& _internal_ball() const;
  public:
  const ::Ball& ball() const;
  ::Ball* release_ball();
  ::Ball* mutable_ball();
  void set_allocated_ball(::Ball* ball);

  // @@protoc_insertion_point(class_scope:GcStateTracker)
 private:
  void set_has_source_name();
  void clear_has_source_name();
  void set_has_uuid();
  void clear_has_uuid();
  void set_has_ball();
  void clear_has_ball();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Robot > robots_;
  ::google::protobuf::internal::ArenaStringPtr source_name_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::Ball* ball_;
  friend struct ::protobuf_ssl_5fgc_5fengine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ball : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Ball) */ {
 public:
  Ball();
  virtual ~Ball();

  Ball(const Ball& from);

  inline Ball& operator=(const Ball& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ball(Ball&& from) noexcept
    : Ball() {
    *this = ::std::move(from);
  }

  inline Ball& operator=(Ball&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ball& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ball* internal_default_instance() {
    return reinterpret_cast<const Ball*>(
               &_Ball_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Ball* other);
  friend void swap(Ball& a, Ball& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ball* New() const final {
    return CreateMaybeMessage<Ball>(NULL);
  }

  Ball* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ball>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ball& from);
  void MergeFrom(const Ball& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ball* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Vector3 pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  private:
  const ::Vector3& _internal_pos() const;
  public:
  const ::Vector3& pos() const;
  ::Vector3* release_pos();
  ::Vector3* mutable_pos();
  void set_allocated_pos(::Vector3* pos);

  // optional .Vector3 vel = 2;
  bool has_vel() const;
  void clear_vel();
  static const int kVelFieldNumber = 2;
  private:
  const ::Vector3& _internal_vel() const;
  public:
  const ::Vector3& vel() const;
  ::Vector3* release_vel();
  ::Vector3* mutable_vel();
  void set_allocated_vel(::Vector3* vel);

  // @@protoc_insertion_point(class_scope:Ball)
 private:
  void set_has_pos();
  void clear_has_pos();
  void set_has_vel();
  void clear_has_vel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::Vector3* pos_;
  ::Vector3* vel_;
  friend struct ::protobuf_ssl_5fgc_5fengine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Robot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Robot) */ {
 public:
  Robot();
  virtual ~Robot();

  Robot(const Robot& from);

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(Robot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Robot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Robot* other);
  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Robot* New() const final {
    return CreateMaybeMessage<Robot>(NULL);
  }

  Robot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RobotId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::RobotId& _internal_id() const;
  public:
  const ::RobotId& id() const;
  ::RobotId* release_id();
  ::RobotId* mutable_id();
  void set_allocated_id(::RobotId* id);

  // optional .Vector2 pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  private:
  const ::Vector2& _internal_pos() const;
  public:
  const ::Vector2& pos() const;
  ::Vector2* release_pos();
  ::Vector2* mutable_pos();
  void set_allocated_pos(::Vector2* pos);

  // @@protoc_insertion_point(class_scope:Robot)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_pos();
  void clear_has_pos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::RobotId* id_;
  ::Vector2* pos_;
  friend struct ::protobuf_ssl_5fgc_5fengine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContinueAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContinueAction) */ {
 public:
  ContinueAction();
  virtual ~ContinueAction();

  ContinueAction(const ContinueAction& from);

  inline ContinueAction& operator=(const ContinueAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContinueAction(ContinueAction&& from) noexcept
    : ContinueAction() {
    *this = ::std::move(from);
  }

  inline ContinueAction& operator=(ContinueAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContinueAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContinueAction* internal_default_instance() {
    return reinterpret_cast<const ContinueAction*>(
               &_ContinueAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ContinueAction* other);
  friend void swap(ContinueAction& a, ContinueAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContinueAction* New() const final {
    return CreateMaybeMessage<ContinueAction>(NULL);
  }

  ContinueAction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContinueAction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContinueAction& from);
  void MergeFrom(const ContinueAction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContinueAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContinueAction_Type Type;
  static const Type TYPE_UNKNOWN =
    ContinueAction_Type_TYPE_UNKNOWN;
  static const Type HALT =
    ContinueAction_Type_HALT;
  static const Type RESUME_FROM_HALT =
    ContinueAction_Type_RESUME_FROM_HALT;
  static const Type STOP_GAME =
    ContinueAction_Type_STOP_GAME;
  static const Type FORCE_START =
    ContinueAction_Type_FORCE_START;
  static const Type FREE_KICK =
    ContinueAction_Type_FREE_KICK;
  static const Type NEXT_COMMAND =
    ContinueAction_Type_NEXT_COMMAND;
  static const Type BALL_PLACEMENT_START =
    ContinueAction_Type_BALL_PLACEMENT_START;
  static const Type BALL_PLACEMENT_CANCEL =
    ContinueAction_Type_BALL_PLACEMENT_CANCEL;
  static const Type BALL_PLACEMENT_COMPLETE =
    ContinueAction_Type_BALL_PLACEMENT_COMPLETE;
  static const Type BALL_PLACEMENT_FAIL =
    ContinueAction_Type_BALL_PLACEMENT_FAIL;
  static const Type TIMEOUT_START =
    ContinueAction_Type_TIMEOUT_START;
  static const Type TIMEOUT_STOP =
    ContinueAction_Type_TIMEOUT_STOP;
  static const Type BOT_SUBSTITUTION =
    ContinueAction_Type_BOT_SUBSTITUTION;
  static const Type NEXT_STAGE =
    ContinueAction_Type_NEXT_STAGE;
  static const Type END_GAME =
    ContinueAction_Type_END_GAME;
  static const Type ACCEPT_GOAL =
    ContinueAction_Type_ACCEPT_GOAL;
  static const Type REJECT_GOAL =
    ContinueAction_Type_REJECT_GOAL;
  static const Type NORMAL_START =
    ContinueAction_Type_NORMAL_START;
  static const Type CHALLENGE_ACCEPT =
    ContinueAction_Type_CHALLENGE_ACCEPT;
  static const Type CHALLENGE_REJECT =
    ContinueAction_Type_CHALLENGE_REJECT;
  static inline bool Type_IsValid(int value) {
    return ContinueAction_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ContinueAction_Type_Type_MIN;
  static const Type Type_MAX =
    ContinueAction_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ContinueAction_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ContinueAction_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ContinueAction_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ContinueAction_Type_Parse(name, value);
  }

  typedef ContinueAction_State State;
  static const State STATE_UNKNOWN =
    ContinueAction_State_STATE_UNKNOWN;
  static const State BLOCKED =
    ContinueAction_State_BLOCKED;
  static const State WAITING =
    ContinueAction_State_WAITING;
  static const State READY_AUTO =
    ContinueAction_State_READY_AUTO;
  static const State READY_MANUAL =
    ContinueAction_State_READY_MANUAL;
  static const State DISABLED =
    ContinueAction_State_DISABLED;
  static inline bool State_IsValid(int value) {
    return ContinueAction_State_IsValid(value);
  }
  static const State State_MIN =
    ContinueAction_State_State_MIN;
  static const State State_MAX =
    ContinueAction_State_State_MAX;
  static const int State_ARRAYSIZE =
    ContinueAction_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return ContinueAction_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return ContinueAction_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return ContinueAction_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string continuation_issues = 3;
  int continuation_issues_size() const;
  void clear_continuation_issues();
  static const int kContinuationIssuesFieldNumber = 3;
  const ::std::string& continuation_issues(int index) const;
  ::std::string* mutable_continuation_issues(int index);
  void set_continuation_issues(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_continuation_issues(int index, ::std::string&& value);
  #endif
  void set_continuation_issues(int index, const char* value);
  void set_continuation_issues(int index, const char* value, size_t size);
  ::std::string* add_continuation_issues();
  void add_continuation_issues(const ::std::string& value);
  #if LANG_CXX11
  void add_continuation_issues(::std::string&& value);
  #endif
  void add_continuation_issues(const char* value);
  void add_continuation_issues(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& continuation_issues() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_continuation_issues();

  // optional .google.protobuf.Timestamp ready_at = 4;
  bool has_ready_at() const;
  void clear_ready_at();
  static const int kReadyAtFieldNumber = 4;
  private:
  const ::google::protobuf::Timestamp& _internal_ready_at() const;
  public:
  const ::google::protobuf::Timestamp& ready_at() const;
  ::google::protobuf::Timestamp* release_ready_at();
  ::google::protobuf::Timestamp* mutable_ready_at();
  void set_allocated_ready_at(::google::protobuf::Timestamp* ready_at);

  // required .ContinueAction.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ContinueAction_Type type() const;
  void set_type(::ContinueAction_Type value);

  // required .Team for_team = 2;
  bool has_for_team() const;
  void clear_for_team();
  static const int kForTeamFieldNumber = 2;
  ::Team for_team() const;
  void set_for_team(::Team value);

  // optional .ContinueAction.State state = 5;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 5;
  ::ContinueAction_State state() const;
  void set_state(::ContinueAction_State value);

  // @@protoc_insertion_point(class_scope:ContinueAction)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_for_team();
  void clear_has_for_team();
  void set_has_ready_at();
  void clear_has_ready_at();
  void set_has_state();
  void clear_has_state();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> continuation_issues_;
  ::google::protobuf::Timestamp* ready_at_;
  int type_;
  int for_team_;
  int state_;
  friend struct ::protobuf_ssl_5fgc_5fengine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContinueHint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ContinueHint) */ {
 public:
  ContinueHint();
  virtual ~ContinueHint();

  ContinueHint(const ContinueHint& from);

  inline ContinueHint& operator=(const ContinueHint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContinueHint(ContinueHint&& from) noexcept
    : ContinueHint() {
    *this = ::std::move(from);
  }

  inline ContinueHint& operator=(ContinueHint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContinueHint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContinueHint* internal_default_instance() {
    return reinterpret_cast<const ContinueHint*>(
               &_ContinueHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ContinueHint* other);
  friend void swap(ContinueHint& a, ContinueHint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContinueHint* New() const final {
    return CreateMaybeMessage<ContinueHint>(NULL);
  }

  ContinueHint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContinueHint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContinueHint& from);
  void MergeFrom(const ContinueHint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContinueHint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:ContinueHint)
 private:
  void set_has_message();
  void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  friend struct ::protobuf_ssl_5fgc_5fengine_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GcState

// map<string, .GcStateTeam> team_state = 1;
inline int GcState::team_state_size() const {
  return team_state_.size();
}
inline void GcState::clear_team_state() {
  team_state_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::GcStateTeam >&
GcState::team_state() const {
  // @@protoc_insertion_point(field_map:GcState.team_state)
  return team_state_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::GcStateTeam >*
GcState::mutable_team_state() {
  // @@protoc_insertion_point(field_mutable_map:GcState.team_state)
  return team_state_.MutableMap();
}

// map<string, .GcStateAutoRef> auto_ref_state = 2;
inline int GcState::auto_ref_state_size() const {
  return auto_ref_state_.size();
}
inline void GcState::clear_auto_ref_state() {
  auto_ref_state_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::GcStateAutoRef >&
GcState::auto_ref_state() const {
  // @@protoc_insertion_point(field_map:GcState.auto_ref_state)
  return auto_ref_state_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::GcStateAutoRef >*
GcState::mutable_auto_ref_state() {
  // @@protoc_insertion_point(field_mutable_map:GcState.auto_ref_state)
  return auto_ref_state_.MutableMap();
}

// map<string, string> trackers = 3;
inline int GcState::trackers_size() const {
  return trackers_.size();
}
inline void GcState::clear_trackers() {
  trackers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
GcState::trackers() const {
  // @@protoc_insertion_point(field_map:GcState.trackers)
  return trackers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
GcState::mutable_trackers() {
  // @@protoc_insertion_point(field_mutable_map:GcState.trackers)
  return trackers_.MutableMap();
}

// repeated .ContinueAction continue_actions = 4;
inline int GcState::continue_actions_size() const {
  return continue_actions_.size();
}
inline void GcState::clear_continue_actions() {
  continue_actions_.Clear();
}
inline ::ContinueAction* GcState::mutable_continue_actions(int index) {
  // @@protoc_insertion_point(field_mutable:GcState.continue_actions)
  return continue_actions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ContinueAction >*
GcState::mutable_continue_actions() {
  // @@protoc_insertion_point(field_mutable_list:GcState.continue_actions)
  return &continue_actions_;
}
inline const ::ContinueAction& GcState::continue_actions(int index) const {
  // @@protoc_insertion_point(field_get:GcState.continue_actions)
  return continue_actions_.Get(index);
}
inline ::ContinueAction* GcState::add_continue_actions() {
  // @@protoc_insertion_point(field_add:GcState.continue_actions)
  return continue_actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContinueAction >&
GcState::continue_actions() const {
  // @@protoc_insertion_point(field_list:GcState.continue_actions)
  return continue_actions_;
}

// repeated .ContinueHint continue_hints = 5;
inline int GcState::continue_hints_size() const {
  return continue_hints_.size();
}
inline void GcState::clear_continue_hints() {
  continue_hints_.Clear();
}
inline ::ContinueHint* GcState::mutable_continue_hints(int index) {
  // @@protoc_insertion_point(field_mutable:GcState.continue_hints)
  return continue_hints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ContinueHint >*
GcState::mutable_continue_hints() {
  // @@protoc_insertion_point(field_mutable_list:GcState.continue_hints)
  return &continue_hints_;
}
inline const ::ContinueHint& GcState::continue_hints(int index) const {
  // @@protoc_insertion_point(field_get:GcState.continue_hints)
  return continue_hints_.Get(index);
}
inline ::ContinueHint* GcState::add_continue_hints() {
  // @@protoc_insertion_point(field_add:GcState.continue_hints)
  return continue_hints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ContinueHint >&
GcState::continue_hints() const {
  // @@protoc_insertion_point(field_list:GcState.continue_hints)
  return continue_hints_;
}

// -------------------------------------------------------------------

// GcStateTeam

// optional bool connected = 1;
inline bool GcStateTeam::has_connected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GcStateTeam::set_has_connected() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GcStateTeam::clear_has_connected() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GcStateTeam::clear_connected() {
  connected_ = false;
  clear_has_connected();
}
inline bool GcStateTeam::connected() const {
  // @@protoc_insertion_point(field_get:GcStateTeam.connected)
  return connected_;
}
inline void GcStateTeam::set_connected(bool value) {
  set_has_connected();
  connected_ = value;
  // @@protoc_insertion_point(field_set:GcStateTeam.connected)
}

// optional bool connection_verified = 2;
inline bool GcStateTeam::has_connection_verified() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GcStateTeam::set_has_connection_verified() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GcStateTeam::clear_has_connection_verified() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GcStateTeam::clear_connection_verified() {
  connection_verified_ = false;
  clear_has_connection_verified();
}
inline bool GcStateTeam::connection_verified() const {
  // @@protoc_insertion_point(field_get:GcStateTeam.connection_verified)
  return connection_verified_;
}
inline void GcStateTeam::set_connection_verified(bool value) {
  set_has_connection_verified();
  connection_verified_ = value;
  // @@protoc_insertion_point(field_set:GcStateTeam.connection_verified)
}

// optional bool remote_control_connected = 3;
inline bool GcStateTeam::has_remote_control_connected() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GcStateTeam::set_has_remote_control_connected() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GcStateTeam::clear_has_remote_control_connected() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GcStateTeam::clear_remote_control_connected() {
  remote_control_connected_ = false;
  clear_has_remote_control_connected();
}
inline bool GcStateTeam::remote_control_connected() const {
  // @@protoc_insertion_point(field_get:GcStateTeam.remote_control_connected)
  return remote_control_connected_;
}
inline void GcStateTeam::set_remote_control_connected(bool value) {
  set_has_remote_control_connected();
  remote_control_connected_ = value;
  // @@protoc_insertion_point(field_set:GcStateTeam.remote_control_connected)
}

// optional bool remote_control_connection_verified = 4;
inline bool GcStateTeam::has_remote_control_connection_verified() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GcStateTeam::set_has_remote_control_connection_verified() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GcStateTeam::clear_has_remote_control_connection_verified() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GcStateTeam::clear_remote_control_connection_verified() {
  remote_control_connection_verified_ = false;
  clear_has_remote_control_connection_verified();
}
inline bool GcStateTeam::remote_control_connection_verified() const {
  // @@protoc_insertion_point(field_get:GcStateTeam.remote_control_connection_verified)
  return remote_control_connection_verified_;
}
inline void GcStateTeam::set_remote_control_connection_verified(bool value) {
  set_has_remote_control_connection_verified();
  remote_control_connection_verified_ = value;
  // @@protoc_insertion_point(field_set:GcStateTeam.remote_control_connection_verified)
}

// optional .TeamAdvantageChoice advantage_choice = 5;
inline bool GcStateTeam::has_advantage_choice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GcStateTeam::set_has_advantage_choice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GcStateTeam::clear_has_advantage_choice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GcStateTeam::clear_advantage_choice() {
  if (advantage_choice_ != NULL) advantage_choice_->Clear();
  clear_has_advantage_choice();
}
inline const ::TeamAdvantageChoice& GcStateTeam::_internal_advantage_choice() const {
  return *advantage_choice_;
}
inline const ::TeamAdvantageChoice& GcStateTeam::advantage_choice() const {
  const ::TeamAdvantageChoice* p = advantage_choice_;
  // @@protoc_insertion_point(field_get:GcStateTeam.advantage_choice)
  return p != NULL ? *p : *reinterpret_cast<const ::TeamAdvantageChoice*>(
      &::_TeamAdvantageChoice_default_instance_);
}
inline ::TeamAdvantageChoice* GcStateTeam::release_advantage_choice() {
  // @@protoc_insertion_point(field_release:GcStateTeam.advantage_choice)
  clear_has_advantage_choice();
  ::TeamAdvantageChoice* temp = advantage_choice_;
  advantage_choice_ = NULL;
  return temp;
}
inline ::TeamAdvantageChoice* GcStateTeam::mutable_advantage_choice() {
  set_has_advantage_choice();
  if (advantage_choice_ == NULL) {
    auto* p = CreateMaybeMessage<::TeamAdvantageChoice>(GetArenaNoVirtual());
    advantage_choice_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GcStateTeam.advantage_choice)
  return advantage_choice_;
}
inline void GcStateTeam::set_allocated_advantage_choice(::TeamAdvantageChoice* advantage_choice) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete advantage_choice_;
  }
  if (advantage_choice) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      advantage_choice = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, advantage_choice, submessage_arena);
    }
    set_has_advantage_choice();
  } else {
    clear_has_advantage_choice();
  }
  advantage_choice_ = advantage_choice;
  // @@protoc_insertion_point(field_set_allocated:GcStateTeam.advantage_choice)
}

// -------------------------------------------------------------------

// TeamAdvantageChoice

// optional .TeamAdvantageChoice.AdvantageChoice choice = 1;
inline bool TeamAdvantageChoice::has_choice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamAdvantageChoice::set_has_choice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamAdvantageChoice::clear_has_choice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamAdvantageChoice::clear_choice() {
  choice_ = 0;
  clear_has_choice();
}
inline ::TeamAdvantageChoice_AdvantageChoice TeamAdvantageChoice::choice() const {
  // @@protoc_insertion_point(field_get:TeamAdvantageChoice.choice)
  return static_cast< ::TeamAdvantageChoice_AdvantageChoice >(choice_);
}
inline void TeamAdvantageChoice::set_choice(::TeamAdvantageChoice_AdvantageChoice value) {
  assert(::TeamAdvantageChoice_AdvantageChoice_IsValid(value));
  set_has_choice();
  choice_ = value;
  // @@protoc_insertion_point(field_set:TeamAdvantageChoice.choice)
}

// -------------------------------------------------------------------

// GcStateAutoRef

// optional bool connection_verified = 1;
inline bool GcStateAutoRef::has_connection_verified() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GcStateAutoRef::set_has_connection_verified() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GcStateAutoRef::clear_has_connection_verified() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GcStateAutoRef::clear_connection_verified() {
  connection_verified_ = false;
  clear_has_connection_verified();
}
inline bool GcStateAutoRef::connection_verified() const {
  // @@protoc_insertion_point(field_get:GcStateAutoRef.connection_verified)
  return connection_verified_;
}
inline void GcStateAutoRef::set_connection_verified(bool value) {
  set_has_connection_verified();
  connection_verified_ = value;
  // @@protoc_insertion_point(field_set:GcStateAutoRef.connection_verified)
}

// -------------------------------------------------------------------

// GcStateTracker

// optional string source_name = 1;
inline bool GcStateTracker::has_source_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GcStateTracker::set_has_source_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GcStateTracker::clear_has_source_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GcStateTracker::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_name();
}
inline const ::std::string& GcStateTracker::source_name() const {
  // @@protoc_insertion_point(field_get:GcStateTracker.source_name)
  return source_name_.GetNoArena();
}
inline void GcStateTracker::set_source_name(const ::std::string& value) {
  set_has_source_name();
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GcStateTracker.source_name)
}
#if LANG_CXX11
inline void GcStateTracker::set_source_name(::std::string&& value) {
  set_has_source_name();
  source_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GcStateTracker.source_name)
}
#endif
inline void GcStateTracker::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_name();
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GcStateTracker.source_name)
}
inline void GcStateTracker::set_source_name(const char* value, size_t size) {
  set_has_source_name();
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GcStateTracker.source_name)
}
inline ::std::string* GcStateTracker::mutable_source_name() {
  set_has_source_name();
  // @@protoc_insertion_point(field_mutable:GcStateTracker.source_name)
  return source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GcStateTracker::release_source_name() {
  // @@protoc_insertion_point(field_release:GcStateTracker.source_name)
  if (!has_source_name()) {
    return NULL;
  }
  clear_has_source_name();
  return source_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GcStateTracker::set_allocated_source_name(::std::string* source_name) {
  if (source_name != NULL) {
    set_has_source_name();
  } else {
    clear_has_source_name();
  }
  source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:GcStateTracker.source_name)
}

// optional string uuid = 4;
inline bool GcStateTracker::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GcStateTracker::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GcStateTracker::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GcStateTracker::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& GcStateTracker::uuid() const {
  // @@protoc_insertion_point(field_get:GcStateTracker.uuid)
  return uuid_.GetNoArena();
}
inline void GcStateTracker::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GcStateTracker.uuid)
}
#if LANG_CXX11
inline void GcStateTracker::set_uuid(::std::string&& value) {
  set_has_uuid();
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GcStateTracker.uuid)
}
#endif
inline void GcStateTracker::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GcStateTracker.uuid)
}
inline void GcStateTracker::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GcStateTracker.uuid)
}
inline ::std::string* GcStateTracker::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:GcStateTracker.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GcStateTracker::release_uuid() {
  // @@protoc_insertion_point(field_release:GcStateTracker.uuid)
  if (!has_uuid()) {
    return NULL;
  }
  clear_has_uuid();
  return uuid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GcStateTracker::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:GcStateTracker.uuid)
}

// optional .Ball ball = 2;
inline bool GcStateTracker::has_ball() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GcStateTracker::set_has_ball() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GcStateTracker::clear_has_ball() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GcStateTracker::clear_ball() {
  if (ball_ != NULL) ball_->Clear();
  clear_has_ball();
}
inline const ::Ball& GcStateTracker::_internal_ball() const {
  return *ball_;
}
inline const ::Ball& GcStateTracker::ball() const {
  const ::Ball* p = ball_;
  // @@protoc_insertion_point(field_get:GcStateTracker.ball)
  return p != NULL ? *p : *reinterpret_cast<const ::Ball*>(
      &::_Ball_default_instance_);
}
inline ::Ball* GcStateTracker::release_ball() {
  // @@protoc_insertion_point(field_release:GcStateTracker.ball)
  clear_has_ball();
  ::Ball* temp = ball_;
  ball_ = NULL;
  return temp;
}
inline ::Ball* GcStateTracker::mutable_ball() {
  set_has_ball();
  if (ball_ == NULL) {
    auto* p = CreateMaybeMessage<::Ball>(GetArenaNoVirtual());
    ball_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GcStateTracker.ball)
  return ball_;
}
inline void GcStateTracker::set_allocated_ball(::Ball* ball) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ball_;
  }
  if (ball) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ball = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ball, submessage_arena);
    }
    set_has_ball();
  } else {
    clear_has_ball();
  }
  ball_ = ball;
  // @@protoc_insertion_point(field_set_allocated:GcStateTracker.ball)
}

// repeated .Robot robots = 3;
inline int GcStateTracker::robots_size() const {
  return robots_.size();
}
inline void GcStateTracker::clear_robots() {
  robots_.Clear();
}
inline ::Robot* GcStateTracker::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:GcStateTracker.robots)
  return robots_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Robot >*
GcStateTracker::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:GcStateTracker.robots)
  return &robots_;
}
inline const ::Robot& GcStateTracker::robots(int index) const {
  // @@protoc_insertion_point(field_get:GcStateTracker.robots)
  return robots_.Get(index);
}
inline ::Robot* GcStateTracker::add_robots() {
  // @@protoc_insertion_point(field_add:GcStateTracker.robots)
  return robots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Robot >&
GcStateTracker::robots() const {
  // @@protoc_insertion_point(field_list:GcStateTracker.robots)
  return robots_;
}

// -------------------------------------------------------------------

// Ball

// optional .Vector3 pos = 1;
inline bool Ball::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ball::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ball::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Vector3& Ball::_internal_pos() const {
  return *pos_;
}
inline const ::Vector3& Ball::pos() const {
  const ::Vector3* p = pos_;
  // @@protoc_insertion_point(field_get:Ball.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::Vector3*>(
      &::_Vector3_default_instance_);
}
inline ::Vector3* Ball::release_pos() {
  // @@protoc_insertion_point(field_release:Ball.pos)
  clear_has_pos();
  ::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::Vector3* Ball::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Ball.pos)
  return pos_;
}
inline void Ball::set_allocated_pos(::Vector3* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pos_);
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Ball.pos)
}

// optional .Vector3 vel = 2;
inline bool Ball::has_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ball::set_has_vel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ball::clear_has_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Vector3& Ball::_internal_vel() const {
  return *vel_;
}
inline const ::Vector3& Ball::vel() const {
  const ::Vector3* p = vel_;
  // @@protoc_insertion_point(field_get:Ball.vel)
  return p != NULL ? *p : *reinterpret_cast<const ::Vector3*>(
      &::_Vector3_default_instance_);
}
inline ::Vector3* Ball::release_vel() {
  // @@protoc_insertion_point(field_release:Ball.vel)
  clear_has_vel();
  ::Vector3* temp = vel_;
  vel_ = NULL;
  return temp;
}
inline ::Vector3* Ball::mutable_vel() {
  set_has_vel();
  if (vel_ == NULL) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaNoVirtual());
    vel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Ball.vel)
  return vel_;
}
inline void Ball::set_allocated_vel(::Vector3* vel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(vel_);
  }
  if (vel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    set_has_vel();
  } else {
    clear_has_vel();
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:Ball.vel)
}

// -------------------------------------------------------------------

// Robot

// optional .RobotId id = 1;
inline bool Robot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Robot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Robot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::RobotId& Robot::_internal_id() const {
  return *id_;
}
inline const ::RobotId& Robot::id() const {
  const ::RobotId* p = id_;
  // @@protoc_insertion_point(field_get:Robot.id)
  return p != NULL ? *p : *reinterpret_cast<const ::RobotId*>(
      &::_RobotId_default_instance_);
}
inline ::RobotId* Robot::release_id() {
  // @@protoc_insertion_point(field_release:Robot.id)
  clear_has_id();
  ::RobotId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::RobotId* Robot::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::RobotId>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Robot.id)
  return id_;
}
inline void Robot::set_allocated_id(::RobotId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:Robot.id)
}

// optional .Vector2 pos = 2;
inline bool Robot::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Robot::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Robot::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Vector2& Robot::_internal_pos() const {
  return *pos_;
}
inline const ::Vector2& Robot::pos() const {
  const ::Vector2* p = pos_;
  // @@protoc_insertion_point(field_get:Robot.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::Vector2*>(
      &::_Vector2_default_instance_);
}
inline ::Vector2* Robot::release_pos() {
  // @@protoc_insertion_point(field_release:Robot.pos)
  clear_has_pos();
  ::Vector2* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::Vector2* Robot::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::Vector2>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Robot.pos)
  return pos_;
}
inline void Robot::set_allocated_pos(::Vector2* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pos_);
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    set_has_pos();
  } else {
    clear_has_pos();
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Robot.pos)
}

// -------------------------------------------------------------------

// ContinueAction

// required .ContinueAction.Type type = 1;
inline bool ContinueAction::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContinueAction::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContinueAction::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContinueAction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ContinueAction_Type ContinueAction::type() const {
  // @@protoc_insertion_point(field_get:ContinueAction.type)
  return static_cast< ::ContinueAction_Type >(type_);
}
inline void ContinueAction::set_type(::ContinueAction_Type value) {
  assert(::ContinueAction_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ContinueAction.type)
}

// required .Team for_team = 2;
inline bool ContinueAction::has_for_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContinueAction::set_has_for_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContinueAction::clear_has_for_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContinueAction::clear_for_team() {
  for_team_ = 0;
  clear_has_for_team();
}
inline ::Team ContinueAction::for_team() const {
  // @@protoc_insertion_point(field_get:ContinueAction.for_team)
  return static_cast< ::Team >(for_team_);
}
inline void ContinueAction::set_for_team(::Team value) {
  assert(::Team_IsValid(value));
  set_has_for_team();
  for_team_ = value;
  // @@protoc_insertion_point(field_set:ContinueAction.for_team)
}

// repeated string continuation_issues = 3;
inline int ContinueAction::continuation_issues_size() const {
  return continuation_issues_.size();
}
inline void ContinueAction::clear_continuation_issues() {
  continuation_issues_.Clear();
}
inline const ::std::string& ContinueAction::continuation_issues(int index) const {
  // @@protoc_insertion_point(field_get:ContinueAction.continuation_issues)
  return continuation_issues_.Get(index);
}
inline ::std::string* ContinueAction::mutable_continuation_issues(int index) {
  // @@protoc_insertion_point(field_mutable:ContinueAction.continuation_issues)
  return continuation_issues_.Mutable(index);
}
inline void ContinueAction::set_continuation_issues(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ContinueAction.continuation_issues)
  continuation_issues_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ContinueAction::set_continuation_issues(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ContinueAction.continuation_issues)
  continuation_issues_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ContinueAction::set_continuation_issues(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  continuation_issues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ContinueAction.continuation_issues)
}
inline void ContinueAction::set_continuation_issues(int index, const char* value, size_t size) {
  continuation_issues_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ContinueAction.continuation_issues)
}
inline ::std::string* ContinueAction::add_continuation_issues() {
  // @@protoc_insertion_point(field_add_mutable:ContinueAction.continuation_issues)
  return continuation_issues_.Add();
}
inline void ContinueAction::add_continuation_issues(const ::std::string& value) {
  continuation_issues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ContinueAction.continuation_issues)
}
#if LANG_CXX11
inline void ContinueAction::add_continuation_issues(::std::string&& value) {
  continuation_issues_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ContinueAction.continuation_issues)
}
#endif
inline void ContinueAction::add_continuation_issues(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  continuation_issues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ContinueAction.continuation_issues)
}
inline void ContinueAction::add_continuation_issues(const char* value, size_t size) {
  continuation_issues_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ContinueAction.continuation_issues)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ContinueAction::continuation_issues() const {
  // @@protoc_insertion_point(field_list:ContinueAction.continuation_issues)
  return continuation_issues_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ContinueAction::mutable_continuation_issues() {
  // @@protoc_insertion_point(field_mutable_list:ContinueAction.continuation_issues)
  return &continuation_issues_;
}

// optional .google.protobuf.Timestamp ready_at = 4;
inline bool ContinueAction::has_ready_at() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContinueAction::set_has_ready_at() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContinueAction::clear_has_ready_at() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::google::protobuf::Timestamp& ContinueAction::_internal_ready_at() const {
  return *ready_at_;
}
inline const ::google::protobuf::Timestamp& ContinueAction::ready_at() const {
  const ::google::protobuf::Timestamp* p = ready_at_;
  // @@protoc_insertion_point(field_get:ContinueAction.ready_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ContinueAction::release_ready_at() {
  // @@protoc_insertion_point(field_release:ContinueAction.ready_at)
  clear_has_ready_at();
  ::google::protobuf::Timestamp* temp = ready_at_;
  ready_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ContinueAction::mutable_ready_at() {
  set_has_ready_at();
  if (ready_at_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    ready_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ContinueAction.ready_at)
  return ready_at_;
}
inline void ContinueAction::set_allocated_ready_at(::google::protobuf::Timestamp* ready_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ready_at_);
  }
  if (ready_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(ready_at)->GetArena();
    if (message_arena != submessage_arena) {
      ready_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ready_at, submessage_arena);
    }
    set_has_ready_at();
  } else {
    clear_has_ready_at();
  }
  ready_at_ = ready_at;
  // @@protoc_insertion_point(field_set_allocated:ContinueAction.ready_at)
}

// optional .ContinueAction.State state = 5;
inline bool ContinueAction::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContinueAction::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContinueAction::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContinueAction::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::ContinueAction_State ContinueAction::state() const {
  // @@protoc_insertion_point(field_get:ContinueAction.state)
  return static_cast< ::ContinueAction_State >(state_);
}
inline void ContinueAction::set_state(::ContinueAction_State value) {
  assert(::ContinueAction_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:ContinueAction.state)
}

// -------------------------------------------------------------------

// ContinueHint

// required string message = 1;
inline bool ContinueHint::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContinueHint::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContinueHint::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContinueHint::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& ContinueHint::message() const {
  // @@protoc_insertion_point(field_get:ContinueHint.message)
  return message_.GetNoArena();
}
inline void ContinueHint::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContinueHint.message)
}
#if LANG_CXX11
inline void ContinueHint::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ContinueHint.message)
}
#endif
inline void ContinueHint::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContinueHint.message)
}
inline void ContinueHint::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContinueHint.message)
}
inline ::std::string* ContinueHint::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:ContinueHint.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContinueHint::release_message() {
  // @@protoc_insertion_point(field_release:ContinueHint.message)
  if (!has_message()) {
    return NULL;
  }
  clear_has_message();
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContinueHint::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ContinueHint.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TeamAdvantageChoice_AdvantageChoice> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamAdvantageChoice_AdvantageChoice>() {
  return ::TeamAdvantageChoice_AdvantageChoice_descriptor();
}
template <> struct is_proto_enum< ::ContinueAction_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ContinueAction_Type>() {
  return ::ContinueAction_Type_descriptor();
}
template <> struct is_proto_enum< ::ContinueAction_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ContinueAction_State>() {
  return ::ContinueAction_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ssl_5fgc_5fengine_2eproto
