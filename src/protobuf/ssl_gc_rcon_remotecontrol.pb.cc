// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_rcon_remotecontrol.proto

#include "ssl_gc_rcon_remotecontrol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ssl_5fgc_5frcon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5frcon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControllerReply;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5frcon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Signature;
}  // namespace protobuf_ssl_5fgc_5frcon_2eproto
namespace protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RemoteControlTeamState;
}  // namespace protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto
class RemoteControlRegistrationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoteControlRegistration>
      _instance;
} _RemoteControlRegistration_default_instance_;
class RemoteControlToControllerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoteControlToController>
      _instance;
  int request_;
  ::google::protobuf::int32 desired_keeper_;
  bool request_robot_substitution_;
  bool request_timeout_;
  bool request_emergency_stop_;
} _RemoteControlToController_default_instance_;
class ControllerToRemoteControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerToRemoteControl>
      _instance;
} _ControllerToRemoteControl_default_instance_;
class RemoteControlTeamStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoteControlTeamState>
      _instance;
} _RemoteControlTeamState_default_instance_;
namespace protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto {
static void InitDefaultsRemoteControlRegistration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoteControlRegistration_default_instance_;
    new (ptr) ::RemoteControlRegistration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoteControlRegistration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RemoteControlRegistration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRemoteControlRegistration}, {
      &protobuf_ssl_5fgc_5frcon_2eproto::scc_info_Signature.base,}};

static void InitDefaultsRemoteControlToController() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoteControlToController_default_instance_;
    new (ptr) ::RemoteControlToController();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoteControlToController::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RemoteControlToController =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRemoteControlToController}, {
      &protobuf_ssl_5fgc_5frcon_2eproto::scc_info_Signature.base,}};

static void InitDefaultsControllerToRemoteControl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ControllerToRemoteControl_default_instance_;
    new (ptr) ::ControllerToRemoteControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControllerToRemoteControl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ControllerToRemoteControl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsControllerToRemoteControl}, {
      &protobuf_ssl_5fgc_5frcon_2eproto::scc_info_ControllerReply.base,
      &protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::scc_info_RemoteControlTeamState.base,}};

static void InitDefaultsRemoteControlTeamState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoteControlTeamState_default_instance_;
    new (ptr) ::RemoteControlTeamState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoteControlTeamState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RemoteControlTeamState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRemoteControlTeamState}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RemoteControlRegistration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoteControlToController.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerToRemoteControl.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoteControlTeamState.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlRegistration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlRegistration, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlRegistration, signature_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlToController, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlToController, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlToController, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlToController, signature_),
  offsetof(::RemoteControlToControllerDefaultTypeInternal, request_),
  offsetof(::RemoteControlToControllerDefaultTypeInternal, desired_keeper_),
  offsetof(::RemoteControlToControllerDefaultTypeInternal, request_robot_substitution_),
  offsetof(::RemoteControlToControllerDefaultTypeInternal, request_timeout_),
  offsetof(::RemoteControlToControllerDefaultTypeInternal, request_emergency_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlToController, msg_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerToRemoteControl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerToRemoteControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerToRemoteControl, controller_reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControllerToRemoteControl, state_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, available_requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, active_requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, keeper_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, emergency_stop_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, timeouts_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, timeout_time_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, challenge_flags_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, max_robots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, robots_on_field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, yellow_cards_due_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, can_substitute_robot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, bot_substitutions_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RemoteControlTeamState, bot_substitution_time_left_),
  8,
  ~0u,
  ~0u,
  0,
  1,
  2,
  6,
  3,
  4,
  5,
  ~0u,
  7,
  9,
  10,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::RemoteControlRegistration)},
  { 9, 21, sizeof(::RemoteControlToController)},
  { 27, 34, sizeof(::ControllerToRemoteControl)},
  { 36, 55, sizeof(::RemoteControlTeamState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RemoteControlRegistration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RemoteControlToController_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ControllerToRemoteControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RemoteControlTeamState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ssl_gc_rcon_remotecontrol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037ssl_gc_rcon_remotecontrol.proto\032\023ssl_g"
      "c_common.proto\032\021ssl_gc_rcon.proto\"O\n\031Rem"
      "oteControlRegistration\022\023\n\004team\030\001 \002(\0162\005.T"
      "eam\022\035\n\tsignature\030\002 \001(\0132\n.Signature\"\325\002\n\031R"
      "emoteControlToController\022\035\n\tsignature\030\001 "
      "\001(\0132\n.Signature\0225\n\007request\030\002 \001(\0162\".Remot"
      "eControlToController.RequestH\000\022\030\n\016desire"
      "d_keeper\030\003 \001(\005H\000\022$\n\032request_robot_substi"
      "tution\030\004 \001(\010H\000\022\031\n\017request_timeout\030\005 \001(\010H"
      "\000\022 \n\026request_emergency_stop\030\006 \001(\010H\000\"^\n\007R"
      "equest\022\013\n\007UNKNOWN\020\000\022\010\n\004PING\020\001\022\022\n\016CHALLEN"
      "GE_FLAG\020\002\022\020\n\014STOP_TIMEOUT\020\003\022\026\n\022FAIL_BALL"
      "PLACEMENT\020\004B\005\n\003msg\"o\n\031ControllerToRemote"
      "Control\022*\n\020controller_reply\030\001 \001(\0132\020.Cont"
      "rollerReply\022&\n\005state\030\002 \001(\0132\027.RemoteContr"
      "olTeamState\"\277\003\n\026RemoteControlTeamState\022\023"
      "\n\004team\030\014 \001(\0162\005.Team\0225\n\022available_request"
      "s\030\001 \003(\0162\031.RemoteControlRequestType\0222\n\017ac"
      "tive_requests\030\002 \003(\0162\031.RemoteControlReque"
      "stType\022\021\n\tkeeper_id\030\003 \001(\005\022\031\n\021emergency_s"
      "top_in\030\004 \001(\002\022\025\n\rtimeouts_left\030\005 \001(\005\022\031\n\021t"
      "imeout_time_left\030\n \001(\002\022\034\n\024challenge_flag"
      "s_left\030\006 \001(\005\022\022\n\nmax_robots\030\007 \001(\005\022\027\n\017robo"
      "ts_on_field\030\t \001(\005\022\030\n\020yellow_cards_due\030\010 "
      "\003(\002\022\034\n\024can_substitute_robot\030\013 \001(\010\022\036\n\026bot"
      "_substitutions_left\030\r \001(\r\022\"\n\032bot_substit"
      "ution_time_left\030\016 \001(\002*\301\001\n\030RemoteControlR"
      "equestType\022\030\n\024UNKNOWN_REQUEST_TYPE\020\000\022\022\n\016"
      "EMERGENCY_STOP\020\001\022\026\n\022ROBOT_SUBSTITUTION\020\002"
      "\022\013\n\007TIMEOUT\020\003\022\022\n\016CHALLENGE_FLAG\020\004\022\024\n\020CHA"
      "NGE_KEEPER_ID\020\005\022\020\n\014STOP_TIMEOUT\020\006\022\026\n\022FAI"
      "L_BALLPLACEMENT\020\007"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1257);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_gc_rcon_remotecontrol.proto", &protobuf_RegisterTypes);
  ::protobuf_ssl_5fgc_5fcommon_2eproto::AddDescriptors();
  ::protobuf_ssl_5fgc_5frcon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto
const ::google::protobuf::EnumDescriptor* RemoteControlToController_Request_descriptor() {
  protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::file_level_enum_descriptors[0];
}
bool RemoteControlToController_Request_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RemoteControlToController_Request RemoteControlToController::UNKNOWN;
const RemoteControlToController_Request RemoteControlToController::PING;
const RemoteControlToController_Request RemoteControlToController::CHALLENGE_FLAG;
const RemoteControlToController_Request RemoteControlToController::STOP_TIMEOUT;
const RemoteControlToController_Request RemoteControlToController::FAIL_BALLPLACEMENT;
const RemoteControlToController_Request RemoteControlToController::Request_MIN;
const RemoteControlToController_Request RemoteControlToController::Request_MAX;
const int RemoteControlToController::Request_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RemoteControlRequestType_descriptor() {
  protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::file_level_enum_descriptors[1];
}
bool RemoteControlRequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RemoteControlRegistration::InitAsDefaultInstance() {
  ::_RemoteControlRegistration_default_instance_._instance.get_mutable()->signature_ = const_cast< ::Signature*>(
      ::Signature::internal_default_instance());
}
void RemoteControlRegistration::clear_signature() {
  if (signature_ != NULL) signature_->Clear();
  clear_has_signature();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteControlRegistration::kTeamFieldNumber;
const int RemoteControlRegistration::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteControlRegistration::RemoteControlRegistration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::scc_info_RemoteControlRegistration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemoteControlRegistration)
}
RemoteControlRegistration::RemoteControlRegistration(const RemoteControlRegistration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signature()) {
    signature_ = new ::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  team_ = from.team_;
  // @@protoc_insertion_point(copy_constructor:RemoteControlRegistration)
}

void RemoteControlRegistration::SharedCtor() {
  ::memset(&signature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&signature_)) + sizeof(team_));
}

RemoteControlRegistration::~RemoteControlRegistration() {
  // @@protoc_insertion_point(destructor:RemoteControlRegistration)
  SharedDtor();
}

void RemoteControlRegistration::SharedDtor() {
  if (this != internal_default_instance()) delete signature_;
}

void RemoteControlRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RemoteControlRegistration::descriptor() {
  ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoteControlRegistration& RemoteControlRegistration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::scc_info_RemoteControlRegistration.base);
  return *internal_default_instance();
}


void RemoteControlRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteControlRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signature_ != NULL);
    signature_->Clear();
  }
  team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemoteControlRegistration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemoteControlRegistration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Team team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Signature signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemoteControlRegistration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemoteControlRegistration)
  return false;
#undef DO_
}

void RemoteControlRegistration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemoteControlRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  // optional .Signature signature = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemoteControlRegistration)
}

::google::protobuf::uint8* RemoteControlRegistration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RemoteControlRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Team team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  // optional .Signature signature = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_signature(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteControlRegistration)
  return target;
}

size_t RemoteControlRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteControlRegistration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Team team = 1;
  if (has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
  }
  // optional .Signature signature = 2;
  if (has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteControlRegistration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoteControlRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteControlRegistration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteControlRegistration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoteControlRegistration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoteControlRegistration)
    MergeFrom(*source);
  }
}

void RemoteControlRegistration::MergeFrom(const RemoteControlRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteControlRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_signature()->::Signature::MergeFrom(from.signature());
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteControlRegistration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoteControlRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteControlRegistration::CopyFrom(const RemoteControlRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteControlRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControlRegistration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void RemoteControlRegistration::Swap(RemoteControlRegistration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteControlRegistration::InternalSwap(RemoteControlRegistration* other) {
  using std::swap;
  swap(signature_, other->signature_);
  swap(team_, other->team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RemoteControlRegistration::GetMetadata() const {
  protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemoteControlToController::InitAsDefaultInstance() {
  ::_RemoteControlToController_default_instance_._instance.get_mutable()->signature_ = const_cast< ::Signature*>(
      ::Signature::internal_default_instance());
  ::_RemoteControlToController_default_instance_.request_ = 0;
  ::_RemoteControlToController_default_instance_.desired_keeper_ = 0;
  ::_RemoteControlToController_default_instance_.request_robot_substitution_ = false;
  ::_RemoteControlToController_default_instance_.request_timeout_ = false;
  ::_RemoteControlToController_default_instance_.request_emergency_stop_ = false;
}
void RemoteControlToController::clear_signature() {
  if (signature_ != NULL) signature_->Clear();
  clear_has_signature();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteControlToController::kSignatureFieldNumber;
const int RemoteControlToController::kRequestFieldNumber;
const int RemoteControlToController::kDesiredKeeperFieldNumber;
const int RemoteControlToController::kRequestRobotSubstitutionFieldNumber;
const int RemoteControlToController::kRequestTimeoutFieldNumber;
const int RemoteControlToController::kRequestEmergencyStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteControlToController::RemoteControlToController()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::scc_info_RemoteControlToController.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemoteControlToController)
}
RemoteControlToController::RemoteControlToController(const RemoteControlToController& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signature()) {
    signature_ = new ::Signature(*from.signature_);
  } else {
    signature_ = NULL;
  }
  clear_has_msg();
  switch (from.msg_case()) {
    case kRequest: {
      set_request(from.request());
      break;
    }
    case kDesiredKeeper: {
      set_desired_keeper(from.desired_keeper());
      break;
    }
    case kRequestRobotSubstitution: {
      set_request_robot_substitution(from.request_robot_substitution());
      break;
    }
    case kRequestTimeout: {
      set_request_timeout(from.request_timeout());
      break;
    }
    case kRequestEmergencyStop: {
      set_request_emergency_stop(from.request_emergency_stop());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:RemoteControlToController)
}

void RemoteControlToController::SharedCtor() {
  signature_ = NULL;
  clear_has_msg();
}

RemoteControlToController::~RemoteControlToController() {
  // @@protoc_insertion_point(destructor:RemoteControlToController)
  SharedDtor();
}

void RemoteControlToController::SharedDtor() {
  if (this != internal_default_instance()) delete signature_;
  if (has_msg()) {
    clear_msg();
  }
}

void RemoteControlToController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RemoteControlToController::descriptor() {
  ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoteControlToController& RemoteControlToController::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::scc_info_RemoteControlToController.base);
  return *internal_default_instance();
}


void RemoteControlToController::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:RemoteControlToController)
  switch (msg_case()) {
    case kRequest: {
      // No need to clear
      break;
    }
    case kDesiredKeeper: {
      // No need to clear
      break;
    }
    case kRequestRobotSubstitution: {
      // No need to clear
      break;
    }
    case kRequestTimeout: {
      // No need to clear
      break;
    }
    case kRequestEmergencyStop: {
      // No need to clear
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void RemoteControlToController::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteControlToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signature_ != NULL);
    signature_->Clear();
  }
  clear_msg();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemoteControlToController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemoteControlToController)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Signature signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RemoteControlToController.Request request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RemoteControlToController_Request_IsValid(value)) {
            set_request(static_cast< ::RemoteControlToController_Request >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 desired_keeper = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_.desired_keeper_)));
          set_has_desired_keeper();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool request_robot_substitution = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msg_.request_robot_substitution_)));
          set_has_request_robot_substitution();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool request_timeout = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msg_.request_timeout_)));
          set_has_request_timeout();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool request_emergency_stop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          clear_msg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msg_.request_emergency_stop_)));
          set_has_request_emergency_stop();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemoteControlToController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemoteControlToController)
  return false;
#undef DO_
}

void RemoteControlToController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemoteControlToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_signature(), output);
  }

  switch (msg_case()) {
    case kRequest:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        2, this->request(), output);
      break;
    case kDesiredKeeper:
      ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->desired_keeper(), output);
      break;
    case kRequestRobotSubstitution:
      ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->request_robot_substitution(), output);
      break;
    case kRequestTimeout:
      ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->request_timeout(), output);
      break;
    case kRequestEmergencyStop:
      ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->request_emergency_stop(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemoteControlToController)
}

::google::protobuf::uint8* RemoteControlToController::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RemoteControlToController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Signature signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_signature(), deterministic, target);
  }

  switch (msg_case()) {
    case kRequest:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        2, this->request(), target);
      break;
    case kDesiredKeeper:
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->desired_keeper(), target);
      break;
    case kRequestRobotSubstitution:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->request_robot_substitution(), target);
      break;
    case kRequestTimeout:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->request_timeout(), target);
      break;
    case kRequestEmergencyStop:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->request_emergency_stop(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteControlToController)
  return target;
}

size_t RemoteControlToController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteControlToController)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .Signature signature = 1;
  if (has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  switch (msg_case()) {
    // optional .RemoteControlToController.Request request = 2;
    case kRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request());
      break;
    }
    // optional int32 desired_keeper = 3;
    case kDesiredKeeper: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desired_keeper());
      break;
    }
    // optional bool request_robot_substitution = 4;
    case kRequestRobotSubstitution: {
      total_size += 1 + 1;
      break;
    }
    // optional bool request_timeout = 5;
    case kRequestTimeout: {
      total_size += 1 + 1;
      break;
    }
    // optional bool request_emergency_stop = 6;
    case kRequestEmergencyStop: {
      total_size += 1 + 1;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteControlToController::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoteControlToController)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteControlToController* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteControlToController>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoteControlToController)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoteControlToController)
    MergeFrom(*source);
  }
}

void RemoteControlToController::MergeFrom(const RemoteControlToController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteControlToController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signature()) {
    mutable_signature()->::Signature::MergeFrom(from.signature());
  }
  switch (from.msg_case()) {
    case kRequest: {
      set_request(from.request());
      break;
    }
    case kDesiredKeeper: {
      set_desired_keeper(from.desired_keeper());
      break;
    }
    case kRequestRobotSubstitution: {
      set_request_robot_substitution(from.request_robot_substitution());
      break;
    }
    case kRequestTimeout: {
      set_request_timeout(from.request_timeout());
      break;
    }
    case kRequestEmergencyStop: {
      set_request_emergency_stop(from.request_emergency_stop());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void RemoteControlToController::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoteControlToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteControlToController::CopyFrom(const RemoteControlToController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteControlToController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControlToController::IsInitialized() const {
  if (has_signature()) {
    if (!this->signature_->IsInitialized()) return false;
  }
  return true;
}

void RemoteControlToController::Swap(RemoteControlToController* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteControlToController::InternalSwap(RemoteControlToController* other) {
  using std::swap;
  swap(signature_, other->signature_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RemoteControlToController::GetMetadata() const {
  protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControllerToRemoteControl::InitAsDefaultInstance() {
  ::_ControllerToRemoteControl_default_instance_._instance.get_mutable()->controller_reply_ = const_cast< ::ControllerReply*>(
      ::ControllerReply::internal_default_instance());
  ::_ControllerToRemoteControl_default_instance_._instance.get_mutable()->state_ = const_cast< ::RemoteControlTeamState*>(
      ::RemoteControlTeamState::internal_default_instance());
}
void ControllerToRemoteControl::clear_controller_reply() {
  if (controller_reply_ != NULL) controller_reply_->Clear();
  clear_has_controller_reply();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerToRemoteControl::kControllerReplyFieldNumber;
const int ControllerToRemoteControl::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerToRemoteControl::ControllerToRemoteControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::scc_info_ControllerToRemoteControl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControllerToRemoteControl)
}
ControllerToRemoteControl::ControllerToRemoteControl(const ControllerToRemoteControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_controller_reply()) {
    controller_reply_ = new ::ControllerReply(*from.controller_reply_);
  } else {
    controller_reply_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::RemoteControlTeamState(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ControllerToRemoteControl)
}

void ControllerToRemoteControl::SharedCtor() {
  ::memset(&controller_reply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&controller_reply_)) + sizeof(state_));
}

ControllerToRemoteControl::~ControllerToRemoteControl() {
  // @@protoc_insertion_point(destructor:ControllerToRemoteControl)
  SharedDtor();
}

void ControllerToRemoteControl::SharedDtor() {
  if (this != internal_default_instance()) delete controller_reply_;
  if (this != internal_default_instance()) delete state_;
}

void ControllerToRemoteControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControllerToRemoteControl::descriptor() {
  ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControllerToRemoteControl& ControllerToRemoteControl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::scc_info_ControllerToRemoteControl.base);
  return *internal_default_instance();
}


void ControllerToRemoteControl::Clear() {
// @@protoc_insertion_point(message_clear_start:ControllerToRemoteControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(controller_reply_ != NULL);
      controller_reply_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(state_ != NULL);
      state_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControllerToRemoteControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControllerToRemoteControl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ControllerReply controller_reply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controller_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RemoteControlTeamState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControllerToRemoteControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControllerToRemoteControl)
  return false;
#undef DO_
}

void ControllerToRemoteControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControllerToRemoteControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ControllerReply controller_reply = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_controller_reply(), output);
  }

  // optional .RemoteControlTeamState state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ControllerToRemoteControl)
}

::google::protobuf::uint8* ControllerToRemoteControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControllerToRemoteControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ControllerReply controller_reply = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_controller_reply(), deterministic, target);
  }

  // optional .RemoteControlTeamState state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControllerToRemoteControl)
  return target;
}

size_t ControllerToRemoteControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControllerToRemoteControl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .ControllerReply controller_reply = 1;
    if (has_controller_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *controller_reply_);
    }

    // optional .RemoteControlTeamState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerToRemoteControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControllerToRemoteControl)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerToRemoteControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerToRemoteControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControllerToRemoteControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControllerToRemoteControl)
    MergeFrom(*source);
  }
}

void ControllerToRemoteControl::MergeFrom(const ControllerToRemoteControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControllerToRemoteControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_controller_reply()->::ControllerReply::MergeFrom(from.controller_reply());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_state()->::RemoteControlTeamState::MergeFrom(from.state());
    }
  }
}

void ControllerToRemoteControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControllerToRemoteControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerToRemoteControl::CopyFrom(const ControllerToRemoteControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControllerToRemoteControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerToRemoteControl::IsInitialized() const {
  return true;
}

void ControllerToRemoteControl::Swap(ControllerToRemoteControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerToRemoteControl::InternalSwap(ControllerToRemoteControl* other) {
  using std::swap;
  swap(controller_reply_, other->controller_reply_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerToRemoteControl::GetMetadata() const {
  protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RemoteControlTeamState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteControlTeamState::kTeamFieldNumber;
const int RemoteControlTeamState::kAvailableRequestsFieldNumber;
const int RemoteControlTeamState::kActiveRequestsFieldNumber;
const int RemoteControlTeamState::kKeeperIdFieldNumber;
const int RemoteControlTeamState::kEmergencyStopInFieldNumber;
const int RemoteControlTeamState::kTimeoutsLeftFieldNumber;
const int RemoteControlTeamState::kTimeoutTimeLeftFieldNumber;
const int RemoteControlTeamState::kChallengeFlagsLeftFieldNumber;
const int RemoteControlTeamState::kMaxRobotsFieldNumber;
const int RemoteControlTeamState::kRobotsOnFieldFieldNumber;
const int RemoteControlTeamState::kYellowCardsDueFieldNumber;
const int RemoteControlTeamState::kCanSubstituteRobotFieldNumber;
const int RemoteControlTeamState::kBotSubstitutionsLeftFieldNumber;
const int RemoteControlTeamState::kBotSubstitutionTimeLeftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteControlTeamState::RemoteControlTeamState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::scc_info_RemoteControlTeamState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemoteControlTeamState)
}
RemoteControlTeamState::RemoteControlTeamState(const RemoteControlTeamState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      available_requests_(from.available_requests_),
      active_requests_(from.active_requests_),
      yellow_cards_due_(from.yellow_cards_due_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&keeper_id_, &from.keeper_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bot_substitution_time_left_) -
    reinterpret_cast<char*>(&keeper_id_)) + sizeof(bot_substitution_time_left_));
  // @@protoc_insertion_point(copy_constructor:RemoteControlTeamState)
}

void RemoteControlTeamState::SharedCtor() {
  ::memset(&keeper_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bot_substitution_time_left_) -
      reinterpret_cast<char*>(&keeper_id_)) + sizeof(bot_substitution_time_left_));
}

RemoteControlTeamState::~RemoteControlTeamState() {
  // @@protoc_insertion_point(destructor:RemoteControlTeamState)
  SharedDtor();
}

void RemoteControlTeamState::SharedDtor() {
}

void RemoteControlTeamState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RemoteControlTeamState::descriptor() {
  ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoteControlTeamState& RemoteControlTeamState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::scc_info_RemoteControlTeamState.base);
  return *internal_default_instance();
}


void RemoteControlTeamState::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteControlTeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_requests_.Clear();
  active_requests_.Clear();
  yellow_cards_due_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&keeper_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_substitute_robot_) -
        reinterpret_cast<char*>(&keeper_id_)) + sizeof(can_substitute_robot_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bot_substitution_time_left_) -
        reinterpret_cast<char*>(&team_)) + sizeof(bot_substitution_time_left_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemoteControlTeamState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemoteControlTeamState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RemoteControlRequestType available_requests = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RemoteControlRequestType_IsValid(value)) {
            add_available_requests(static_cast< ::RemoteControlRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::RemoteControlRequestType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_available_requests())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .RemoteControlRequestType active_requests = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RemoteControlRequestType_IsValid(value)) {
            add_active_requests(static_cast< ::RemoteControlRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::RemoteControlRequestType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_active_requests())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 keeper_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_keeper_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keeper_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float emergency_stop_in = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_emergency_stop_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &emergency_stop_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timeouts_left = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_timeouts_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeouts_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 challenge_flags_left = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_challenge_flags_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_flags_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_robots = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_max_robots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_robots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float yellow_cards_due = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69u, input, this->mutable_yellow_cards_due())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_yellow_cards_due())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 robots_on_field = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_robots_on_field();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robots_on_field_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float timeout_time_left = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_timeout_time_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeout_time_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_substitute_robot = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_can_substitute_robot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_substitute_robot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Team team = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bot_substitutions_left = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_bot_substitutions_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_substitutions_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bot_substitution_time_left = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_bot_substitution_time_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bot_substitution_time_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemoteControlTeamState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemoteControlTeamState)
  return false;
#undef DO_
}

void RemoteControlTeamState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemoteControlTeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RemoteControlRequestType available_requests = 1;
  for (int i = 0, n = this->available_requests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->available_requests(i), output);
  }

  // repeated .RemoteControlRequestType active_requests = 2;
  for (int i = 0, n = this->active_requests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->active_requests(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 keeper_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->keeper_id(), output);
  }

  // optional float emergency_stop_in = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->emergency_stop_in(), output);
  }

  // optional int32 timeouts_left = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timeouts_left(), output);
  }

  // optional int32 challenge_flags_left = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->challenge_flags_left(), output);
  }

  // optional int32 max_robots = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_robots(), output);
  }

  // repeated float yellow_cards_due = 8;
  for (int i = 0, n = this->yellow_cards_due_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->yellow_cards_due(i), output);
  }

  // optional int32 robots_on_field = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->robots_on_field(), output);
  }

  // optional float timeout_time_left = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->timeout_time_left(), output);
  }

  // optional bool can_substitute_robot = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->can_substitute_robot(), output);
  }

  // optional .Team team = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->team(), output);
  }

  // optional uint32 bot_substitutions_left = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->bot_substitutions_left(), output);
  }

  // optional float bot_substitution_time_left = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->bot_substitution_time_left(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemoteControlTeamState)
}

::google::protobuf::uint8* RemoteControlTeamState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RemoteControlTeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RemoteControlRequestType available_requests = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->available_requests_, target);

  // repeated .RemoteControlRequestType active_requests = 2;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    2, this->active_requests_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 keeper_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->keeper_id(), target);
  }

  // optional float emergency_stop_in = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->emergency_stop_in(), target);
  }

  // optional int32 timeouts_left = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timeouts_left(), target);
  }

  // optional int32 challenge_flags_left = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->challenge_flags_left(), target);
  }

  // optional int32 max_robots = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_robots(), target);
  }

  // repeated float yellow_cards_due = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(8, this->yellow_cards_due_, target);

  // optional int32 robots_on_field = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->robots_on_field(), target);
  }

  // optional float timeout_time_left = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->timeout_time_left(), target);
  }

  // optional bool can_substitute_robot = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->can_substitute_robot(), target);
  }

  // optional .Team team = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->team(), target);
  }

  // optional uint32 bot_substitutions_left = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->bot_substitutions_left(), target);
  }

  // optional float bot_substitution_time_left = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->bot_substitution_time_left(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteControlTeamState)
  return target;
}

size_t RemoteControlTeamState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteControlTeamState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .RemoteControlRequestType available_requests = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->available_requests_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->available_requests(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .RemoteControlRequestType active_requests = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->active_requests_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->active_requests(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated float yellow_cards_due = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->yellow_cards_due_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->yellow_cards_due_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 keeper_id = 3;
    if (has_keeper_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keeper_id());
    }

    // optional float emergency_stop_in = 4;
    if (has_emergency_stop_in()) {
      total_size += 1 + 4;
    }

    // optional int32 timeouts_left = 5;
    if (has_timeouts_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeouts_left());
    }

    // optional int32 challenge_flags_left = 6;
    if (has_challenge_flags_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_flags_left());
    }

    // optional int32 max_robots = 7;
    if (has_max_robots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_robots());
    }

    // optional int32 robots_on_field = 9;
    if (has_robots_on_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robots_on_field());
    }

    // optional float timeout_time_left = 10;
    if (has_timeout_time_left()) {
      total_size += 1 + 4;
    }

    // optional bool can_substitute_robot = 11;
    if (has_can_substitute_robot()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .Team team = 12;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional uint32 bot_substitutions_left = 13;
    if (has_bot_substitutions_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_substitutions_left());
    }

    // optional float bot_substitution_time_left = 14;
    if (has_bot_substitution_time_left()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteControlTeamState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoteControlTeamState)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteControlTeamState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoteControlTeamState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoteControlTeamState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoteControlTeamState)
    MergeFrom(*source);
  }
}

void RemoteControlTeamState::MergeFrom(const RemoteControlTeamState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteControlTeamState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  available_requests_.MergeFrom(from.available_requests_);
  active_requests_.MergeFrom(from.active_requests_);
  yellow_cards_due_.MergeFrom(from.yellow_cards_due_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      keeper_id_ = from.keeper_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      emergency_stop_in_ = from.emergency_stop_in_;
    }
    if (cached_has_bits & 0x00000004u) {
      timeouts_left_ = from.timeouts_left_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_flags_left_ = from.challenge_flags_left_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_robots_ = from.max_robots_;
    }
    if (cached_has_bits & 0x00000020u) {
      robots_on_field_ = from.robots_on_field_;
    }
    if (cached_has_bits & 0x00000040u) {
      timeout_time_left_ = from.timeout_time_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_substitute_robot_ = from.can_substitute_robot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000200u) {
      bot_substitutions_left_ = from.bot_substitutions_left_;
    }
    if (cached_has_bits & 0x00000400u) {
      bot_substitution_time_left_ = from.bot_substitution_time_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteControlTeamState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoteControlTeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteControlTeamState::CopyFrom(const RemoteControlTeamState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteControlTeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteControlTeamState::IsInitialized() const {
  return true;
}

void RemoteControlTeamState::Swap(RemoteControlTeamState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteControlTeamState::InternalSwap(RemoteControlTeamState* other) {
  using std::swap;
  available_requests_.InternalSwap(&other->available_requests_);
  active_requests_.InternalSwap(&other->active_requests_);
  yellow_cards_due_.InternalSwap(&other->yellow_cards_due_);
  swap(keeper_id_, other->keeper_id_);
  swap(emergency_stop_in_, other->emergency_stop_in_);
  swap(timeouts_left_, other->timeouts_left_);
  swap(challenge_flags_left_, other->challenge_flags_left_);
  swap(max_robots_, other->max_robots_);
  swap(robots_on_field_, other->robots_on_field_);
  swap(timeout_time_left_, other->timeout_time_left_);
  swap(can_substitute_robot_, other->can_substitute_robot_);
  swap(team_, other->team_);
  swap(bot_substitutions_left_, other->bot_substitutions_left_);
  swap(bot_substitution_time_left_, other->bot_substitution_time_left_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RemoteControlTeamState::GetMetadata() const {
  protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5frcon_5fremotecontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RemoteControlRegistration* Arena::CreateMaybeMessage< ::RemoteControlRegistration >(Arena* arena) {
  return Arena::CreateInternal< ::RemoteControlRegistration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RemoteControlToController* Arena::CreateMaybeMessage< ::RemoteControlToController >(Arena* arena) {
  return Arena::CreateInternal< ::RemoteControlToController >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ControllerToRemoteControl* Arena::CreateMaybeMessage< ::ControllerToRemoteControl >(Arena* arena) {
  return Arena::CreateInternal< ::ControllerToRemoteControl >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RemoteControlTeamState* Arena::CreateMaybeMessage< ::RemoteControlTeamState >(Arena* arena) {
  return Arena::CreateInternal< ::RemoteControlTeamState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
