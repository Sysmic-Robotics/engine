// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_change.proto

#include "ssl_gc_change.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BoolValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Int32Value;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UInt32Value;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace protobuf_ssl_5fgc_5fchange_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Change_AcceptProposalGroup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Change_ChangeStage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Change_Revert;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Change_SetStatusMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Change_SwitchColors;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Change_YellowCardOver;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<16> scc_info_Change;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Change_AddGameEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Change_AddPassiveGameEvent;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Change_AddProposal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Change_AddRedCard;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Change_AddYellowCard;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Change_NewCommand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Change_NewGameState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Change_SetBallPlacementPos;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Change_UpdateConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fchange_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_Change_UpdateTeamState;
}  // namespace protobuf_ssl_5fgc_5fchange_2eproto
namespace protobuf_ssl_5fgc_5fgame_5fevent_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fgame_5fevent_2eproto ::google::protobuf::internal::SCCInfo<40> scc_info_GameEvent;
}  // namespace protobuf_ssl_5fgc_5fgame_5fevent_2eproto
namespace protobuf_ssl_5fgc_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector2;
}  // namespace protobuf_ssl_5fgc_5fgeometry_2eproto
namespace protobuf_ssl_5fgc_5fstate_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Command;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RedCard;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Foul;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Proposal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_YellowCard;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_State;
}  // namespace protobuf_ssl_5fgc_5fstate_2eproto
class StateChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StateChange>
      _instance;
} _StateChange_default_instance_;
class Change_NewCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_NewCommand>
      _instance;
} _Change_NewCommand_default_instance_;
class Change_ChangeStageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_ChangeStage>
      _instance;
} _Change_ChangeStage_default_instance_;
class Change_SetBallPlacementPosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_SetBallPlacementPos>
      _instance;
} _Change_SetBallPlacementPos_default_instance_;
class Change_AddYellowCardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_AddYellowCard>
      _instance;
} _Change_AddYellowCard_default_instance_;
class Change_AddRedCardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_AddRedCard>
      _instance;
} _Change_AddRedCard_default_instance_;
class Change_YellowCardOverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_YellowCardOver>
      _instance;
} _Change_YellowCardOver_default_instance_;
class Change_AddGameEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_AddGameEvent>
      _instance;
} _Change_AddGameEvent_default_instance_;
class Change_AddPassiveGameEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_AddPassiveGameEvent>
      _instance;
} _Change_AddPassiveGameEvent_default_instance_;
class Change_AddProposalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_AddProposal>
      _instance;
} _Change_AddProposal_default_instance_;
class Change_AcceptProposalGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_AcceptProposalGroup>
      _instance;
} _Change_AcceptProposalGroup_default_instance_;
class Change_UpdateConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_UpdateConfig>
      _instance;
} _Change_UpdateConfig_default_instance_;
class Change_UpdateTeamStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_UpdateTeamState>
      _instance;
} _Change_UpdateTeamState_default_instance_;
class Change_SwitchColorsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_SwitchColors>
      _instance;
} _Change_SwitchColors_default_instance_;
class Change_RevertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_Revert>
      _instance;
} _Change_Revert_default_instance_;
class Change_NewGameStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_NewGameState>
      _instance;
} _Change_NewGameState_default_instance_;
class Change_SetStatusMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change_SetStatusMessage>
      _instance;
} _Change_SetStatusMessage_default_instance_;
class ChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Change>
      _instance;
  const ::Change_NewCommand* new_command_change_;
  const ::Change_ChangeStage* change_stage_change_;
  const ::Change_SetBallPlacementPos* set_ball_placement_pos_change_;
  const ::Change_AddYellowCard* add_yellow_card_change_;
  const ::Change_AddRedCard* add_red_card_change_;
  const ::Change_YellowCardOver* yellow_card_over_change_;
  const ::Change_AddGameEvent* add_game_event_change_;
  const ::Change_AddPassiveGameEvent* add_passive_game_event_change_;
  const ::Change_AddProposal* add_proposal_change_;
  const ::Change_UpdateConfig* update_config_change_;
  const ::Change_UpdateTeamState* update_team_state_change_;
  const ::Change_SwitchColors* switch_colors_change_;
  const ::Change_Revert* revert_change_;
  const ::Change_NewGameState* new_game_state_change_;
  const ::Change_AcceptProposalGroup* accept_proposal_group_change_;
  const ::Change_SetStatusMessage* set_status_message_change_;
} _Change_default_instance_;
namespace protobuf_ssl_5fgc_5fchange_2eproto {
static void InitDefaultsStateChange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StateChange_default_instance_;
    new (ptr) ::StateChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StateChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_StateChange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsStateChange}, {
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_State.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsChange_NewCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_NewCommand_default_instance_;
    new (ptr) ::Change_NewCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_NewCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Change_NewCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChange_NewCommand}, {
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_Command.base,}};

static void InitDefaultsChange_ChangeStage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_ChangeStage_default_instance_;
    new (ptr) ::Change_ChangeStage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_ChangeStage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Change_ChangeStage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChange_ChangeStage}, {}};

static void InitDefaultsChange_SetBallPlacementPos() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_SetBallPlacementPos_default_instance_;
    new (ptr) ::Change_SetBallPlacementPos();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_SetBallPlacementPos::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Change_SetBallPlacementPos =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChange_SetBallPlacementPos}, {
      &protobuf_ssl_5fgc_5fgeometry_2eproto::scc_info_Vector2.base,}};

static void InitDefaultsChange_AddYellowCard() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_AddYellowCard_default_instance_;
    new (ptr) ::Change_AddYellowCard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_AddYellowCard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Change_AddYellowCard =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChange_AddYellowCard}, {
      &protobuf_ssl_5fgc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,}};

static void InitDefaultsChange_AddRedCard() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_AddRedCard_default_instance_;
    new (ptr) ::Change_AddRedCard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_AddRedCard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Change_AddRedCard =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChange_AddRedCard}, {
      &protobuf_ssl_5fgc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,}};

static void InitDefaultsChange_YellowCardOver() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_YellowCardOver_default_instance_;
    new (ptr) ::Change_YellowCardOver();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_YellowCardOver::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Change_YellowCardOver =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChange_YellowCardOver}, {}};

static void InitDefaultsChange_AddGameEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_AddGameEvent_default_instance_;
    new (ptr) ::Change_AddGameEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_AddGameEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Change_AddGameEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChange_AddGameEvent}, {
      &protobuf_ssl_5fgc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,}};

static void InitDefaultsChange_AddPassiveGameEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_AddPassiveGameEvent_default_instance_;
    new (ptr) ::Change_AddPassiveGameEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_AddPassiveGameEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Change_AddPassiveGameEvent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChange_AddPassiveGameEvent}, {
      &protobuf_ssl_5fgc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,}};

static void InitDefaultsChange_AddProposal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_AddProposal_default_instance_;
    new (ptr) ::Change_AddProposal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_AddProposal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Change_AddProposal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChange_AddProposal}, {
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_Proposal.base,}};

static void InitDefaultsChange_AcceptProposalGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_AcceptProposalGroup_default_instance_;
    new (ptr) ::Change_AcceptProposalGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_AcceptProposalGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Change_AcceptProposalGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChange_AcceptProposalGroup}, {}};

static void InitDefaultsChange_UpdateConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_UpdateConfig_default_instance_;
    new (ptr) ::Change_UpdateConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_UpdateConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Change_UpdateConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChange_UpdateConfig}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,}};

static void InitDefaultsChange_UpdateTeamState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_UpdateTeamState_default_instance_;
    new (ptr) ::Change_UpdateTeamState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_UpdateTeamState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_Change_UpdateTeamState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsChange_UpdateTeamState}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_Int32Value.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_BoolValue.base,
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_YellowCard.base,
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_RedCard.base,
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_Foul.base,
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_UInt32Value.base,}};

static void InitDefaultsChange_SwitchColors() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_SwitchColors_default_instance_;
    new (ptr) ::Change_SwitchColors();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_SwitchColors::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Change_SwitchColors =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChange_SwitchColors}, {}};

static void InitDefaultsChange_Revert() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_Revert_default_instance_;
    new (ptr) ::Change_Revert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_Revert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Change_Revert =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChange_Revert}, {}};

static void InitDefaultsChange_NewGameState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_NewGameState_default_instance_;
    new (ptr) ::Change_NewGameState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_NewGameState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Change_NewGameState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChange_NewGameState}, {
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_GameState.base,}};

static void InitDefaultsChange_SetStatusMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_SetStatusMessage_default_instance_;
    new (ptr) ::Change_SetStatusMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change_SetStatusMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Change_SetStatusMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChange_SetStatusMessage}, {}};

static void InitDefaultsChange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Change_default_instance_;
    new (ptr) ::Change();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Change::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<16> scc_info_Change =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 16, InitDefaultsChange}, {
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_NewCommand.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_ChangeStage.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_SetBallPlacementPos.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddYellowCard.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddRedCard.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_YellowCardOver.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddGameEvent.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddPassiveGameEvent.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddProposal.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_UpdateConfig.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_UpdateTeamState.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_SwitchColors.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_Revert.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_NewGameState.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AcceptProposalGroup.base,
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_SetStatusMessage.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_StateChange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_NewCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_ChangeStage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_SetBallPlacementPos.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_AddYellowCard.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_AddRedCard.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_YellowCardOver.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_AddGameEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_AddPassiveGameEvent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_AddProposal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_AcceptProposalGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_UpdateConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_UpdateTeamState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_SwitchColors.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_Revert.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_NewGameState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change_SetStatusMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Change.base);
}

::google::protobuf::Metadata file_level_metadata[18];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StateChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StateChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StateChange, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StateChange, state_pre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StateChange, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StateChange, change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::StateChange, timestamp_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_NewCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_NewCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_NewCommand, command_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_ChangeStage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_ChangeStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_ChangeStage, new_stage_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_SetBallPlacementPos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_SetBallPlacementPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_SetBallPlacementPos, pos_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddYellowCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddYellowCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddYellowCard, for_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddYellowCard, caused_by_game_event_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddRedCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddRedCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddRedCard, for_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddRedCard, caused_by_game_event_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_YellowCardOver, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_YellowCardOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_YellowCardOver, for_team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddGameEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddGameEvent, game_event_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddPassiveGameEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddPassiveGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddPassiveGameEvent, game_event_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddProposal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddProposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AddProposal, proposal_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AcceptProposalGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AcceptProposalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AcceptProposalGroup, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_AcceptProposalGroup, accepted_by_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateConfig, division_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateConfig, first_kickoff_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateConfig, match_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateConfig, max_robots_per_team_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, for_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, goals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, goalkeeper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, timeouts_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, timeout_time_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, on_positive_half_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, ball_placement_failures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, can_place_ball_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, challenge_flags_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, bot_substitutions_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, requests_bot_substitution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, requests_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, requests_challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, requests_emergency_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, yellow_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, red_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, foul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, remove_yellow_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, remove_red_card_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, remove_foul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_UpdateTeamState, hull_color_),
  20,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  18,
  19,
  8,
  14,
  15,
  16,
  17,
  9,
  10,
  11,
  12,
  13,
  21,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_SwitchColors, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_SwitchColors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_Revert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_Revert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_Revert, change_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_NewGameState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_NewGameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_NewGameState, game_state_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_SetStatusMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_SetStatusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change_SetStatusMessage, status_message_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change, revertible_),
  offsetof(::ChangeDefaultTypeInternal, new_command_change_),
  offsetof(::ChangeDefaultTypeInternal, change_stage_change_),
  offsetof(::ChangeDefaultTypeInternal, set_ball_placement_pos_change_),
  offsetof(::ChangeDefaultTypeInternal, add_yellow_card_change_),
  offsetof(::ChangeDefaultTypeInternal, add_red_card_change_),
  offsetof(::ChangeDefaultTypeInternal, yellow_card_over_change_),
  offsetof(::ChangeDefaultTypeInternal, add_game_event_change_),
  offsetof(::ChangeDefaultTypeInternal, add_passive_game_event_change_),
  offsetof(::ChangeDefaultTypeInternal, add_proposal_change_),
  offsetof(::ChangeDefaultTypeInternal, update_config_change_),
  offsetof(::ChangeDefaultTypeInternal, update_team_state_change_),
  offsetof(::ChangeDefaultTypeInternal, switch_colors_change_),
  offsetof(::ChangeDefaultTypeInternal, revert_change_),
  offsetof(::ChangeDefaultTypeInternal, new_game_state_change_),
  offsetof(::ChangeDefaultTypeInternal, accept_proposal_group_change_),
  offsetof(::ChangeDefaultTypeInternal, set_status_message_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Change, change_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::StateChange)},
  { 15, 21, sizeof(::Change_NewCommand)},
  { 22, 28, sizeof(::Change_ChangeStage)},
  { 29, 35, sizeof(::Change_SetBallPlacementPos)},
  { 36, 43, sizeof(::Change_AddYellowCard)},
  { 45, 52, sizeof(::Change_AddRedCard)},
  { 54, 60, sizeof(::Change_YellowCardOver)},
  { 61, 67, sizeof(::Change_AddGameEvent)},
  { 68, 74, sizeof(::Change_AddPassiveGameEvent)},
  { 75, 81, sizeof(::Change_AddProposal)},
  { 82, 89, sizeof(::Change_AcceptProposalGroup)},
  { 91, 100, sizeof(::Change_UpdateConfig)},
  { 104, 131, sizeof(::Change_UpdateTeamState)},
  { 153, 158, sizeof(::Change_SwitchColors)},
  { 158, 164, sizeof(::Change_Revert)},
  { 165, 171, sizeof(::Change_NewGameState)},
  { 172, 178, sizeof(::Change_SetStatusMessage)},
  { 179, 203, sizeof(::Change)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_StateChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_NewCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_ChangeStage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_SetBallPlacementPos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_AddYellowCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_AddRedCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_YellowCardOver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_AddGameEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_AddPassiveGameEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_AddProposal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_AcceptProposalGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_UpdateConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_UpdateTeamState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_SwitchColors_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_Revert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_NewGameState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_SetStatusMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Change_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ssl_gc_change.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023ssl_gc_change.proto\032\022ssl_gc_state.prot"
      "o\032\023ssl_gc_common.proto\032\025ssl_gc_geometry."
      "proto\032\027ssl_gc_game_event.proto\032\034ssl_gc_r"
      "eferee_message.proto\032\037google/protobuf/ti"
      "mestamp.proto\032\036google/protobuf/wrappers."
      "proto\"\223\001\n\013StateChange\022\n\n\002id\030\001 \001(\005\022\031\n\tsta"
      "te_pre\030\002 \001(\0132\006.State\022\025\n\005state\030\003 \001(\0132\006.St"
      "ate\022\027\n\006change\030\004 \001(\0132\007.Change\022-\n\ttimestam"
      "p\030\005 \001(\0132\032.google.protobuf.Timestamp\"\364\026\n\006"
      "Change\022\016\n\006origin\030\001 \001(\t\022\022\n\nrevertible\030\020 \001"
      "(\010\0220\n\022new_command_change\030\002 \001(\0132\022.Change."
      "NewCommandH\000\0222\n\023change_stage_change\030\003 \001("
      "\0132\023.Change.ChangeStageH\000\022D\n\035set_ball_pla"
      "cement_pos_change\030\004 \001(\0132\033.Change.SetBall"
      "PlacementPosH\000\0227\n\026add_yellow_card_change"
      "\030\005 \001(\0132\025.Change.AddYellowCardH\000\0221\n\023add_r"
      "ed_card_change\030\006 \001(\0132\022.Change.AddRedCard"
      "H\000\0229\n\027yellow_card_over_change\030\007 \001(\0132\026.Ch"
      "ange.YellowCardOverH\000\0225\n\025add_game_event_"
      "change\030\010 \001(\0132\024.Change.AddGameEventH\000\022D\n\035"
      "add_passive_game_event_change\030\023 \001(\0132\033.Ch"
      "ange.AddPassiveGameEventH\000\0222\n\023add_propos"
      "al_change\030\t \001(\0132\023.Change.AddProposalH\000\0224"
      "\n\024update_config_change\030\014 \001(\0132\024.Change.Up"
      "dateConfigH\000\022;\n\030update_team_state_change"
      "\030\r \001(\0132\027.Change.UpdateTeamStateH\000\0224\n\024swi"
      "tch_colors_change\030\016 \001(\0132\024.Change.SwitchC"
      "olorsH\000\022\'\n\rrevert_change\030\017 \001(\0132\016.Change."
      "RevertH\000\0225\n\025new_game_state_change\030\021 \001(\0132"
      "\024.Change.NewGameStateH\000\022C\n\034accept_propos"
      "al_group_change\030\022 \001(\0132\033.Change.AcceptPro"
      "posalGroupH\000\022=\n\031set_status_message_chang"
      "e\030\024 \001(\0132\030.Change.SetStatusMessageH\000\032\'\n\nN"
      "ewCommand\022\031\n\007command\030\001 \001(\0132\010.Command\0320\n\013"
      "ChangeStage\022!\n\tnew_stage\030\001 \001(\0162\016.Referee"
      ".Stage\032,\n\023SetBallPlacementPos\022\025\n\003pos\030\001 \001"
      "(\0132\010.Vector2\032R\n\rAddYellowCard\022\027\n\010for_tea"
      "m\030\001 \001(\0162\005.Team\022(\n\024caused_by_game_event\030\002"
      " \001(\0132\n.GameEvent\032O\n\nAddRedCard\022\027\n\010for_te"
      "am\030\001 \001(\0162\005.Team\022(\n\024caused_by_game_event\030"
      "\002 \001(\0132\n.GameEvent\032)\n\016YellowCardOver\022\027\n\010f"
      "or_team\030\001 \001(\0162\005.Team\032.\n\014AddGameEvent\022\036\n\n"
      "game_event\030\001 \001(\0132\n.GameEvent\0325\n\023AddPassi"
      "veGameEvent\022\036\n\ngame_event\030\001 \001(\0132\n.GameEv"
      "ent\032*\n\013AddProposal\022\033\n\010proposal\030\001 \001(\0132\t.P"
      "roposal\032<\n\023AcceptProposalGroup\022\020\n\010group_"
      "id\030\003 \001(\t\022\023\n\013accepted_by\030\002 \001(\t\032\256\001\n\014Update"
      "Config\022\033\n\010division\030\001 \001(\0162\t.Division\022!\n\022f"
      "irst_kickoff_team\030\002 \001(\0162\005.Team\022\036\n\nmatch_"
      "type\030\004 \001(\0162\n.MatchType\0228\n\023max_robots_per"
      "_team\030\005 \001(\0132\033.google.protobuf.Int32Value"
      "J\004\010\003\020\004\032\306\010\n\017UpdateTeamState\022\027\n\010for_team\030\001"
      " \001(\0162\005.Team\022/\n\tteam_name\030\002 \001(\0132\034.google."
      "protobuf.StringValue\022*\n\005goals\030\003 \001(\0132\033.go"
      "ogle.protobuf.Int32Value\022/\n\ngoalkeeper\030\004"
      " \001(\0132\033.google.protobuf.Int32Value\0222\n\rtim"
      "eouts_left\030\005 \001(\0132\033.google.protobuf.Int32"
      "Value\0227\n\021timeout_time_left\030\006 \001(\0132\034.googl"
      "e.protobuf.StringValue\0224\n\020on_positive_ha"
      "lf\030\007 \001(\0132\032.google.protobuf.BoolValue\022<\n\027"
      "ball_placement_failures\030\010 \001(\0132\033.google.p"
      "rotobuf.Int32Value\0222\n\016can_place_ball\030\t \001"
      "(\0132\032.google.protobuf.BoolValue\0229\n\024challe"
      "nge_flags_left\030\025 \001(\0132\033.google.protobuf.I"
      "nt32Value\022;\n\026bot_substitutions_left\030\026 \001("
      "\0132\033.google.protobuf.Int32Value\022=\n\031reques"
      "ts_bot_substitution\030\n \001(\0132\032.google.proto"
      "buf.BoolValue\0224\n\020requests_timeout\030\021 \001(\0132"
      "\032.google.protobuf.BoolValue\0226\n\022requests_"
      "challenge\030\022 \001(\0132\032.google.protobuf.BoolVa"
      "lue\022;\n\027requests_emergency_stop\030\023 \001(\0132\032.g"
      "oogle.protobuf.BoolValue\022 \n\013yellow_card\030"
      "\024 \001(\0132\013.YellowCard\022\032\n\010red_card\030\014 \001(\0132\010.R"
      "edCard\022\023\n\004foul\030\r \001(\0132\005.Foul\0228\n\022remove_ye"
      "llow_card\030\016 \001(\0132\034.google.protobuf.UInt32"
      "Value\0225\n\017remove_red_card\030\017 \001(\0132\034.google."
      "protobuf.UInt32Value\0221\n\013remove_foul\030\020 \001("
      "\0132\034.google.protobuf.UInt32Value\022\036\n\nhull_"
      "color\030\027 \001(\0162\n.HullColor\032\016\n\014SwitchColors\032"
      "\033\n\006Revert\022\021\n\tchange_id\030\001 \001(\005\032.\n\014NewGameS"
      "tate\022\036\n\ngame_state\030\001 \001(\0132\n.GameState\032*\n\020"
      "SetStatusMessage\022\026\n\016status_message\030\001 \001(\t"
      "B\010\n\006change"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3290);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_gc_change.proto", &protobuf_RegisterTypes);
  ::protobuf_ssl_5fgc_5fstate_2eproto::AddDescriptors();
  ::protobuf_ssl_5fgc_5fcommon_2eproto::AddDescriptors();
  ::protobuf_ssl_5fgc_5fgeometry_2eproto::AddDescriptors();
  ::protobuf_ssl_5fgc_5fgame_5fevent_2eproto::AddDescriptors();
  ::protobuf_ssl_5fgc_5freferee_5fmessage_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ssl_5fgc_5fchange_2eproto

// ===================================================================

void StateChange::InitAsDefaultInstance() {
  ::_StateChange_default_instance_._instance.get_mutable()->state_pre_ = const_cast< ::State*>(
      ::State::internal_default_instance());
  ::_StateChange_default_instance_._instance.get_mutable()->state_ = const_cast< ::State*>(
      ::State::internal_default_instance());
  ::_StateChange_default_instance_._instance.get_mutable()->change_ = const_cast< ::Change*>(
      ::Change::internal_default_instance());
  ::_StateChange_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void StateChange::clear_state_pre() {
  if (state_pre_ != NULL) state_pre_->Clear();
  clear_has_state_pre();
}
void StateChange::clear_state() {
  if (state_ != NULL) state_->Clear();
  clear_has_state();
}
void StateChange::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->Clear();
  clear_has_timestamp();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateChange::kIdFieldNumber;
const int StateChange::kStatePreFieldNumber;
const int StateChange::kStateFieldNumber;
const int StateChange::kChangeFieldNumber;
const int StateChange::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateChange::StateChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_StateChange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:StateChange)
}
StateChange::StateChange(const StateChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state_pre()) {
    state_pre_ = new ::State(*from.state_pre_);
  } else {
    state_pre_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::State(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_change()) {
    change_ = new ::Change(*from.change_);
  } else {
    change_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:StateChange)
}

void StateChange::SharedCtor() {
  ::memset(&state_pre_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&state_pre_)) + sizeof(id_));
}

StateChange::~StateChange() {
  // @@protoc_insertion_point(destructor:StateChange)
  SharedDtor();
}

void StateChange::SharedDtor() {
  if (this != internal_default_instance()) delete state_pre_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete change_;
  if (this != internal_default_instance()) delete timestamp_;
}

void StateChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StateChange::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StateChange& StateChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_StateChange.base);
  return *internal_default_instance();
}


void StateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:StateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(state_pre_ != NULL);
      state_pre_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(state_ != NULL);
      state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(change_ != NULL);
      change_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(timestamp_ != NULL);
      timestamp_->Clear();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StateChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .State state_pre = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state_pre()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .State state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change change = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StateChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StateChange)
  return false;
#undef DO_
}

void StateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .State state_pre = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_state_pre(), output);
  }

  // optional .State state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_state(), output);
  }

  // optional .Change change = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_change(), output);
  }

  // optional .google.protobuf.Timestamp timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StateChange)
}

::google::protobuf::uint8* StateChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .State state_pre = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_state_pre(), deterministic, target);
  }

  // optional .State state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_state(), deterministic, target);
  }

  // optional .Change change = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_change(), deterministic, target);
  }

  // optional .google.protobuf.Timestamp timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_timestamp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StateChange)
  return target;
}

size_t StateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StateChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .State state_pre = 2;
    if (has_state_pre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_pre_);
    }

    // optional .State state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional .Change change = 4;
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_);
    }

    // optional .google.protobuf.Timestamp timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StateChange)
  GOOGLE_DCHECK_NE(&from, this);
  const StateChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StateChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StateChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StateChange)
    MergeFrom(*source);
  }
}

void StateChange::MergeFrom(const StateChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StateChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state_pre()->::State::MergeFrom(from.state_pre());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_state()->::State::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_change()->::Change::MergeFrom(from.change());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateChange::CopyFrom(const StateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChange::IsInitialized() const {
  if (has_state_pre()) {
    if (!this->state_pre_->IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state_->IsInitialized()) return false;
  }
  if (has_change()) {
    if (!this->change_->IsInitialized()) return false;
  }
  return true;
}

void StateChange::Swap(StateChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateChange::InternalSwap(StateChange* other) {
  using std::swap;
  swap(state_pre_, other->state_pre_);
  swap(state_, other->state_);
  swap(change_, other->change_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StateChange::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_NewCommand::InitAsDefaultInstance() {
  ::_Change_NewCommand_default_instance_._instance.get_mutable()->command_ = const_cast< ::Command*>(
      ::Command::internal_default_instance());
}
void Change_NewCommand::clear_command() {
  if (command_ != NULL) command_->Clear();
  clear_has_command();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_NewCommand::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_NewCommand::Change_NewCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_NewCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.NewCommand)
}
Change_NewCommand::Change_NewCommand(const Change_NewCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_command()) {
    command_ = new ::Command(*from.command_);
  } else {
    command_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Change.NewCommand)
}

void Change_NewCommand::SharedCtor() {
  command_ = NULL;
}

Change_NewCommand::~Change_NewCommand() {
  // @@protoc_insertion_point(destructor:Change.NewCommand)
  SharedDtor();
}

void Change_NewCommand::SharedDtor() {
  if (this != internal_default_instance()) delete command_;
}

void Change_NewCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_NewCommand::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_NewCommand& Change_NewCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_NewCommand.base);
  return *internal_default_instance();
}


void Change_NewCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.NewCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(command_ != NULL);
    command_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_NewCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.NewCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Command command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.NewCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.NewCommand)
  return false;
#undef DO_
}

void Change_NewCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.NewCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Command command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_command(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.NewCommand)
}

::google::protobuf::uint8* Change_NewCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.NewCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Command command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_command(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.NewCommand)
  return target;
}

size_t Change_NewCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.NewCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .Command command = 1;
  if (has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *command_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_NewCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.NewCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_NewCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_NewCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.NewCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.NewCommand)
    MergeFrom(*source);
  }
}

void Change_NewCommand::MergeFrom(const Change_NewCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.NewCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_command()) {
    mutable_command()->::Command::MergeFrom(from.command());
  }
}

void Change_NewCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.NewCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_NewCommand::CopyFrom(const Change_NewCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.NewCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_NewCommand::IsInitialized() const {
  if (has_command()) {
    if (!this->command_->IsInitialized()) return false;
  }
  return true;
}

void Change_NewCommand::Swap(Change_NewCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_NewCommand::InternalSwap(Change_NewCommand* other) {
  using std::swap;
  swap(command_, other->command_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_NewCommand::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_ChangeStage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_ChangeStage::kNewStageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_ChangeStage::Change_ChangeStage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_ChangeStage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.ChangeStage)
}
Change_ChangeStage::Change_ChangeStage(const Change_ChangeStage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_stage_ = from.new_stage_;
  // @@protoc_insertion_point(copy_constructor:Change.ChangeStage)
}

void Change_ChangeStage::SharedCtor() {
  new_stage_ = 0;
}

Change_ChangeStage::~Change_ChangeStage() {
  // @@protoc_insertion_point(destructor:Change.ChangeStage)
  SharedDtor();
}

void Change_ChangeStage::SharedDtor() {
}

void Change_ChangeStage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_ChangeStage::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_ChangeStage& Change_ChangeStage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_ChangeStage.base);
  return *internal_default_instance();
}


void Change_ChangeStage::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.ChangeStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_stage_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_ChangeStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.ChangeStage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Referee.Stage new_stage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Referee_Stage_IsValid(value)) {
            set_new_stage(static_cast< ::Referee_Stage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.ChangeStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.ChangeStage)
  return false;
#undef DO_
}

void Change_ChangeStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.ChangeStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Referee.Stage new_stage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->new_stage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.ChangeStage)
}

::google::protobuf::uint8* Change_ChangeStage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.ChangeStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Referee.Stage new_stage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->new_stage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.ChangeStage)
  return target;
}

size_t Change_ChangeStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.ChangeStage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .Referee.Stage new_stage = 1;
  if (has_new_stage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_stage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_ChangeStage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.ChangeStage)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_ChangeStage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_ChangeStage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.ChangeStage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.ChangeStage)
    MergeFrom(*source);
  }
}

void Change_ChangeStage::MergeFrom(const Change_ChangeStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.ChangeStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_new_stage()) {
    set_new_stage(from.new_stage());
  }
}

void Change_ChangeStage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.ChangeStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_ChangeStage::CopyFrom(const Change_ChangeStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.ChangeStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_ChangeStage::IsInitialized() const {
  return true;
}

void Change_ChangeStage::Swap(Change_ChangeStage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_ChangeStage::InternalSwap(Change_ChangeStage* other) {
  using std::swap;
  swap(new_stage_, other->new_stage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_ChangeStage::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_SetBallPlacementPos::InitAsDefaultInstance() {
  ::_Change_SetBallPlacementPos_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
}
void Change_SetBallPlacementPos::clear_pos() {
  if (pos_ != NULL) pos_->Clear();
  clear_has_pos();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_SetBallPlacementPos::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_SetBallPlacementPos::Change_SetBallPlacementPos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_SetBallPlacementPos.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.SetBallPlacementPos)
}
Change_SetBallPlacementPos::Change_SetBallPlacementPos(const Change_SetBallPlacementPos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::Vector2(*from.pos_);
  } else {
    pos_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Change.SetBallPlacementPos)
}

void Change_SetBallPlacementPos::SharedCtor() {
  pos_ = NULL;
}

Change_SetBallPlacementPos::~Change_SetBallPlacementPos() {
  // @@protoc_insertion_point(destructor:Change.SetBallPlacementPos)
  SharedDtor();
}

void Change_SetBallPlacementPos::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void Change_SetBallPlacementPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_SetBallPlacementPos::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_SetBallPlacementPos& Change_SetBallPlacementPos::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_SetBallPlacementPos.base);
  return *internal_default_instance();
}


void Change_SetBallPlacementPos::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.SetBallPlacementPos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pos_ != NULL);
    pos_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_SetBallPlacementPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.SetBallPlacementPos)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Vector2 pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.SetBallPlacementPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.SetBallPlacementPos)
  return false;
#undef DO_
}

void Change_SetBallPlacementPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.SetBallPlacementPos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Vector2 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.SetBallPlacementPos)
}

::google::protobuf::uint8* Change_SetBallPlacementPos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.SetBallPlacementPos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Vector2 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pos(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.SetBallPlacementPos)
  return target;
}

size_t Change_SetBallPlacementPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.SetBallPlacementPos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .Vector2 pos = 1;
  if (has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_SetBallPlacementPos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.SetBallPlacementPos)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_SetBallPlacementPos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_SetBallPlacementPos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.SetBallPlacementPos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.SetBallPlacementPos)
    MergeFrom(*source);
  }
}

void Change_SetBallPlacementPos::MergeFrom(const Change_SetBallPlacementPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.SetBallPlacementPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    mutable_pos()->::Vector2::MergeFrom(from.pos());
  }
}

void Change_SetBallPlacementPos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.SetBallPlacementPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_SetBallPlacementPos::CopyFrom(const Change_SetBallPlacementPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.SetBallPlacementPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_SetBallPlacementPos::IsInitialized() const {
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  return true;
}

void Change_SetBallPlacementPos::Swap(Change_SetBallPlacementPos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_SetBallPlacementPos::InternalSwap(Change_SetBallPlacementPos* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_SetBallPlacementPos::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_AddYellowCard::InitAsDefaultInstance() {
  ::_Change_AddYellowCard_default_instance_._instance.get_mutable()->caused_by_game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
}
void Change_AddYellowCard::clear_caused_by_game_event() {
  if (caused_by_game_event_ != NULL) caused_by_game_event_->Clear();
  clear_has_caused_by_game_event();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_AddYellowCard::kForTeamFieldNumber;
const int Change_AddYellowCard::kCausedByGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_AddYellowCard::Change_AddYellowCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddYellowCard.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.AddYellowCard)
}
Change_AddYellowCard::Change_AddYellowCard(const Change_AddYellowCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_caused_by_game_event()) {
    caused_by_game_event_ = new ::GameEvent(*from.caused_by_game_event_);
  } else {
    caused_by_game_event_ = NULL;
  }
  for_team_ = from.for_team_;
  // @@protoc_insertion_point(copy_constructor:Change.AddYellowCard)
}

void Change_AddYellowCard::SharedCtor() {
  ::memset(&caused_by_game_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_team_) -
      reinterpret_cast<char*>(&caused_by_game_event_)) + sizeof(for_team_));
}

Change_AddYellowCard::~Change_AddYellowCard() {
  // @@protoc_insertion_point(destructor:Change.AddYellowCard)
  SharedDtor();
}

void Change_AddYellowCard::SharedDtor() {
  if (this != internal_default_instance()) delete caused_by_game_event_;
}

void Change_AddYellowCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_AddYellowCard::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_AddYellowCard& Change_AddYellowCard::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddYellowCard.base);
  return *internal_default_instance();
}


void Change_AddYellowCard::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddYellowCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(caused_by_game_event_ != NULL);
    caused_by_game_event_->Clear();
  }
  for_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_AddYellowCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.AddYellowCard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Team for_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_for_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent caused_by_game_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_caused_by_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.AddYellowCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.AddYellowCard)
  return false;
#undef DO_
}

void Change_AddYellowCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.AddYellowCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->for_team(), output);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_caused_by_game_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.AddYellowCard)
}

::google::protobuf::uint8* Change_AddYellowCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddYellowCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->for_team(), target);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_caused_by_game_event(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddYellowCard)
  return target;
}

size_t Change_AddYellowCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddYellowCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .GameEvent caused_by_game_event = 2;
    if (has_caused_by_game_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *caused_by_game_event_);
    }

    // optional .Team for_team = 1;
    if (has_for_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->for_team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_AddYellowCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.AddYellowCard)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_AddYellowCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_AddYellowCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.AddYellowCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.AddYellowCard)
    MergeFrom(*source);
  }
}

void Change_AddYellowCard::MergeFrom(const Change_AddYellowCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.AddYellowCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_caused_by_game_event()->::GameEvent::MergeFrom(from.caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      for_team_ = from.for_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Change_AddYellowCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.AddYellowCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_AddYellowCard::CopyFrom(const Change_AddYellowCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddYellowCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddYellowCard::IsInitialized() const {
  if (has_caused_by_game_event()) {
    if (!this->caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddYellowCard::Swap(Change_AddYellowCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_AddYellowCard::InternalSwap(Change_AddYellowCard* other) {
  using std::swap;
  swap(caused_by_game_event_, other->caused_by_game_event_);
  swap(for_team_, other->for_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_AddYellowCard::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_AddRedCard::InitAsDefaultInstance() {
  ::_Change_AddRedCard_default_instance_._instance.get_mutable()->caused_by_game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
}
void Change_AddRedCard::clear_caused_by_game_event() {
  if (caused_by_game_event_ != NULL) caused_by_game_event_->Clear();
  clear_has_caused_by_game_event();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_AddRedCard::kForTeamFieldNumber;
const int Change_AddRedCard::kCausedByGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_AddRedCard::Change_AddRedCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddRedCard.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.AddRedCard)
}
Change_AddRedCard::Change_AddRedCard(const Change_AddRedCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_caused_by_game_event()) {
    caused_by_game_event_ = new ::GameEvent(*from.caused_by_game_event_);
  } else {
    caused_by_game_event_ = NULL;
  }
  for_team_ = from.for_team_;
  // @@protoc_insertion_point(copy_constructor:Change.AddRedCard)
}

void Change_AddRedCard::SharedCtor() {
  ::memset(&caused_by_game_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_team_) -
      reinterpret_cast<char*>(&caused_by_game_event_)) + sizeof(for_team_));
}

Change_AddRedCard::~Change_AddRedCard() {
  // @@protoc_insertion_point(destructor:Change.AddRedCard)
  SharedDtor();
}

void Change_AddRedCard::SharedDtor() {
  if (this != internal_default_instance()) delete caused_by_game_event_;
}

void Change_AddRedCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_AddRedCard::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_AddRedCard& Change_AddRedCard::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddRedCard.base);
  return *internal_default_instance();
}


void Change_AddRedCard::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddRedCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(caused_by_game_event_ != NULL);
    caused_by_game_event_->Clear();
  }
  for_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_AddRedCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.AddRedCard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Team for_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_for_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent caused_by_game_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_caused_by_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.AddRedCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.AddRedCard)
  return false;
#undef DO_
}

void Change_AddRedCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.AddRedCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->for_team(), output);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_caused_by_game_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.AddRedCard)
}

::google::protobuf::uint8* Change_AddRedCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddRedCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->for_team(), target);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_caused_by_game_event(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddRedCard)
  return target;
}

size_t Change_AddRedCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddRedCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .GameEvent caused_by_game_event = 2;
    if (has_caused_by_game_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *caused_by_game_event_);
    }

    // optional .Team for_team = 1;
    if (has_for_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->for_team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_AddRedCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.AddRedCard)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_AddRedCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_AddRedCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.AddRedCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.AddRedCard)
    MergeFrom(*source);
  }
}

void Change_AddRedCard::MergeFrom(const Change_AddRedCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.AddRedCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_caused_by_game_event()->::GameEvent::MergeFrom(from.caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      for_team_ = from.for_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Change_AddRedCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.AddRedCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_AddRedCard::CopyFrom(const Change_AddRedCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddRedCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddRedCard::IsInitialized() const {
  if (has_caused_by_game_event()) {
    if (!this->caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddRedCard::Swap(Change_AddRedCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_AddRedCard::InternalSwap(Change_AddRedCard* other) {
  using std::swap;
  swap(caused_by_game_event_, other->caused_by_game_event_);
  swap(for_team_, other->for_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_AddRedCard::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_YellowCardOver::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_YellowCardOver::kForTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_YellowCardOver::Change_YellowCardOver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_YellowCardOver.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.YellowCardOver)
}
Change_YellowCardOver::Change_YellowCardOver(const Change_YellowCardOver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  for_team_ = from.for_team_;
  // @@protoc_insertion_point(copy_constructor:Change.YellowCardOver)
}

void Change_YellowCardOver::SharedCtor() {
  for_team_ = 0;
}

Change_YellowCardOver::~Change_YellowCardOver() {
  // @@protoc_insertion_point(destructor:Change.YellowCardOver)
  SharedDtor();
}

void Change_YellowCardOver::SharedDtor() {
}

void Change_YellowCardOver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_YellowCardOver::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_YellowCardOver& Change_YellowCardOver::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_YellowCardOver.base);
  return *internal_default_instance();
}


void Change_YellowCardOver::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.YellowCardOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  for_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_YellowCardOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.YellowCardOver)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Team for_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_for_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.YellowCardOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.YellowCardOver)
  return false;
#undef DO_
}

void Change_YellowCardOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.YellowCardOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->for_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.YellowCardOver)
}

::google::protobuf::uint8* Change_YellowCardOver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.YellowCardOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->for_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.YellowCardOver)
  return target;
}

size_t Change_YellowCardOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.YellowCardOver)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .Team for_team = 1;
  if (has_for_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->for_team());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_YellowCardOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.YellowCardOver)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_YellowCardOver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_YellowCardOver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.YellowCardOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.YellowCardOver)
    MergeFrom(*source);
  }
}

void Change_YellowCardOver::MergeFrom(const Change_YellowCardOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.YellowCardOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_for_team()) {
    set_for_team(from.for_team());
  }
}

void Change_YellowCardOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.YellowCardOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_YellowCardOver::CopyFrom(const Change_YellowCardOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.YellowCardOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_YellowCardOver::IsInitialized() const {
  return true;
}

void Change_YellowCardOver::Swap(Change_YellowCardOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_YellowCardOver::InternalSwap(Change_YellowCardOver* other) {
  using std::swap;
  swap(for_team_, other->for_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_YellowCardOver::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_AddGameEvent::InitAsDefaultInstance() {
  ::_Change_AddGameEvent_default_instance_._instance.get_mutable()->game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
}
void Change_AddGameEvent::clear_game_event() {
  if (game_event_ != NULL) game_event_->Clear();
  clear_has_game_event();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_AddGameEvent::kGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_AddGameEvent::Change_AddGameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddGameEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.AddGameEvent)
}
Change_AddGameEvent::Change_AddGameEvent(const Change_AddGameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_game_event()) {
    game_event_ = new ::GameEvent(*from.game_event_);
  } else {
    game_event_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Change.AddGameEvent)
}

void Change_AddGameEvent::SharedCtor() {
  game_event_ = NULL;
}

Change_AddGameEvent::~Change_AddGameEvent() {
  // @@protoc_insertion_point(destructor:Change.AddGameEvent)
  SharedDtor();
}

void Change_AddGameEvent::SharedDtor() {
  if (this != internal_default_instance()) delete game_event_;
}

void Change_AddGameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_AddGameEvent::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_AddGameEvent& Change_AddGameEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddGameEvent.base);
  return *internal_default_instance();
}


void Change_AddGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_event_ != NULL);
    game_event_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_AddGameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.AddGameEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameEvent game_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.AddGameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.AddGameEvent)
  return false;
#undef DO_
}

void Change_AddGameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.AddGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GameEvent game_event = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_game_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.AddGameEvent)
}

::google::protobuf::uint8* Change_AddGameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GameEvent game_event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_game_event(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddGameEvent)
  return target;
}

size_t Change_AddGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddGameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .GameEvent game_event = 1;
  if (has_game_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *game_event_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_AddGameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.AddGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_AddGameEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_AddGameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.AddGameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.AddGameEvent)
    MergeFrom(*source);
  }
}

void Change_AddGameEvent::MergeFrom(const Change_AddGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.AddGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_game_event()) {
    mutable_game_event()->::GameEvent::MergeFrom(from.game_event());
  }
}

void Change_AddGameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.AddGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_AddGameEvent::CopyFrom(const Change_AddGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddGameEvent::IsInitialized() const {
  if (has_game_event()) {
    if (!this->game_event_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddGameEvent::Swap(Change_AddGameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_AddGameEvent::InternalSwap(Change_AddGameEvent* other) {
  using std::swap;
  swap(game_event_, other->game_event_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_AddGameEvent::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_AddPassiveGameEvent::InitAsDefaultInstance() {
  ::_Change_AddPassiveGameEvent_default_instance_._instance.get_mutable()->game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
}
void Change_AddPassiveGameEvent::clear_game_event() {
  if (game_event_ != NULL) game_event_->Clear();
  clear_has_game_event();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_AddPassiveGameEvent::kGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_AddPassiveGameEvent::Change_AddPassiveGameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddPassiveGameEvent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.AddPassiveGameEvent)
}
Change_AddPassiveGameEvent::Change_AddPassiveGameEvent(const Change_AddPassiveGameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_game_event()) {
    game_event_ = new ::GameEvent(*from.game_event_);
  } else {
    game_event_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Change.AddPassiveGameEvent)
}

void Change_AddPassiveGameEvent::SharedCtor() {
  game_event_ = NULL;
}

Change_AddPassiveGameEvent::~Change_AddPassiveGameEvent() {
  // @@protoc_insertion_point(destructor:Change.AddPassiveGameEvent)
  SharedDtor();
}

void Change_AddPassiveGameEvent::SharedDtor() {
  if (this != internal_default_instance()) delete game_event_;
}

void Change_AddPassiveGameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_AddPassiveGameEvent::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_AddPassiveGameEvent& Change_AddPassiveGameEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddPassiveGameEvent.base);
  return *internal_default_instance();
}


void Change_AddPassiveGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddPassiveGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_event_ != NULL);
    game_event_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_AddPassiveGameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.AddPassiveGameEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameEvent game_event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.AddPassiveGameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.AddPassiveGameEvent)
  return false;
#undef DO_
}

void Change_AddPassiveGameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.AddPassiveGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GameEvent game_event = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_game_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.AddPassiveGameEvent)
}

::google::protobuf::uint8* Change_AddPassiveGameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddPassiveGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GameEvent game_event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_game_event(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddPassiveGameEvent)
  return target;
}

size_t Change_AddPassiveGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddPassiveGameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .GameEvent game_event = 1;
  if (has_game_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *game_event_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_AddPassiveGameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.AddPassiveGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_AddPassiveGameEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_AddPassiveGameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.AddPassiveGameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.AddPassiveGameEvent)
    MergeFrom(*source);
  }
}

void Change_AddPassiveGameEvent::MergeFrom(const Change_AddPassiveGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.AddPassiveGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_game_event()) {
    mutable_game_event()->::GameEvent::MergeFrom(from.game_event());
  }
}

void Change_AddPassiveGameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.AddPassiveGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_AddPassiveGameEvent::CopyFrom(const Change_AddPassiveGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddPassiveGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddPassiveGameEvent::IsInitialized() const {
  if (has_game_event()) {
    if (!this->game_event_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddPassiveGameEvent::Swap(Change_AddPassiveGameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_AddPassiveGameEvent::InternalSwap(Change_AddPassiveGameEvent* other) {
  using std::swap;
  swap(game_event_, other->game_event_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_AddPassiveGameEvent::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_AddProposal::InitAsDefaultInstance() {
  ::_Change_AddProposal_default_instance_._instance.get_mutable()->proposal_ = const_cast< ::Proposal*>(
      ::Proposal::internal_default_instance());
}
void Change_AddProposal::clear_proposal() {
  if (proposal_ != NULL) proposal_->Clear();
  clear_has_proposal();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_AddProposal::kProposalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_AddProposal::Change_AddProposal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddProposal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.AddProposal)
}
Change_AddProposal::Change_AddProposal(const Change_AddProposal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_proposal()) {
    proposal_ = new ::Proposal(*from.proposal_);
  } else {
    proposal_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Change.AddProposal)
}

void Change_AddProposal::SharedCtor() {
  proposal_ = NULL;
}

Change_AddProposal::~Change_AddProposal() {
  // @@protoc_insertion_point(destructor:Change.AddProposal)
  SharedDtor();
}

void Change_AddProposal::SharedDtor() {
  if (this != internal_default_instance()) delete proposal_;
}

void Change_AddProposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_AddProposal::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_AddProposal& Change_AddProposal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AddProposal.base);
  return *internal_default_instance();
}


void Change_AddProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AddProposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(proposal_ != NULL);
    proposal_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_AddProposal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.AddProposal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proposal proposal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proposal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.AddProposal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.AddProposal)
  return false;
#undef DO_
}

void Change_AddProposal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.AddProposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Proposal proposal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_proposal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.AddProposal)
}

::google::protobuf::uint8* Change_AddProposal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.AddProposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Proposal proposal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_proposal(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AddProposal)
  return target;
}

size_t Change_AddProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AddProposal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .Proposal proposal = 1;
  if (has_proposal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_AddProposal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.AddProposal)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_AddProposal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_AddProposal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.AddProposal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.AddProposal)
    MergeFrom(*source);
  }
}

void Change_AddProposal::MergeFrom(const Change_AddProposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.AddProposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_proposal()) {
    mutable_proposal()->::Proposal::MergeFrom(from.proposal());
  }
}

void Change_AddProposal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.AddProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_AddProposal::CopyFrom(const Change_AddProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AddProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AddProposal::IsInitialized() const {
  if (has_proposal()) {
    if (!this->proposal_->IsInitialized()) return false;
  }
  return true;
}

void Change_AddProposal::Swap(Change_AddProposal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_AddProposal::InternalSwap(Change_AddProposal* other) {
  using std::swap;
  swap(proposal_, other->proposal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_AddProposal::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_AcceptProposalGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_AcceptProposalGroup::kGroupIdFieldNumber;
const int Change_AcceptProposalGroup::kAcceptedByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_AcceptProposalGroup::Change_AcceptProposalGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AcceptProposalGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.AcceptProposalGroup)
}
Change_AcceptProposalGroup::Change_AcceptProposalGroup(const Change_AcceptProposalGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accepted_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_accepted_by()) {
    accepted_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accepted_by_);
  }
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group_id()) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  // @@protoc_insertion_point(copy_constructor:Change.AcceptProposalGroup)
}

void Change_AcceptProposalGroup::SharedCtor() {
  accepted_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Change_AcceptProposalGroup::~Change_AcceptProposalGroup() {
  // @@protoc_insertion_point(destructor:Change.AcceptProposalGroup)
  SharedDtor();
}

void Change_AcceptProposalGroup::SharedDtor() {
  accepted_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Change_AcceptProposalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_AcceptProposalGroup::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_AcceptProposalGroup& Change_AcceptProposalGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_AcceptProposalGroup.base);
  return *internal_default_instance();
}


void Change_AcceptProposalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.AcceptProposalGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      accepted_by_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_AcceptProposalGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.AcceptProposalGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string accepted_by = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accepted_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accepted_by().data(), static_cast<int>(this->accepted_by().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Change.AcceptProposalGroup.accepted_by");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string group_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_id().data(), static_cast<int>(this->group_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Change.AcceptProposalGroup.group_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.AcceptProposalGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.AcceptProposalGroup)
  return false;
#undef DO_
}

void Change_AcceptProposalGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.AcceptProposalGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string accepted_by = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accepted_by().data(), static_cast<int>(this->accepted_by().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Change.AcceptProposalGroup.accepted_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->accepted_by(), output);
  }

  // optional string group_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Change.AcceptProposalGroup.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.AcceptProposalGroup)
}

::google::protobuf::uint8* Change_AcceptProposalGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.AcceptProposalGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string accepted_by = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accepted_by().data(), static_cast<int>(this->accepted_by().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Change.AcceptProposalGroup.accepted_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accepted_by(), target);
  }

  // optional string group_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), static_cast<int>(this->group_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Change.AcceptProposalGroup.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.AcceptProposalGroup)
  return target;
}

size_t Change_AcceptProposalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.AcceptProposalGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string accepted_by = 2;
    if (has_accepted_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accepted_by());
    }

    // optional string group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_AcceptProposalGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.AcceptProposalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_AcceptProposalGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_AcceptProposalGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.AcceptProposalGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.AcceptProposalGroup)
    MergeFrom(*source);
  }
}

void Change_AcceptProposalGroup::MergeFrom(const Change_AcceptProposalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.AcceptProposalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_accepted_by();
      accepted_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accepted_by_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_group_id();
      group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
    }
  }
}

void Change_AcceptProposalGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.AcceptProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_AcceptProposalGroup::CopyFrom(const Change_AcceptProposalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.AcceptProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_AcceptProposalGroup::IsInitialized() const {
  return true;
}

void Change_AcceptProposalGroup::Swap(Change_AcceptProposalGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_AcceptProposalGroup::InternalSwap(Change_AcceptProposalGroup* other) {
  using std::swap;
  accepted_by_.Swap(&other->accepted_by_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_AcceptProposalGroup::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_UpdateConfig::InitAsDefaultInstance() {
  ::_Change_UpdateConfig_default_instance_._instance.get_mutable()->max_robots_per_team_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void Change_UpdateConfig::clear_max_robots_per_team() {
  if (max_robots_per_team_ != NULL) max_robots_per_team_->Clear();
  clear_has_max_robots_per_team();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_UpdateConfig::kDivisionFieldNumber;
const int Change_UpdateConfig::kFirstKickoffTeamFieldNumber;
const int Change_UpdateConfig::kMatchTypeFieldNumber;
const int Change_UpdateConfig::kMaxRobotsPerTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_UpdateConfig::Change_UpdateConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_UpdateConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.UpdateConfig)
}
Change_UpdateConfig::Change_UpdateConfig(const Change_UpdateConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max_robots_per_team()) {
    max_robots_per_team_ = new ::google::protobuf::Int32Value(*from.max_robots_per_team_);
  } else {
    max_robots_per_team_ = NULL;
  }
  ::memcpy(&division_, &from.division_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_type_) -
    reinterpret_cast<char*>(&division_)) + sizeof(match_type_));
  // @@protoc_insertion_point(copy_constructor:Change.UpdateConfig)
}

void Change_UpdateConfig::SharedCtor() {
  ::memset(&max_robots_per_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_type_) -
      reinterpret_cast<char*>(&max_robots_per_team_)) + sizeof(match_type_));
}

Change_UpdateConfig::~Change_UpdateConfig() {
  // @@protoc_insertion_point(destructor:Change.UpdateConfig)
  SharedDtor();
}

void Change_UpdateConfig::SharedDtor() {
  if (this != internal_default_instance()) delete max_robots_per_team_;
}

void Change_UpdateConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_UpdateConfig::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_UpdateConfig& Change_UpdateConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_UpdateConfig.base);
  return *internal_default_instance();
}


void Change_UpdateConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.UpdateConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(max_robots_per_team_ != NULL);
    max_robots_per_team_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&division_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_type_) -
        reinterpret_cast<char*>(&division_)) + sizeof(match_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_UpdateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.UpdateConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Division division = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Division_IsValid(value)) {
            set_division(static_cast< ::Division >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Team first_kickoff_team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_first_kickoff_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MatchType match_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MatchType_IsValid(value)) {
            set_match_type(static_cast< ::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Int32Value max_robots_per_team = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max_robots_per_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.UpdateConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.UpdateConfig)
  return false;
#undef DO_
}

void Change_UpdateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.UpdateConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Division division = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->division(), output);
  }

  // optional .Team first_kickoff_team = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->first_kickoff_team(), output);
  }

  // optional .MatchType match_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->match_type(), output);
  }

  // optional .google.protobuf.Int32Value max_robots_per_team = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_max_robots_per_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.UpdateConfig)
}

::google::protobuf::uint8* Change_UpdateConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.UpdateConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Division division = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->division(), target);
  }

  // optional .Team first_kickoff_team = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->first_kickoff_team(), target);
  }

  // optional .MatchType match_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->match_type(), target);
  }

  // optional .google.protobuf.Int32Value max_robots_per_team = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_max_robots_per_team(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.UpdateConfig)
  return target;
}

size_t Change_UpdateConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.UpdateConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .google.protobuf.Int32Value max_robots_per_team = 5;
    if (has_max_robots_per_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *max_robots_per_team_);
    }

    // optional .Division division = 1;
    if (has_division()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->division());
    }

    // optional .Team first_kickoff_team = 2;
    if (has_first_kickoff_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->first_kickoff_team());
    }

    // optional .MatchType match_type = 4;
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_UpdateConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.UpdateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_UpdateConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_UpdateConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.UpdateConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.UpdateConfig)
    MergeFrom(*source);
  }
}

void Change_UpdateConfig::MergeFrom(const Change_UpdateConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.UpdateConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_max_robots_per_team()->::google::protobuf::Int32Value::MergeFrom(from.max_robots_per_team());
    }
    if (cached_has_bits & 0x00000002u) {
      division_ = from.division_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_kickoff_team_ = from.first_kickoff_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      match_type_ = from.match_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Change_UpdateConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.UpdateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_UpdateConfig::CopyFrom(const Change_UpdateConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.UpdateConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_UpdateConfig::IsInitialized() const {
  return true;
}

void Change_UpdateConfig::Swap(Change_UpdateConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_UpdateConfig::InternalSwap(Change_UpdateConfig* other) {
  using std::swap;
  swap(max_robots_per_team_, other->max_robots_per_team_);
  swap(division_, other->division_);
  swap(first_kickoff_team_, other->first_kickoff_team_);
  swap(match_type_, other->match_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_UpdateConfig::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_UpdateTeamState::InitAsDefaultInstance() {
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->team_name_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->goals_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->goalkeeper_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->timeouts_left_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->timeout_time_left_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->on_positive_half_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->ball_placement_failures_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->can_place_ball_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->challenge_flags_left_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->bot_substitutions_left_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->requests_bot_substitution_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->requests_timeout_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->requests_challenge_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->requests_emergency_stop_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->yellow_card_ = const_cast< ::YellowCard*>(
      ::YellowCard::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->red_card_ = const_cast< ::RedCard*>(
      ::RedCard::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->foul_ = const_cast< ::Foul*>(
      ::Foul::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->remove_yellow_card_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->remove_red_card_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  ::_Change_UpdateTeamState_default_instance_._instance.get_mutable()->remove_foul_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
}
void Change_UpdateTeamState::clear_team_name() {
  if (team_name_ != NULL) team_name_->Clear();
  clear_has_team_name();
}
void Change_UpdateTeamState::clear_goals() {
  if (goals_ != NULL) goals_->Clear();
  clear_has_goals();
}
void Change_UpdateTeamState::clear_goalkeeper() {
  if (goalkeeper_ != NULL) goalkeeper_->Clear();
  clear_has_goalkeeper();
}
void Change_UpdateTeamState::clear_timeouts_left() {
  if (timeouts_left_ != NULL) timeouts_left_->Clear();
  clear_has_timeouts_left();
}
void Change_UpdateTeamState::clear_timeout_time_left() {
  if (timeout_time_left_ != NULL) timeout_time_left_->Clear();
  clear_has_timeout_time_left();
}
void Change_UpdateTeamState::clear_on_positive_half() {
  if (on_positive_half_ != NULL) on_positive_half_->Clear();
  clear_has_on_positive_half();
}
void Change_UpdateTeamState::clear_ball_placement_failures() {
  if (ball_placement_failures_ != NULL) ball_placement_failures_->Clear();
  clear_has_ball_placement_failures();
}
void Change_UpdateTeamState::clear_can_place_ball() {
  if (can_place_ball_ != NULL) can_place_ball_->Clear();
  clear_has_can_place_ball();
}
void Change_UpdateTeamState::clear_challenge_flags_left() {
  if (challenge_flags_left_ != NULL) challenge_flags_left_->Clear();
  clear_has_challenge_flags_left();
}
void Change_UpdateTeamState::clear_bot_substitutions_left() {
  if (bot_substitutions_left_ != NULL) bot_substitutions_left_->Clear();
  clear_has_bot_substitutions_left();
}
void Change_UpdateTeamState::clear_requests_bot_substitution() {
  if (requests_bot_substitution_ != NULL) requests_bot_substitution_->Clear();
  clear_has_requests_bot_substitution();
}
void Change_UpdateTeamState::clear_requests_timeout() {
  if (requests_timeout_ != NULL) requests_timeout_->Clear();
  clear_has_requests_timeout();
}
void Change_UpdateTeamState::clear_requests_challenge() {
  if (requests_challenge_ != NULL) requests_challenge_->Clear();
  clear_has_requests_challenge();
}
void Change_UpdateTeamState::clear_requests_emergency_stop() {
  if (requests_emergency_stop_ != NULL) requests_emergency_stop_->Clear();
  clear_has_requests_emergency_stop();
}
void Change_UpdateTeamState::clear_yellow_card() {
  if (yellow_card_ != NULL) yellow_card_->Clear();
  clear_has_yellow_card();
}
void Change_UpdateTeamState::clear_red_card() {
  if (red_card_ != NULL) red_card_->Clear();
  clear_has_red_card();
}
void Change_UpdateTeamState::clear_foul() {
  if (foul_ != NULL) foul_->Clear();
  clear_has_foul();
}
void Change_UpdateTeamState::clear_remove_yellow_card() {
  if (remove_yellow_card_ != NULL) remove_yellow_card_->Clear();
  clear_has_remove_yellow_card();
}
void Change_UpdateTeamState::clear_remove_red_card() {
  if (remove_red_card_ != NULL) remove_red_card_->Clear();
  clear_has_remove_red_card();
}
void Change_UpdateTeamState::clear_remove_foul() {
  if (remove_foul_ != NULL) remove_foul_->Clear();
  clear_has_remove_foul();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_UpdateTeamState::kForTeamFieldNumber;
const int Change_UpdateTeamState::kTeamNameFieldNumber;
const int Change_UpdateTeamState::kGoalsFieldNumber;
const int Change_UpdateTeamState::kGoalkeeperFieldNumber;
const int Change_UpdateTeamState::kTimeoutsLeftFieldNumber;
const int Change_UpdateTeamState::kTimeoutTimeLeftFieldNumber;
const int Change_UpdateTeamState::kOnPositiveHalfFieldNumber;
const int Change_UpdateTeamState::kBallPlacementFailuresFieldNumber;
const int Change_UpdateTeamState::kCanPlaceBallFieldNumber;
const int Change_UpdateTeamState::kChallengeFlagsLeftFieldNumber;
const int Change_UpdateTeamState::kBotSubstitutionsLeftFieldNumber;
const int Change_UpdateTeamState::kRequestsBotSubstitutionFieldNumber;
const int Change_UpdateTeamState::kRequestsTimeoutFieldNumber;
const int Change_UpdateTeamState::kRequestsChallengeFieldNumber;
const int Change_UpdateTeamState::kRequestsEmergencyStopFieldNumber;
const int Change_UpdateTeamState::kYellowCardFieldNumber;
const int Change_UpdateTeamState::kRedCardFieldNumber;
const int Change_UpdateTeamState::kFoulFieldNumber;
const int Change_UpdateTeamState::kRemoveYellowCardFieldNumber;
const int Change_UpdateTeamState::kRemoveRedCardFieldNumber;
const int Change_UpdateTeamState::kRemoveFoulFieldNumber;
const int Change_UpdateTeamState::kHullColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_UpdateTeamState::Change_UpdateTeamState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_UpdateTeamState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.UpdateTeamState)
}
Change_UpdateTeamState::Change_UpdateTeamState(const Change_UpdateTeamState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_name()) {
    team_name_ = new ::google::protobuf::StringValue(*from.team_name_);
  } else {
    team_name_ = NULL;
  }
  if (from.has_goals()) {
    goals_ = new ::google::protobuf::Int32Value(*from.goals_);
  } else {
    goals_ = NULL;
  }
  if (from.has_goalkeeper()) {
    goalkeeper_ = new ::google::protobuf::Int32Value(*from.goalkeeper_);
  } else {
    goalkeeper_ = NULL;
  }
  if (from.has_timeouts_left()) {
    timeouts_left_ = new ::google::protobuf::Int32Value(*from.timeouts_left_);
  } else {
    timeouts_left_ = NULL;
  }
  if (from.has_timeout_time_left()) {
    timeout_time_left_ = new ::google::protobuf::StringValue(*from.timeout_time_left_);
  } else {
    timeout_time_left_ = NULL;
  }
  if (from.has_on_positive_half()) {
    on_positive_half_ = new ::google::protobuf::BoolValue(*from.on_positive_half_);
  } else {
    on_positive_half_ = NULL;
  }
  if (from.has_ball_placement_failures()) {
    ball_placement_failures_ = new ::google::protobuf::Int32Value(*from.ball_placement_failures_);
  } else {
    ball_placement_failures_ = NULL;
  }
  if (from.has_can_place_ball()) {
    can_place_ball_ = new ::google::protobuf::BoolValue(*from.can_place_ball_);
  } else {
    can_place_ball_ = NULL;
  }
  if (from.has_requests_bot_substitution()) {
    requests_bot_substitution_ = new ::google::protobuf::BoolValue(*from.requests_bot_substitution_);
  } else {
    requests_bot_substitution_ = NULL;
  }
  if (from.has_red_card()) {
    red_card_ = new ::RedCard(*from.red_card_);
  } else {
    red_card_ = NULL;
  }
  if (from.has_foul()) {
    foul_ = new ::Foul(*from.foul_);
  } else {
    foul_ = NULL;
  }
  if (from.has_remove_yellow_card()) {
    remove_yellow_card_ = new ::google::protobuf::UInt32Value(*from.remove_yellow_card_);
  } else {
    remove_yellow_card_ = NULL;
  }
  if (from.has_remove_red_card()) {
    remove_red_card_ = new ::google::protobuf::UInt32Value(*from.remove_red_card_);
  } else {
    remove_red_card_ = NULL;
  }
  if (from.has_remove_foul()) {
    remove_foul_ = new ::google::protobuf::UInt32Value(*from.remove_foul_);
  } else {
    remove_foul_ = NULL;
  }
  if (from.has_requests_timeout()) {
    requests_timeout_ = new ::google::protobuf::BoolValue(*from.requests_timeout_);
  } else {
    requests_timeout_ = NULL;
  }
  if (from.has_requests_challenge()) {
    requests_challenge_ = new ::google::protobuf::BoolValue(*from.requests_challenge_);
  } else {
    requests_challenge_ = NULL;
  }
  if (from.has_requests_emergency_stop()) {
    requests_emergency_stop_ = new ::google::protobuf::BoolValue(*from.requests_emergency_stop_);
  } else {
    requests_emergency_stop_ = NULL;
  }
  if (from.has_yellow_card()) {
    yellow_card_ = new ::YellowCard(*from.yellow_card_);
  } else {
    yellow_card_ = NULL;
  }
  if (from.has_challenge_flags_left()) {
    challenge_flags_left_ = new ::google::protobuf::Int32Value(*from.challenge_flags_left_);
  } else {
    challenge_flags_left_ = NULL;
  }
  if (from.has_bot_substitutions_left()) {
    bot_substitutions_left_ = new ::google::protobuf::Int32Value(*from.bot_substitutions_left_);
  } else {
    bot_substitutions_left_ = NULL;
  }
  ::memcpy(&for_team_, &from.for_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&hull_color_) -
    reinterpret_cast<char*>(&for_team_)) + sizeof(hull_color_));
  // @@protoc_insertion_point(copy_constructor:Change.UpdateTeamState)
}

void Change_UpdateTeamState::SharedCtor() {
  ::memset(&team_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hull_color_) -
      reinterpret_cast<char*>(&team_name_)) + sizeof(hull_color_));
}

Change_UpdateTeamState::~Change_UpdateTeamState() {
  // @@protoc_insertion_point(destructor:Change.UpdateTeamState)
  SharedDtor();
}

void Change_UpdateTeamState::SharedDtor() {
  if (this != internal_default_instance()) delete team_name_;
  if (this != internal_default_instance()) delete goals_;
  if (this != internal_default_instance()) delete goalkeeper_;
  if (this != internal_default_instance()) delete timeouts_left_;
  if (this != internal_default_instance()) delete timeout_time_left_;
  if (this != internal_default_instance()) delete on_positive_half_;
  if (this != internal_default_instance()) delete ball_placement_failures_;
  if (this != internal_default_instance()) delete can_place_ball_;
  if (this != internal_default_instance()) delete requests_bot_substitution_;
  if (this != internal_default_instance()) delete red_card_;
  if (this != internal_default_instance()) delete foul_;
  if (this != internal_default_instance()) delete remove_yellow_card_;
  if (this != internal_default_instance()) delete remove_red_card_;
  if (this != internal_default_instance()) delete remove_foul_;
  if (this != internal_default_instance()) delete requests_timeout_;
  if (this != internal_default_instance()) delete requests_challenge_;
  if (this != internal_default_instance()) delete requests_emergency_stop_;
  if (this != internal_default_instance()) delete yellow_card_;
  if (this != internal_default_instance()) delete challenge_flags_left_;
  if (this != internal_default_instance()) delete bot_substitutions_left_;
}

void Change_UpdateTeamState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_UpdateTeamState::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_UpdateTeamState& Change_UpdateTeamState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_UpdateTeamState.base);
  return *internal_default_instance();
}


void Change_UpdateTeamState::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.UpdateTeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_name_ != NULL);
      team_name_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(goals_ != NULL);
      goals_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(goalkeeper_ != NULL);
      goalkeeper_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(timeouts_left_ != NULL);
      timeouts_left_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(timeout_time_left_ != NULL);
      timeout_time_left_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(on_positive_half_ != NULL);
      on_positive_half_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(ball_placement_failures_ != NULL);
      ball_placement_failures_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(can_place_ball_ != NULL);
      can_place_ball_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(requests_bot_substitution_ != NULL);
      requests_bot_substitution_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(red_card_ != NULL);
      red_card_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(foul_ != NULL);
      foul_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(remove_yellow_card_ != NULL);
      remove_yellow_card_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(remove_red_card_ != NULL);
      remove_red_card_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(remove_foul_ != NULL);
      remove_foul_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(requests_timeout_ != NULL);
      requests_timeout_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(requests_challenge_ != NULL);
      requests_challenge_->Clear();
    }
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(requests_emergency_stop_ != NULL);
      requests_emergency_stop_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(yellow_card_ != NULL);
      yellow_card_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(challenge_flags_left_ != NULL);
      challenge_flags_left_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(bot_substitutions_left_ != NULL);
      bot_substitutions_left_->Clear();
    }
  }
  if (cached_has_bits & 3145728u) {
    ::memset(&for_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hull_color_) -
        reinterpret_cast<char*>(&for_team_)) + sizeof(hull_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_UpdateTeamState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.UpdateTeamState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Team for_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_for_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.StringValue team_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Int32Value goals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_goals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Int32Value goalkeeper = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_goalkeeper()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Int32Value timeouts_left = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timeouts_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.StringValue timeout_time_left = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timeout_time_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.BoolValue on_positive_half = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_on_positive_half()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Int32Value ball_placement_failures = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ball_placement_failures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.BoolValue can_place_ball = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_can_place_ball()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.BoolValue requests_bot_substitution = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requests_bot_substitution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RedCard red_card = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_red_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Foul foul = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_foul()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.UInt32Value remove_yellow_card = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remove_yellow_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.UInt32Value remove_red_card = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remove_red_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.UInt32Value remove_foul = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_remove_foul()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.BoolValue requests_timeout = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requests_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.BoolValue requests_challenge = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requests_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.BoolValue requests_emergency_stop = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requests_emergency_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .YellowCard yellow_card = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yellow_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Int32Value challenge_flags_left = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_challenge_flags_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Int32Value bot_substitutions_left = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_substitutions_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .HullColor hull_color = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HullColor_IsValid(value)) {
            set_hull_color(static_cast< ::HullColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.UpdateTeamState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.UpdateTeamState)
  return false;
#undef DO_
}

void Change_UpdateTeamState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.UpdateTeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->for_team(), output);
  }

  // optional .google.protobuf.StringValue team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_team_name(), output);
  }

  // optional .google.protobuf.Int32Value goals = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_goals(), output);
  }

  // optional .google.protobuf.Int32Value goalkeeper = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_goalkeeper(), output);
  }

  // optional .google.protobuf.Int32Value timeouts_left = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_timeouts_left(), output);
  }

  // optional .google.protobuf.StringValue timeout_time_left = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_timeout_time_left(), output);
  }

  // optional .google.protobuf.BoolValue on_positive_half = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_on_positive_half(), output);
  }

  // optional .google.protobuf.Int32Value ball_placement_failures = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_ball_placement_failures(), output);
  }

  // optional .google.protobuf.BoolValue can_place_ball = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_can_place_ball(), output);
  }

  // optional .google.protobuf.BoolValue requests_bot_substitution = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_requests_bot_substitution(), output);
  }

  // optional .RedCard red_card = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_red_card(), output);
  }

  // optional .Foul foul = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_foul(), output);
  }

  // optional .google.protobuf.UInt32Value remove_yellow_card = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_remove_yellow_card(), output);
  }

  // optional .google.protobuf.UInt32Value remove_red_card = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_remove_red_card(), output);
  }

  // optional .google.protobuf.UInt32Value remove_foul = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_remove_foul(), output);
  }

  // optional .google.protobuf.BoolValue requests_timeout = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_requests_timeout(), output);
  }

  // optional .google.protobuf.BoolValue requests_challenge = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_requests_challenge(), output);
  }

  // optional .google.protobuf.BoolValue requests_emergency_stop = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_requests_emergency_stop(), output);
  }

  // optional .YellowCard yellow_card = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_yellow_card(), output);
  }

  // optional .google.protobuf.Int32Value challenge_flags_left = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_challenge_flags_left(), output);
  }

  // optional .google.protobuf.Int32Value bot_substitutions_left = 22;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_bot_substitutions_left(), output);
  }

  // optional .HullColor hull_color = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->hull_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.UpdateTeamState)
}

::google::protobuf::uint8* Change_UpdateTeamState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.UpdateTeamState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team for_team = 1;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->for_team(), target);
  }

  // optional .google.protobuf.StringValue team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_team_name(), deterministic, target);
  }

  // optional .google.protobuf.Int32Value goals = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_goals(), deterministic, target);
  }

  // optional .google.protobuf.Int32Value goalkeeper = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_goalkeeper(), deterministic, target);
  }

  // optional .google.protobuf.Int32Value timeouts_left = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_timeouts_left(), deterministic, target);
  }

  // optional .google.protobuf.StringValue timeout_time_left = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_timeout_time_left(), deterministic, target);
  }

  // optional .google.protobuf.BoolValue on_positive_half = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_on_positive_half(), deterministic, target);
  }

  // optional .google.protobuf.Int32Value ball_placement_failures = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_ball_placement_failures(), deterministic, target);
  }

  // optional .google.protobuf.BoolValue can_place_ball = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_can_place_ball(), deterministic, target);
  }

  // optional .google.protobuf.BoolValue requests_bot_substitution = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_requests_bot_substitution(), deterministic, target);
  }

  // optional .RedCard red_card = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_red_card(), deterministic, target);
  }

  // optional .Foul foul = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_foul(), deterministic, target);
  }

  // optional .google.protobuf.UInt32Value remove_yellow_card = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_remove_yellow_card(), deterministic, target);
  }

  // optional .google.protobuf.UInt32Value remove_red_card = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_remove_red_card(), deterministic, target);
  }

  // optional .google.protobuf.UInt32Value remove_foul = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_remove_foul(), deterministic, target);
  }

  // optional .google.protobuf.BoolValue requests_timeout = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_requests_timeout(), deterministic, target);
  }

  // optional .google.protobuf.BoolValue requests_challenge = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_requests_challenge(), deterministic, target);
  }

  // optional .google.protobuf.BoolValue requests_emergency_stop = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_requests_emergency_stop(), deterministic, target);
  }

  // optional .YellowCard yellow_card = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_yellow_card(), deterministic, target);
  }

  // optional .google.protobuf.Int32Value challenge_flags_left = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_challenge_flags_left(), deterministic, target);
  }

  // optional .google.protobuf.Int32Value bot_substitutions_left = 22;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_bot_substitutions_left(), deterministic, target);
  }

  // optional .HullColor hull_color = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->hull_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.UpdateTeamState)
  return target;
}

size_t Change_UpdateTeamState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.UpdateTeamState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .google.protobuf.StringValue team_name = 2;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *team_name_);
    }

    // optional .google.protobuf.Int32Value goals = 3;
    if (has_goals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *goals_);
    }

    // optional .google.protobuf.Int32Value goalkeeper = 4;
    if (has_goalkeeper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *goalkeeper_);
    }

    // optional .google.protobuf.Int32Value timeouts_left = 5;
    if (has_timeouts_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *timeouts_left_);
    }

    // optional .google.protobuf.StringValue timeout_time_left = 6;
    if (has_timeout_time_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *timeout_time_left_);
    }

    // optional .google.protobuf.BoolValue on_positive_half = 7;
    if (has_on_positive_half()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *on_positive_half_);
    }

    // optional .google.protobuf.Int32Value ball_placement_failures = 8;
    if (has_ball_placement_failures()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ball_placement_failures_);
    }

    // optional .google.protobuf.BoolValue can_place_ball = 9;
    if (has_can_place_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *can_place_ball_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .google.protobuf.BoolValue requests_bot_substitution = 10;
    if (has_requests_bot_substitution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *requests_bot_substitution_);
    }

    // optional .RedCard red_card = 12;
    if (has_red_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *red_card_);
    }

    // optional .Foul foul = 13;
    if (has_foul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *foul_);
    }

    // optional .google.protobuf.UInt32Value remove_yellow_card = 14;
    if (has_remove_yellow_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *remove_yellow_card_);
    }

    // optional .google.protobuf.UInt32Value remove_red_card = 15;
    if (has_remove_red_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *remove_red_card_);
    }

    // optional .google.protobuf.UInt32Value remove_foul = 16;
    if (has_remove_foul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *remove_foul_);
    }

    // optional .google.protobuf.BoolValue requests_timeout = 17;
    if (has_requests_timeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *requests_timeout_);
    }

    // optional .google.protobuf.BoolValue requests_challenge = 18;
    if (has_requests_challenge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *requests_challenge_);
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional .google.protobuf.BoolValue requests_emergency_stop = 19;
    if (has_requests_emergency_stop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *requests_emergency_stop_);
    }

    // optional .YellowCard yellow_card = 20;
    if (has_yellow_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *yellow_card_);
    }

    // optional .google.protobuf.Int32Value challenge_flags_left = 21;
    if (has_challenge_flags_left()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *challenge_flags_left_);
    }

    // optional .google.protobuf.Int32Value bot_substitutions_left = 22;
    if (has_bot_substitutions_left()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bot_substitutions_left_);
    }

    // optional .Team for_team = 1;
    if (has_for_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->for_team());
    }

    // optional .HullColor hull_color = 23;
    if (has_hull_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hull_color());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_UpdateTeamState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.UpdateTeamState)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_UpdateTeamState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_UpdateTeamState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.UpdateTeamState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.UpdateTeamState)
    MergeFrom(*source);
  }
}

void Change_UpdateTeamState::MergeFrom(const Change_UpdateTeamState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.UpdateTeamState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team_name()->::google::protobuf::StringValue::MergeFrom(from.team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_goals()->::google::protobuf::Int32Value::MergeFrom(from.goals());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_goalkeeper()->::google::protobuf::Int32Value::MergeFrom(from.goalkeeper());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_timeouts_left()->::google::protobuf::Int32Value::MergeFrom(from.timeouts_left());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_timeout_time_left()->::google::protobuf::StringValue::MergeFrom(from.timeout_time_left());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_on_positive_half()->::google::protobuf::BoolValue::MergeFrom(from.on_positive_half());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_ball_placement_failures()->::google::protobuf::Int32Value::MergeFrom(from.ball_placement_failures());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_can_place_ball()->::google::protobuf::BoolValue::MergeFrom(from.can_place_ball());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_requests_bot_substitution()->::google::protobuf::BoolValue::MergeFrom(from.requests_bot_substitution());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_red_card()->::RedCard::MergeFrom(from.red_card());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_foul()->::Foul::MergeFrom(from.foul());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_remove_yellow_card()->::google::protobuf::UInt32Value::MergeFrom(from.remove_yellow_card());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_remove_red_card()->::google::protobuf::UInt32Value::MergeFrom(from.remove_red_card());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_remove_foul()->::google::protobuf::UInt32Value::MergeFrom(from.remove_foul());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_requests_timeout()->::google::protobuf::BoolValue::MergeFrom(from.requests_timeout());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_requests_challenge()->::google::protobuf::BoolValue::MergeFrom(from.requests_challenge());
    }
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_requests_emergency_stop()->::google::protobuf::BoolValue::MergeFrom(from.requests_emergency_stop());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_yellow_card()->::YellowCard::MergeFrom(from.yellow_card());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_challenge_flags_left()->::google::protobuf::Int32Value::MergeFrom(from.challenge_flags_left());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_bot_substitutions_left()->::google::protobuf::Int32Value::MergeFrom(from.bot_substitutions_left());
    }
    if (cached_has_bits & 0x00100000u) {
      for_team_ = from.for_team_;
    }
    if (cached_has_bits & 0x00200000u) {
      hull_color_ = from.hull_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Change_UpdateTeamState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.UpdateTeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_UpdateTeamState::CopyFrom(const Change_UpdateTeamState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.UpdateTeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_UpdateTeamState::IsInitialized() const {
  if (has_red_card()) {
    if (!this->red_card_->IsInitialized()) return false;
  }
  if (has_foul()) {
    if (!this->foul_->IsInitialized()) return false;
  }
  if (has_yellow_card()) {
    if (!this->yellow_card_->IsInitialized()) return false;
  }
  return true;
}

void Change_UpdateTeamState::Swap(Change_UpdateTeamState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_UpdateTeamState::InternalSwap(Change_UpdateTeamState* other) {
  using std::swap;
  swap(team_name_, other->team_name_);
  swap(goals_, other->goals_);
  swap(goalkeeper_, other->goalkeeper_);
  swap(timeouts_left_, other->timeouts_left_);
  swap(timeout_time_left_, other->timeout_time_left_);
  swap(on_positive_half_, other->on_positive_half_);
  swap(ball_placement_failures_, other->ball_placement_failures_);
  swap(can_place_ball_, other->can_place_ball_);
  swap(requests_bot_substitution_, other->requests_bot_substitution_);
  swap(red_card_, other->red_card_);
  swap(foul_, other->foul_);
  swap(remove_yellow_card_, other->remove_yellow_card_);
  swap(remove_red_card_, other->remove_red_card_);
  swap(remove_foul_, other->remove_foul_);
  swap(requests_timeout_, other->requests_timeout_);
  swap(requests_challenge_, other->requests_challenge_);
  swap(requests_emergency_stop_, other->requests_emergency_stop_);
  swap(yellow_card_, other->yellow_card_);
  swap(challenge_flags_left_, other->challenge_flags_left_);
  swap(bot_substitutions_left_, other->bot_substitutions_left_);
  swap(for_team_, other->for_team_);
  swap(hull_color_, other->hull_color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_UpdateTeamState::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_SwitchColors::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_SwitchColors::Change_SwitchColors()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_SwitchColors.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.SwitchColors)
}
Change_SwitchColors::Change_SwitchColors(const Change_SwitchColors& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Change.SwitchColors)
}

void Change_SwitchColors::SharedCtor() {
}

Change_SwitchColors::~Change_SwitchColors() {
  // @@protoc_insertion_point(destructor:Change.SwitchColors)
  SharedDtor();
}

void Change_SwitchColors::SharedDtor() {
}

void Change_SwitchColors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_SwitchColors::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_SwitchColors& Change_SwitchColors::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_SwitchColors.base);
  return *internal_default_instance();
}


void Change_SwitchColors::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.SwitchColors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_SwitchColors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.SwitchColors)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:Change.SwitchColors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.SwitchColors)
  return false;
#undef DO_
}

void Change_SwitchColors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.SwitchColors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.SwitchColors)
}

::google::protobuf::uint8* Change_SwitchColors::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.SwitchColors)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.SwitchColors)
  return target;
}

size_t Change_SwitchColors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.SwitchColors)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_SwitchColors::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.SwitchColors)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_SwitchColors* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_SwitchColors>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.SwitchColors)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.SwitchColors)
    MergeFrom(*source);
  }
}

void Change_SwitchColors::MergeFrom(const Change_SwitchColors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.SwitchColors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Change_SwitchColors::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.SwitchColors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_SwitchColors::CopyFrom(const Change_SwitchColors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.SwitchColors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_SwitchColors::IsInitialized() const {
  return true;
}

void Change_SwitchColors::Swap(Change_SwitchColors* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_SwitchColors::InternalSwap(Change_SwitchColors* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_SwitchColors::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_Revert::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_Revert::kChangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_Revert::Change_Revert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_Revert.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.Revert)
}
Change_Revert::Change_Revert(const Change_Revert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  change_id_ = from.change_id_;
  // @@protoc_insertion_point(copy_constructor:Change.Revert)
}

void Change_Revert::SharedCtor() {
  change_id_ = 0;
}

Change_Revert::~Change_Revert() {
  // @@protoc_insertion_point(destructor:Change.Revert)
  SharedDtor();
}

void Change_Revert::SharedDtor() {
}

void Change_Revert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_Revert::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_Revert& Change_Revert::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_Revert.base);
  return *internal_default_instance();
}


void Change_Revert::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.Revert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  change_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_Revert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.Revert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 change_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_change_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.Revert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.Revert)
  return false;
#undef DO_
}

void Change_Revert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.Revert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 change_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->change_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.Revert)
}

::google::protobuf::uint8* Change_Revert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.Revert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 change_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->change_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.Revert)
  return target;
}

size_t Change_Revert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.Revert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 change_id = 1;
  if (has_change_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->change_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_Revert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.Revert)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_Revert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_Revert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.Revert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.Revert)
    MergeFrom(*source);
  }
}

void Change_Revert::MergeFrom(const Change_Revert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.Revert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_change_id()) {
    set_change_id(from.change_id());
  }
}

void Change_Revert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.Revert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_Revert::CopyFrom(const Change_Revert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.Revert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_Revert::IsInitialized() const {
  return true;
}

void Change_Revert::Swap(Change_Revert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_Revert::InternalSwap(Change_Revert* other) {
  using std::swap;
  swap(change_id_, other->change_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_Revert::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_NewGameState::InitAsDefaultInstance() {
  ::_Change_NewGameState_default_instance_._instance.get_mutable()->game_state_ = const_cast< ::GameState*>(
      ::GameState::internal_default_instance());
}
void Change_NewGameState::clear_game_state() {
  if (game_state_ != NULL) game_state_->Clear();
  clear_has_game_state();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_NewGameState::kGameStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_NewGameState::Change_NewGameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_NewGameState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.NewGameState)
}
Change_NewGameState::Change_NewGameState(const Change_NewGameState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_game_state()) {
    game_state_ = new ::GameState(*from.game_state_);
  } else {
    game_state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Change.NewGameState)
}

void Change_NewGameState::SharedCtor() {
  game_state_ = NULL;
}

Change_NewGameState::~Change_NewGameState() {
  // @@protoc_insertion_point(destructor:Change.NewGameState)
  SharedDtor();
}

void Change_NewGameState::SharedDtor() {
  if (this != internal_default_instance()) delete game_state_;
}

void Change_NewGameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_NewGameState::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_NewGameState& Change_NewGameState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_NewGameState.base);
  return *internal_default_instance();
}


void Change_NewGameState::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.NewGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_state_ != NULL);
    game_state_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_NewGameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.NewGameState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GameState game_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.NewGameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.NewGameState)
  return false;
#undef DO_
}

void Change_NewGameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.NewGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GameState game_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_game_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.NewGameState)
}

::google::protobuf::uint8* Change_NewGameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.NewGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GameState game_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_game_state(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.NewGameState)
  return target;
}

size_t Change_NewGameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.NewGameState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .GameState game_state = 1;
  if (has_game_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *game_state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_NewGameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.NewGameState)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_NewGameState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_NewGameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.NewGameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.NewGameState)
    MergeFrom(*source);
  }
}

void Change_NewGameState::MergeFrom(const Change_NewGameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.NewGameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_game_state()) {
    mutable_game_state()->::GameState::MergeFrom(from.game_state());
  }
}

void Change_NewGameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.NewGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_NewGameState::CopyFrom(const Change_NewGameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.NewGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_NewGameState::IsInitialized() const {
  if (has_game_state()) {
    if (!this->game_state_->IsInitialized()) return false;
  }
  return true;
}

void Change_NewGameState::Swap(Change_NewGameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_NewGameState::InternalSwap(Change_NewGameState* other) {
  using std::swap;
  swap(game_state_, other->game_state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_NewGameState::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change_SetStatusMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change_SetStatusMessage::kStatusMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change_SetStatusMessage::Change_SetStatusMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_SetStatusMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change.SetStatusMessage)
}
Change_SetStatusMessage::Change_SetStatusMessage(const Change_SetStatusMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_status_message()) {
    status_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_message_);
  }
  // @@protoc_insertion_point(copy_constructor:Change.SetStatusMessage)
}

void Change_SetStatusMessage::SharedCtor() {
  status_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Change_SetStatusMessage::~Change_SetStatusMessage() {
  // @@protoc_insertion_point(destructor:Change.SetStatusMessage)
  SharedDtor();
}

void Change_SetStatusMessage::SharedDtor() {
  status_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Change_SetStatusMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change_SetStatusMessage::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change_SetStatusMessage& Change_SetStatusMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change_SetStatusMessage.base);
  return *internal_default_instance();
}


void Change_SetStatusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Change.SetStatusMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    status_message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change_SetStatusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change.SetStatusMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string status_message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_message().data(), static_cast<int>(this->status_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Change.SetStatusMessage.status_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change.SetStatusMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change.SetStatusMessage)
  return false;
#undef DO_
}

void Change_SetStatusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change.SetStatusMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string status_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_message().data(), static_cast<int>(this->status_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Change.SetStatusMessage.status_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->status_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change.SetStatusMessage)
}

::google::protobuf::uint8* Change_SetStatusMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change.SetStatusMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string status_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_message().data(), static_cast<int>(this->status_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Change.SetStatusMessage.status_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->status_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change.SetStatusMessage)
  return target;
}

size_t Change_SetStatusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change.SetStatusMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string status_message = 1;
  if (has_status_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status_message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change_SetStatusMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change.SetStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Change_SetStatusMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change_SetStatusMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change.SetStatusMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change.SetStatusMessage)
    MergeFrom(*source);
  }
}

void Change_SetStatusMessage::MergeFrom(const Change_SetStatusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change.SetStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status_message()) {
    set_has_status_message();
    status_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_message_);
  }
}

void Change_SetStatusMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change.SetStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change_SetStatusMessage::CopyFrom(const Change_SetStatusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change.SetStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change_SetStatusMessage::IsInitialized() const {
  return true;
}

void Change_SetStatusMessage::Swap(Change_SetStatusMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change_SetStatusMessage::InternalSwap(Change_SetStatusMessage* other) {
  using std::swap;
  status_message_.Swap(&other->status_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change_SetStatusMessage::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Change::InitAsDefaultInstance() {
  ::_Change_default_instance_.new_command_change_ = const_cast< ::Change_NewCommand*>(
      ::Change_NewCommand::internal_default_instance());
  ::_Change_default_instance_.change_stage_change_ = const_cast< ::Change_ChangeStage*>(
      ::Change_ChangeStage::internal_default_instance());
  ::_Change_default_instance_.set_ball_placement_pos_change_ = const_cast< ::Change_SetBallPlacementPos*>(
      ::Change_SetBallPlacementPos::internal_default_instance());
  ::_Change_default_instance_.add_yellow_card_change_ = const_cast< ::Change_AddYellowCard*>(
      ::Change_AddYellowCard::internal_default_instance());
  ::_Change_default_instance_.add_red_card_change_ = const_cast< ::Change_AddRedCard*>(
      ::Change_AddRedCard::internal_default_instance());
  ::_Change_default_instance_.yellow_card_over_change_ = const_cast< ::Change_YellowCardOver*>(
      ::Change_YellowCardOver::internal_default_instance());
  ::_Change_default_instance_.add_game_event_change_ = const_cast< ::Change_AddGameEvent*>(
      ::Change_AddGameEvent::internal_default_instance());
  ::_Change_default_instance_.add_passive_game_event_change_ = const_cast< ::Change_AddPassiveGameEvent*>(
      ::Change_AddPassiveGameEvent::internal_default_instance());
  ::_Change_default_instance_.add_proposal_change_ = const_cast< ::Change_AddProposal*>(
      ::Change_AddProposal::internal_default_instance());
  ::_Change_default_instance_.update_config_change_ = const_cast< ::Change_UpdateConfig*>(
      ::Change_UpdateConfig::internal_default_instance());
  ::_Change_default_instance_.update_team_state_change_ = const_cast< ::Change_UpdateTeamState*>(
      ::Change_UpdateTeamState::internal_default_instance());
  ::_Change_default_instance_.switch_colors_change_ = const_cast< ::Change_SwitchColors*>(
      ::Change_SwitchColors::internal_default_instance());
  ::_Change_default_instance_.revert_change_ = const_cast< ::Change_Revert*>(
      ::Change_Revert::internal_default_instance());
  ::_Change_default_instance_.new_game_state_change_ = const_cast< ::Change_NewGameState*>(
      ::Change_NewGameState::internal_default_instance());
  ::_Change_default_instance_.accept_proposal_group_change_ = const_cast< ::Change_AcceptProposalGroup*>(
      ::Change_AcceptProposalGroup::internal_default_instance());
  ::_Change_default_instance_.set_status_message_change_ = const_cast< ::Change_SetStatusMessage*>(
      ::Change_SetStatusMessage::internal_default_instance());
}
void Change::set_allocated_new_command_change(::Change_NewCommand* new_command_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (new_command_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_command_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_command_change, submessage_arena);
    }
    set_has_new_command_change();
    change_.new_command_change_ = new_command_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.new_command_change)
}
void Change::set_allocated_change_stage_change(::Change_ChangeStage* change_stage_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (change_stage_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      change_stage_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, change_stage_change, submessage_arena);
    }
    set_has_change_stage_change();
    change_.change_stage_change_ = change_stage_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.change_stage_change)
}
void Change::set_allocated_set_ball_placement_pos_change(::Change_SetBallPlacementPos* set_ball_placement_pos_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (set_ball_placement_pos_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_ball_placement_pos_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_ball_placement_pos_change, submessage_arena);
    }
    set_has_set_ball_placement_pos_change();
    change_.set_ball_placement_pos_change_ = set_ball_placement_pos_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.set_ball_placement_pos_change)
}
void Change::set_allocated_add_yellow_card_change(::Change_AddYellowCard* add_yellow_card_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (add_yellow_card_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_yellow_card_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_yellow_card_change, submessage_arena);
    }
    set_has_add_yellow_card_change();
    change_.add_yellow_card_change_ = add_yellow_card_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_yellow_card_change)
}
void Change::set_allocated_add_red_card_change(::Change_AddRedCard* add_red_card_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (add_red_card_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_red_card_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_red_card_change, submessage_arena);
    }
    set_has_add_red_card_change();
    change_.add_red_card_change_ = add_red_card_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_red_card_change)
}
void Change::set_allocated_yellow_card_over_change(::Change_YellowCardOver* yellow_card_over_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (yellow_card_over_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      yellow_card_over_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, yellow_card_over_change, submessage_arena);
    }
    set_has_yellow_card_over_change();
    change_.yellow_card_over_change_ = yellow_card_over_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.yellow_card_over_change)
}
void Change::set_allocated_add_game_event_change(::Change_AddGameEvent* add_game_event_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (add_game_event_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_game_event_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_game_event_change, submessage_arena);
    }
    set_has_add_game_event_change();
    change_.add_game_event_change_ = add_game_event_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_game_event_change)
}
void Change::set_allocated_add_passive_game_event_change(::Change_AddPassiveGameEvent* add_passive_game_event_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (add_passive_game_event_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_passive_game_event_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_passive_game_event_change, submessage_arena);
    }
    set_has_add_passive_game_event_change();
    change_.add_passive_game_event_change_ = add_passive_game_event_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_passive_game_event_change)
}
void Change::set_allocated_add_proposal_change(::Change_AddProposal* add_proposal_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (add_proposal_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      add_proposal_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, add_proposal_change, submessage_arena);
    }
    set_has_add_proposal_change();
    change_.add_proposal_change_ = add_proposal_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.add_proposal_change)
}
void Change::set_allocated_update_config_change(::Change_UpdateConfig* update_config_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (update_config_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_config_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_config_change, submessage_arena);
    }
    set_has_update_config_change();
    change_.update_config_change_ = update_config_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.update_config_change)
}
void Change::set_allocated_update_team_state_change(::Change_UpdateTeamState* update_team_state_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (update_team_state_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_team_state_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_team_state_change, submessage_arena);
    }
    set_has_update_team_state_change();
    change_.update_team_state_change_ = update_team_state_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.update_team_state_change)
}
void Change::set_allocated_switch_colors_change(::Change_SwitchColors* switch_colors_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (switch_colors_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      switch_colors_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, switch_colors_change, submessage_arena);
    }
    set_has_switch_colors_change();
    change_.switch_colors_change_ = switch_colors_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.switch_colors_change)
}
void Change::set_allocated_revert_change(::Change_Revert* revert_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (revert_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      revert_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, revert_change, submessage_arena);
    }
    set_has_revert_change();
    change_.revert_change_ = revert_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.revert_change)
}
void Change::set_allocated_new_game_state_change(::Change_NewGameState* new_game_state_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (new_game_state_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_game_state_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_game_state_change, submessage_arena);
    }
    set_has_new_game_state_change();
    change_.new_game_state_change_ = new_game_state_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.new_game_state_change)
}
void Change::set_allocated_accept_proposal_group_change(::Change_AcceptProposalGroup* accept_proposal_group_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (accept_proposal_group_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accept_proposal_group_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accept_proposal_group_change, submessage_arena);
    }
    set_has_accept_proposal_group_change();
    change_.accept_proposal_group_change_ = accept_proposal_group_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.accept_proposal_group_change)
}
void Change::set_allocated_set_status_message_change(::Change_SetStatusMessage* set_status_message_change) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_change();
  if (set_status_message_change) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      set_status_message_change = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_status_message_change, submessage_arena);
    }
    set_has_set_status_message_change();
    change_.set_status_message_change_ = set_status_message_change;
  }
  // @@protoc_insertion_point(field_set_allocated:Change.set_status_message_change)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Change::kOriginFieldNumber;
const int Change::kRevertibleFieldNumber;
const int Change::kNewCommandChangeFieldNumber;
const int Change::kChangeStageChangeFieldNumber;
const int Change::kSetBallPlacementPosChangeFieldNumber;
const int Change::kAddYellowCardChangeFieldNumber;
const int Change::kAddRedCardChangeFieldNumber;
const int Change::kYellowCardOverChangeFieldNumber;
const int Change::kAddGameEventChangeFieldNumber;
const int Change::kAddPassiveGameEventChangeFieldNumber;
const int Change::kAddProposalChangeFieldNumber;
const int Change::kUpdateConfigChangeFieldNumber;
const int Change::kUpdateTeamStateChangeFieldNumber;
const int Change::kSwitchColorsChangeFieldNumber;
const int Change::kRevertChangeFieldNumber;
const int Change::kNewGameStateChangeFieldNumber;
const int Change::kAcceptProposalGroupChangeFieldNumber;
const int Change::kSetStatusMessageChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Change::Change()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Change)
}
Change::Change(const Change& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_origin()) {
    origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
  }
  revertible_ = from.revertible_;
  clear_has_change();
  switch (from.change_case()) {
    case kNewCommandChange: {
      mutable_new_command_change()->::Change_NewCommand::MergeFrom(from.new_command_change());
      break;
    }
    case kChangeStageChange: {
      mutable_change_stage_change()->::Change_ChangeStage::MergeFrom(from.change_stage_change());
      break;
    }
    case kSetBallPlacementPosChange: {
      mutable_set_ball_placement_pos_change()->::Change_SetBallPlacementPos::MergeFrom(from.set_ball_placement_pos_change());
      break;
    }
    case kAddYellowCardChange: {
      mutable_add_yellow_card_change()->::Change_AddYellowCard::MergeFrom(from.add_yellow_card_change());
      break;
    }
    case kAddRedCardChange: {
      mutable_add_red_card_change()->::Change_AddRedCard::MergeFrom(from.add_red_card_change());
      break;
    }
    case kYellowCardOverChange: {
      mutable_yellow_card_over_change()->::Change_YellowCardOver::MergeFrom(from.yellow_card_over_change());
      break;
    }
    case kAddGameEventChange: {
      mutable_add_game_event_change()->::Change_AddGameEvent::MergeFrom(from.add_game_event_change());
      break;
    }
    case kAddPassiveGameEventChange: {
      mutable_add_passive_game_event_change()->::Change_AddPassiveGameEvent::MergeFrom(from.add_passive_game_event_change());
      break;
    }
    case kAddProposalChange: {
      mutable_add_proposal_change()->::Change_AddProposal::MergeFrom(from.add_proposal_change());
      break;
    }
    case kUpdateConfigChange: {
      mutable_update_config_change()->::Change_UpdateConfig::MergeFrom(from.update_config_change());
      break;
    }
    case kUpdateTeamStateChange: {
      mutable_update_team_state_change()->::Change_UpdateTeamState::MergeFrom(from.update_team_state_change());
      break;
    }
    case kSwitchColorsChange: {
      mutable_switch_colors_change()->::Change_SwitchColors::MergeFrom(from.switch_colors_change());
      break;
    }
    case kRevertChange: {
      mutable_revert_change()->::Change_Revert::MergeFrom(from.revert_change());
      break;
    }
    case kNewGameStateChange: {
      mutable_new_game_state_change()->::Change_NewGameState::MergeFrom(from.new_game_state_change());
      break;
    }
    case kAcceptProposalGroupChange: {
      mutable_accept_proposal_group_change()->::Change_AcceptProposalGroup::MergeFrom(from.accept_proposal_group_change());
      break;
    }
    case kSetStatusMessageChange: {
      mutable_set_status_message_change()->::Change_SetStatusMessage::MergeFrom(from.set_status_message_change());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Change)
}

void Change::SharedCtor() {
  origin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revertible_ = false;
  clear_has_change();
}

Change::~Change() {
  // @@protoc_insertion_point(destructor:Change)
  SharedDtor();
}

void Change::SharedDtor() {
  origin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_change()) {
    clear_change();
  }
}

void Change::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Change::descriptor() {
  ::protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Change& Change::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fchange_2eproto::scc_info_Change.base);
  return *internal_default_instance();
}


void Change::clear_change() {
// @@protoc_insertion_point(one_of_clear_start:Change)
  switch (change_case()) {
    case kNewCommandChange: {
      delete change_.new_command_change_;
      break;
    }
    case kChangeStageChange: {
      delete change_.change_stage_change_;
      break;
    }
    case kSetBallPlacementPosChange: {
      delete change_.set_ball_placement_pos_change_;
      break;
    }
    case kAddYellowCardChange: {
      delete change_.add_yellow_card_change_;
      break;
    }
    case kAddRedCardChange: {
      delete change_.add_red_card_change_;
      break;
    }
    case kYellowCardOverChange: {
      delete change_.yellow_card_over_change_;
      break;
    }
    case kAddGameEventChange: {
      delete change_.add_game_event_change_;
      break;
    }
    case kAddPassiveGameEventChange: {
      delete change_.add_passive_game_event_change_;
      break;
    }
    case kAddProposalChange: {
      delete change_.add_proposal_change_;
      break;
    }
    case kUpdateConfigChange: {
      delete change_.update_config_change_;
      break;
    }
    case kUpdateTeamStateChange: {
      delete change_.update_team_state_change_;
      break;
    }
    case kSwitchColorsChange: {
      delete change_.switch_colors_change_;
      break;
    }
    case kRevertChange: {
      delete change_.revert_change_;
      break;
    }
    case kNewGameStateChange: {
      delete change_.new_game_state_change_;
      break;
    }
    case kAcceptProposalGroupChange: {
      delete change_.accept_proposal_group_change_;
      break;
    }
    case kSetStatusMessageChange: {
      delete change_.set_status_message_change_;
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANGE_NOT_SET;
}


void Change::Clear() {
// @@protoc_insertion_point(message_clear_start:Change)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    origin_.ClearNonDefaultToEmptyNoArena();
  }
  revertible_ = false;
  clear_change();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Change)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->origin().data(), static_cast<int>(this->origin().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Change.origin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.NewCommand new_command_change = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_command_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.ChangeStage change_stage_change = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_stage_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.SetBallPlacementPos set_ball_placement_pos_change = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_ball_placement_pos_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.AddYellowCard add_yellow_card_change = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_yellow_card_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.AddRedCard add_red_card_change = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_red_card_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.YellowCardOver yellow_card_over_change = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yellow_card_over_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.AddGameEvent add_game_event_change = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_game_event_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.AddProposal add_proposal_change = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_proposal_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.UpdateConfig update_config_change = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_config_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.UpdateTeamState update_team_state_change = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_team_state_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.SwitchColors switch_colors_change = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_switch_colors_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.Revert revert_change = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_revert_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool revertible = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_revertible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &revertible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.NewGameState new_game_state_change = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_game_state_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.AcceptProposalGroup accept_proposal_group_change = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accept_proposal_group_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.AddPassiveGameEvent add_passive_game_event_change = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_passive_game_event_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Change.SetStatusMessage set_status_message_change = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_status_message_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Change)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Change)
  return false;
#undef DO_
}

void Change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Change)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin().data(), static_cast<int>(this->origin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Change.origin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->origin(), output);
  }

  switch (change_case()) {
    case kNewCommandChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_new_command_change(), output);
      break;
    case kChangeStageChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_change_stage_change(), output);
      break;
    case kSetBallPlacementPosChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_set_ball_placement_pos_change(), output);
      break;
    case kAddYellowCardChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_add_yellow_card_change(), output);
      break;
    case kAddRedCardChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_add_red_card_change(), output);
      break;
    case kYellowCardOverChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_yellow_card_over_change(), output);
      break;
    case kAddGameEventChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_add_game_event_change(), output);
      break;
    case kAddProposalChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_add_proposal_change(), output);
      break;
    case kUpdateConfigChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, this->_internal_update_config_change(), output);
      break;
    case kUpdateTeamStateChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, this->_internal_update_team_state_change(), output);
      break;
    case kSwitchColorsChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, this->_internal_switch_colors_change(), output);
      break;
    case kRevertChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, this->_internal_revert_change(), output);
      break;
    default: ;
  }
  // optional bool revertible = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->revertible(), output);
  }

  switch (change_case()) {
    case kNewGameStateChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, this->_internal_new_game_state_change(), output);
      break;
    case kAcceptProposalGroupChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, this->_internal_accept_proposal_group_change(), output);
      break;
    case kAddPassiveGameEventChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, this->_internal_add_passive_game_event_change(), output);
      break;
    case kSetStatusMessageChange:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, this->_internal_set_status_message_change(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Change)
}

::google::protobuf::uint8* Change::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Change)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->origin().data(), static_cast<int>(this->origin().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Change.origin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->origin(), target);
  }

  switch (change_case()) {
    case kNewCommandChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_new_command_change(), deterministic, target);
      break;
    case kChangeStageChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_change_stage_change(), deterministic, target);
      break;
    case kSetBallPlacementPosChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_set_ball_placement_pos_change(), deterministic, target);
      break;
    case kAddYellowCardChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_add_yellow_card_change(), deterministic, target);
      break;
    case kAddRedCardChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_add_red_card_change(), deterministic, target);
      break;
    case kYellowCardOverChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_yellow_card_over_change(), deterministic, target);
      break;
    case kAddGameEventChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_add_game_event_change(), deterministic, target);
      break;
    case kAddProposalChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_add_proposal_change(), deterministic, target);
      break;
    case kUpdateConfigChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, this->_internal_update_config_change(), deterministic, target);
      break;
    case kUpdateTeamStateChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, this->_internal_update_team_state_change(), deterministic, target);
      break;
    case kSwitchColorsChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          14, this->_internal_switch_colors_change(), deterministic, target);
      break;
    case kRevertChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          15, this->_internal_revert_change(), deterministic, target);
      break;
    default: ;
  }
  // optional bool revertible = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->revertible(), target);
  }

  switch (change_case()) {
    case kNewGameStateChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          17, this->_internal_new_game_state_change(), deterministic, target);
      break;
    case kAcceptProposalGroupChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          18, this->_internal_accept_proposal_group_change(), deterministic, target);
      break;
    case kAddPassiveGameEventChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          19, this->_internal_add_passive_game_event_change(), deterministic, target);
      break;
    case kSetStatusMessageChange:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          20, this->_internal_set_status_message_change(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Change)
  return target;
}

size_t Change::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Change)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin());
    }

    // optional bool revertible = 16;
    if (has_revertible()) {
      total_size += 2 + 1;
    }

  }
  switch (change_case()) {
    // optional .Change.NewCommand new_command_change = 2;
    case kNewCommandChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.new_command_change_);
      break;
    }
    // optional .Change.ChangeStage change_stage_change = 3;
    case kChangeStageChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.change_stage_change_);
      break;
    }
    // optional .Change.SetBallPlacementPos set_ball_placement_pos_change = 4;
    case kSetBallPlacementPosChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.set_ball_placement_pos_change_);
      break;
    }
    // optional .Change.AddYellowCard add_yellow_card_change = 5;
    case kAddYellowCardChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.add_yellow_card_change_);
      break;
    }
    // optional .Change.AddRedCard add_red_card_change = 6;
    case kAddRedCardChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.add_red_card_change_);
      break;
    }
    // optional .Change.YellowCardOver yellow_card_over_change = 7;
    case kYellowCardOverChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.yellow_card_over_change_);
      break;
    }
    // optional .Change.AddGameEvent add_game_event_change = 8;
    case kAddGameEventChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.add_game_event_change_);
      break;
    }
    // optional .Change.AddPassiveGameEvent add_passive_game_event_change = 19;
    case kAddPassiveGameEventChange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.add_passive_game_event_change_);
      break;
    }
    // optional .Change.AddProposal add_proposal_change = 9;
    case kAddProposalChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.add_proposal_change_);
      break;
    }
    // optional .Change.UpdateConfig update_config_change = 12;
    case kUpdateConfigChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.update_config_change_);
      break;
    }
    // optional .Change.UpdateTeamState update_team_state_change = 13;
    case kUpdateTeamStateChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.update_team_state_change_);
      break;
    }
    // optional .Change.SwitchColors switch_colors_change = 14;
    case kSwitchColorsChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.switch_colors_change_);
      break;
    }
    // optional .Change.Revert revert_change = 15;
    case kRevertChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.revert_change_);
      break;
    }
    // optional .Change.NewGameState new_game_state_change = 17;
    case kNewGameStateChange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.new_game_state_change_);
      break;
    }
    // optional .Change.AcceptProposalGroup accept_proposal_group_change = 18;
    case kAcceptProposalGroupChange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.accept_proposal_group_change_);
      break;
    }
    // optional .Change.SetStatusMessage set_status_message_change = 20;
    case kSetStatusMessageChange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_.set_status_message_change_);
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Change)
  GOOGLE_DCHECK_NE(&from, this);
  const Change* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Change>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Change)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Change)
    MergeFrom(*source);
  }
}

void Change::MergeFrom(const Change& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Change)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_origin();
      origin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_);
    }
    if (cached_has_bits & 0x00000002u) {
      revertible_ = from.revertible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.change_case()) {
    case kNewCommandChange: {
      mutable_new_command_change()->::Change_NewCommand::MergeFrom(from.new_command_change());
      break;
    }
    case kChangeStageChange: {
      mutable_change_stage_change()->::Change_ChangeStage::MergeFrom(from.change_stage_change());
      break;
    }
    case kSetBallPlacementPosChange: {
      mutable_set_ball_placement_pos_change()->::Change_SetBallPlacementPos::MergeFrom(from.set_ball_placement_pos_change());
      break;
    }
    case kAddYellowCardChange: {
      mutable_add_yellow_card_change()->::Change_AddYellowCard::MergeFrom(from.add_yellow_card_change());
      break;
    }
    case kAddRedCardChange: {
      mutable_add_red_card_change()->::Change_AddRedCard::MergeFrom(from.add_red_card_change());
      break;
    }
    case kYellowCardOverChange: {
      mutable_yellow_card_over_change()->::Change_YellowCardOver::MergeFrom(from.yellow_card_over_change());
      break;
    }
    case kAddGameEventChange: {
      mutable_add_game_event_change()->::Change_AddGameEvent::MergeFrom(from.add_game_event_change());
      break;
    }
    case kAddPassiveGameEventChange: {
      mutable_add_passive_game_event_change()->::Change_AddPassiveGameEvent::MergeFrom(from.add_passive_game_event_change());
      break;
    }
    case kAddProposalChange: {
      mutable_add_proposal_change()->::Change_AddProposal::MergeFrom(from.add_proposal_change());
      break;
    }
    case kUpdateConfigChange: {
      mutable_update_config_change()->::Change_UpdateConfig::MergeFrom(from.update_config_change());
      break;
    }
    case kUpdateTeamStateChange: {
      mutable_update_team_state_change()->::Change_UpdateTeamState::MergeFrom(from.update_team_state_change());
      break;
    }
    case kSwitchColorsChange: {
      mutable_switch_colors_change()->::Change_SwitchColors::MergeFrom(from.switch_colors_change());
      break;
    }
    case kRevertChange: {
      mutable_revert_change()->::Change_Revert::MergeFrom(from.revert_change());
      break;
    }
    case kNewGameStateChange: {
      mutable_new_game_state_change()->::Change_NewGameState::MergeFrom(from.new_game_state_change());
      break;
    }
    case kAcceptProposalGroupChange: {
      mutable_accept_proposal_group_change()->::Change_AcceptProposalGroup::MergeFrom(from.accept_proposal_group_change());
      break;
    }
    case kSetStatusMessageChange: {
      mutable_set_status_message_change()->::Change_SetStatusMessage::MergeFrom(from.set_status_message_change());
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
}

void Change::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change::CopyFrom(const Change& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change::IsInitialized() const {
  switch (change_case()) {
    case kNewCommandChange: {
      if (has_new_command_change()) {
        if (!this->new_command_change().IsInitialized()) return false;
      }
      break;
    }
    case kChangeStageChange: {
      break;
    }
    case kSetBallPlacementPosChange: {
      if (has_set_ball_placement_pos_change()) {
        if (!this->set_ball_placement_pos_change().IsInitialized()) return false;
      }
      break;
    }
    case kAddYellowCardChange: {
      if (has_add_yellow_card_change()) {
        if (!this->add_yellow_card_change().IsInitialized()) return false;
      }
      break;
    }
    case kAddRedCardChange: {
      if (has_add_red_card_change()) {
        if (!this->add_red_card_change().IsInitialized()) return false;
      }
      break;
    }
    case kYellowCardOverChange: {
      break;
    }
    case kAddGameEventChange: {
      if (has_add_game_event_change()) {
        if (!this->add_game_event_change().IsInitialized()) return false;
      }
      break;
    }
    case kAddPassiveGameEventChange: {
      if (has_add_passive_game_event_change()) {
        if (!this->add_passive_game_event_change().IsInitialized()) return false;
      }
      break;
    }
    case kAddProposalChange: {
      if (has_add_proposal_change()) {
        if (!this->add_proposal_change().IsInitialized()) return false;
      }
      break;
    }
    case kUpdateConfigChange: {
      break;
    }
    case kUpdateTeamStateChange: {
      if (has_update_team_state_change()) {
        if (!this->update_team_state_change().IsInitialized()) return false;
      }
      break;
    }
    case kSwitchColorsChange: {
      break;
    }
    case kRevertChange: {
      break;
    }
    case kNewGameStateChange: {
      if (has_new_game_state_change()) {
        if (!this->new_game_state_change().IsInitialized()) return false;
      }
      break;
    }
    case kAcceptProposalGroupChange: {
      break;
    }
    case kSetStatusMessageChange: {
      break;
    }
    case CHANGE_NOT_SET: {
      break;
    }
  }
  return true;
}

void Change::Swap(Change* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Change::InternalSwap(Change* other) {
  using std::swap;
  origin_.Swap(&other->origin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(revertible_, other->revertible_);
  swap(change_, other->change_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Change::GetMetadata() const {
  protobuf_ssl_5fgc_5fchange_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fchange_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::StateChange* Arena::CreateMaybeMessage< ::StateChange >(Arena* arena) {
  return Arena::CreateInternal< ::StateChange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_NewCommand* Arena::CreateMaybeMessage< ::Change_NewCommand >(Arena* arena) {
  return Arena::CreateInternal< ::Change_NewCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_ChangeStage* Arena::CreateMaybeMessage< ::Change_ChangeStage >(Arena* arena) {
  return Arena::CreateInternal< ::Change_ChangeStage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_SetBallPlacementPos* Arena::CreateMaybeMessage< ::Change_SetBallPlacementPos >(Arena* arena) {
  return Arena::CreateInternal< ::Change_SetBallPlacementPos >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_AddYellowCard* Arena::CreateMaybeMessage< ::Change_AddYellowCard >(Arena* arena) {
  return Arena::CreateInternal< ::Change_AddYellowCard >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_AddRedCard* Arena::CreateMaybeMessage< ::Change_AddRedCard >(Arena* arena) {
  return Arena::CreateInternal< ::Change_AddRedCard >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_YellowCardOver* Arena::CreateMaybeMessage< ::Change_YellowCardOver >(Arena* arena) {
  return Arena::CreateInternal< ::Change_YellowCardOver >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_AddGameEvent* Arena::CreateMaybeMessage< ::Change_AddGameEvent >(Arena* arena) {
  return Arena::CreateInternal< ::Change_AddGameEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_AddPassiveGameEvent* Arena::CreateMaybeMessage< ::Change_AddPassiveGameEvent >(Arena* arena) {
  return Arena::CreateInternal< ::Change_AddPassiveGameEvent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_AddProposal* Arena::CreateMaybeMessage< ::Change_AddProposal >(Arena* arena) {
  return Arena::CreateInternal< ::Change_AddProposal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_AcceptProposalGroup* Arena::CreateMaybeMessage< ::Change_AcceptProposalGroup >(Arena* arena) {
  return Arena::CreateInternal< ::Change_AcceptProposalGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_UpdateConfig* Arena::CreateMaybeMessage< ::Change_UpdateConfig >(Arena* arena) {
  return Arena::CreateInternal< ::Change_UpdateConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_UpdateTeamState* Arena::CreateMaybeMessage< ::Change_UpdateTeamState >(Arena* arena) {
  return Arena::CreateInternal< ::Change_UpdateTeamState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_SwitchColors* Arena::CreateMaybeMessage< ::Change_SwitchColors >(Arena* arena) {
  return Arena::CreateInternal< ::Change_SwitchColors >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_Revert* Arena::CreateMaybeMessage< ::Change_Revert >(Arena* arena) {
  return Arena::CreateInternal< ::Change_Revert >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_NewGameState* Arena::CreateMaybeMessage< ::Change_NewGameState >(Arena* arena) {
  return Arena::CreateInternal< ::Change_NewGameState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change_SetStatusMessage* Arena::CreateMaybeMessage< ::Change_SetStatusMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Change_SetStatusMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Change* Arena::CreateMaybeMessage< ::Change >(Arena* arena) {
  return Arena::CreateInternal< ::Change >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
