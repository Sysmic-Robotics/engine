// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_state.proto

#include "ssl_gc_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fduration_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fduration_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Duration;
}  // namespace protobuf_google_2fprotobuf_2fduration_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace protobuf_ssl_5fgc_5fgame_5fevent_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fgame_5fevent_2eproto ::google::protobuf::internal::SCCInfo<40> scc_info_GameEvent;
}  // namespace protobuf_ssl_5fgc_5fgame_5fevent_2eproto
namespace protobuf_ssl_5fgc_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector2;
}  // namespace protobuf_ssl_5fgc_5fgeometry_2eproto
namespace protobuf_ssl_5fgc_5fstate_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Command;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ShootoutState_NumberOfAttemptsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ProposalGroup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RedCard;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ShootoutState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_State_TeamStateEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Foul;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Proposal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_YellowCard;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fstate_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_TeamInfo;
}  // namespace protobuf_ssl_5fgc_5fstate_2eproto
class YellowCardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<YellowCard>
      _instance;
} _YellowCard_default_instance_;
class RedCardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedCard>
      _instance;
} _RedCard_default_instance_;
class FoulDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Foul>
      _instance;
} _Foul_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Command>
      _instance;
} _Command_default_instance_;
class GameStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameState>
      _instance;
} _GameState_default_instance_;
class ProposalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Proposal>
      _instance;
} _Proposal_default_instance_;
class ProposalGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProposalGroup>
      _instance;
} _ProposalGroup_default_instance_;
class TeamInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamInfo>
      _instance;
} _TeamInfo_default_instance_;
class State_TeamStateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State_TeamStateEntry_DoNotUse>
      _instance;
} _State_TeamStateEntry_DoNotUse_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State>
      _instance;
} _State_default_instance_;
class ShootoutState_NumberOfAttemptsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShootoutState_NumberOfAttemptsEntry_DoNotUse>
      _instance;
} _ShootoutState_NumberOfAttemptsEntry_DoNotUse_default_instance_;
class ShootoutStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ShootoutState>
      _instance;
} _ShootoutState_default_instance_;
namespace protobuf_ssl_5fgc_5fstate_2eproto {
static void InitDefaultsYellowCard() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_YellowCard_default_instance_;
    new (ptr) ::YellowCard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::YellowCard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_YellowCard =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsYellowCard}, {
      &protobuf_ssl_5fgc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,}};

static void InitDefaultsRedCard() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RedCard_default_instance_;
    new (ptr) ::RedCard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RedCard::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RedCard =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRedCard}, {
      &protobuf_ssl_5fgc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,}};

static void InitDefaultsFoul() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Foul_default_instance_;
    new (ptr) ::Foul();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Foul::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Foul =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFoul}, {
      &protobuf_ssl_5fgc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Command_default_instance_;
    new (ptr) ::Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Command =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommand}, {}};

static void InitDefaultsGameState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameState_default_instance_;
    new (ptr) ::GameState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameState}, {}};

static void InitDefaultsProposal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Proposal_default_instance_;
    new (ptr) ::Proposal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proposal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Proposal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsProposal}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_ssl_5fgc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,}};

static void InitDefaultsProposalGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProposalGroup_default_instance_;
    new (ptr) ::ProposalGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProposalGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProposalGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProposalGroup}, {
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_Proposal.base,}};

static void InitDefaultsTeamInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TeamInfo_default_instance_;
    new (ptr) ::TeamInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TeamInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_TeamInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsTeamInfo}, {
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_YellowCard.base,
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_RedCard.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_Foul.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,}};

static void InitDefaultsState_TeamStateEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_State_TeamStateEntry_DoNotUse_default_instance_;
    new (ptr) ::State_TeamStateEntry_DoNotUse();
  }
  ::State_TeamStateEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_State_TeamStateEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsState_TeamStateEntry_DoNotUse}, {
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_TeamInfo.base,}};

static void InitDefaultsState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_State_default_instance_;
    new (ptr) ::State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::State::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_State =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsState}, {
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_Command.base,
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_GameState.base,
      &protobuf_google_2fprotobuf_2fduration_2eproto::scc_info_Duration.base,
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_State_TeamStateEntry_DoNotUse.base,
      &protobuf_ssl_5fgc_5fgeometry_2eproto::scc_info_Vector2.base,
      &protobuf_ssl_5fgc_5fgame_5fevent_2eproto::scc_info_GameEvent.base,
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_ProposalGroup.base,
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_ShootoutState.base,}};

static void InitDefaultsShootoutState_NumberOfAttemptsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ShootoutState_NumberOfAttemptsEntry_DoNotUse_default_instance_;
    new (ptr) ::ShootoutState_NumberOfAttemptsEntry_DoNotUse();
  }
  ::ShootoutState_NumberOfAttemptsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ShootoutState_NumberOfAttemptsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShootoutState_NumberOfAttemptsEntry_DoNotUse}, {}};

static void InitDefaultsShootoutState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ShootoutState_default_instance_;
    new (ptr) ::ShootoutState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ShootoutState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ShootoutState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsShootoutState}, {
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_ShootoutState_NumberOfAttemptsEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_YellowCard.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RedCard.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Foul.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Command.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Proposal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProposalGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TeamInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State_TeamStateEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_State.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShootoutState_NumberOfAttemptsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ShootoutState.base);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::YellowCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::YellowCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::YellowCard, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::YellowCard, caused_by_game_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::YellowCard, time_remaining_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RedCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RedCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RedCard, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RedCard, caused_by_game_event_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Foul, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Foul, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Foul, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Foul, caused_by_game_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Foul, timestamp_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Command, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Command, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Command, for_team_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState, for_team_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proposal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proposal, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Proposal, game_event_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProposalGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProposalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProposalGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProposalGroup, proposals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ProposalGroup, accepted_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, goals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, goalkeeper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, yellow_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, red_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, timeouts_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, timeout_time_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, on_positive_half_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, fouls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, ball_placement_failures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, ball_placement_failures_reached_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, can_place_ball_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, max_allowed_bots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, requests_bot_substitution_since_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, requests_timeout_since_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, requests_emergency_stop_since_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, challenge_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, bot_substitution_allowed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, bot_substitutions_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, bot_substitution_time_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeamInfo, hull_color_),
  0,
  6,
  7,
  ~0u,
  ~0u,
  8,
  1,
  10,
  ~0u,
  9,
  11,
  12,
  14,
  2,
  3,
  4,
  15,
  13,
  16,
  5,
  17,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State_TeamStateEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State_TeamStateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State_TeamStateEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State_TeamStateEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, game_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, stage_time_elapsed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, stage_time_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, match_time_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, team_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, placement_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, next_command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, current_action_time_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, game_events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, proposal_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, division_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, first_kickoff_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, match_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, ready_continue_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, shootout_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, status_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::State, max_bots_per_team_),
  11,
  1,
  8,
  2,
  3,
  4,
  ~0u,
  5,
  6,
  7,
  ~0u,
  ~0u,
  12,
  13,
  14,
  9,
  10,
  0,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ShootoutState_NumberOfAttemptsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ShootoutState_NumberOfAttemptsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ShootoutState_NumberOfAttemptsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ShootoutState_NumberOfAttemptsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ShootoutState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ShootoutState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ShootoutState, next_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ShootoutState, number_of_attempts_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::YellowCard)},
  { 11, 18, sizeof(::RedCard)},
  { 20, 28, sizeof(::Foul)},
  { 31, 38, sizeof(::Command)},
  { 40, 47, sizeof(::GameState)},
  { 49, 56, sizeof(::Proposal)},
  { 58, 66, sizeof(::ProposalGroup)},
  { 69, 95, sizeof(::TeamInfo)},
  { 116, 123, sizeof(::State_TeamStateEntry_DoNotUse)},
  { 125, 149, sizeof(::State)},
  { 168, 175, sizeof(::ShootoutState_NumberOfAttemptsEntry_DoNotUse)},
  { 177, 184, sizeof(::ShootoutState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_YellowCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RedCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Foul_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Proposal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ProposalGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_State_TeamStateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ShootoutState_NumberOfAttemptsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ShootoutState_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ssl_gc_state.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022ssl_gc_state.proto\032\023ssl_gc_common.prot"
      "o\032\025ssl_gc_geometry.proto\032\027ssl_gc_game_ev"
      "ent.proto\032\034ssl_gc_referee_message.proto\032"
      "\036google/protobuf/duration.proto\032\037google/"
      "protobuf/timestamp.proto\"u\n\nYellowCard\022\n"
      "\n\002id\030\001 \001(\r\022(\n\024caused_by_game_event\030\002 \001(\013"
      "2\n.GameEvent\0221\n\016time_remaining\030\003 \001(\0132\031.g"
      "oogle.protobuf.Duration\"\?\n\007RedCard\022\n\n\002id"
      "\030\001 \001(\r\022(\n\024caused_by_game_event\030\002 \001(\0132\n.G"
      "ameEvent\"k\n\004Foul\022\n\n\002id\030\001 \001(\r\022(\n\024caused_b"
      "y_game_event\030\002 \001(\0132\n.GameEvent\022-\n\ttimest"
      "amp\030\003 \001(\0132\032.google.protobuf.Timestamp\"\331\001"
      "\n\007Command\022\033\n\004type\030\001 \002(\0162\r.Command.Type\022\027"
      "\n\010for_team\030\002 \002(\0162\005.Team\"\227\001\n\004Type\022\013\n\007UNKN"
      "OWN\020\000\022\010\n\004HALT\020\001\022\010\n\004STOP\020\002\022\020\n\014NORMAL_STAR"
      "T\020\003\022\017\n\013FORCE_START\020\004\022\n\n\006DIRECT\020\005\022\013\n\007KICK"
      "OFF\020\007\022\013\n\007PENALTY\020\010\022\013\n\007TIMEOUT\020\t\022\022\n\016BALL_"
      "PLACEMENT\020\n\"\004\010\006\020\006\"\303\001\n\tGameState\022\035\n\004type\030"
      "\001 \002(\0162\017.GameState.Type\022\027\n\010for_team\030\002 \001(\016"
      "2\005.Team\"~\n\004Type\022\013\n\007UNKNOWN\020\000\022\010\n\004HALT\020\001\022\010"
      "\n\004STOP\020\002\022\013\n\007RUNNING\020\003\022\r\n\tFREE_KICK\020\004\022\013\n\007"
      "KICKOFF\020\005\022\013\n\007PENALTY\020\006\022\013\n\007TIMEOUT\020\007\022\022\n\016B"
      "ALL_PLACEMENT\020\010\"Y\n\010Proposal\022-\n\ttimestamp"
      "\030\001 \001(\0132\032.google.protobuf.Timestamp\022\036\n\nga"
      "me_event\030\002 \001(\0132\n.GameEvent\"Q\n\rProposalGr"
      "oup\022\n\n\002id\030\004 \001(\t\022\034\n\tproposals\030\001 \003(\0132\t.Pro"
      "posal\022\020\n\010accepted\030\002 \001(\010J\004\010\003\020\004\"\362\005\n\010TeamIn"
      "fo\022\014\n\004name\030\001 \001(\t\022\r\n\005goals\030\002 \001(\005\022\022\n\ngoalk"
      "eeper\030\003 \001(\005\022!\n\014yellow_cards\030\004 \003(\0132\013.Yell"
      "owCard\022\033\n\tred_cards\030\005 \003(\0132\010.RedCard\022\025\n\rt"
      "imeouts_left\030\006 \001(\005\0224\n\021timeout_time_left\030"
      "\007 \001(\0132\031.google.protobuf.Duration\022\030\n\020on_p"
      "ositive_half\030\010 \001(\010\022\024\n\005fouls\030\t \003(\0132\005.Foul"
      "\022\037\n\027ball_placement_failures\030\n \001(\005\022\'\n\037bal"
      "l_placement_failures_reached\030\013 \001(\010\022\026\n\016ca"
      "n_place_ball\030\014 \001(\010\022\030\n\020max_allowed_bots\030\r"
      " \001(\005\022C\n\037requests_bot_substitution_since\030"
      "\016 \001(\0132\032.google.protobuf.Timestamp\022:\n\026req"
      "uests_timeout_since\030\017 \001(\0132\032.google.proto"
      "buf.Timestamp\022A\n\035requests_emergency_stop"
      "_since\030\020 \001(\0132\032.google.protobuf.Timestamp"
      "\022\027\n\017challenge_flags\030\021 \001(\005\022 \n\030bot_substit"
      "ution_allowed\030\022 \001(\010\022\036\n\026bot_substitutions"
      "_left\030\023 \001(\005\022=\n\032bot_substitution_time_lef"
      "t\030\024 \001(\0132\031.google.protobuf.Duration\022\036\n\nhu"
      "ll_color\030\025 \001(\0162\n.HullColor\"\261\006\n\005State\022\035\n\005"
      "stage\030\001 \001(\0162\016.Referee.Stage\022\031\n\007command\030\002"
      " \001(\0132\010.Command\022\036\n\ngame_state\030\023 \001(\0132\n.Gam"
      "eState\0225\n\022stage_time_elapsed\030\004 \001(\0132\031.goo"
      "gle.protobuf.Duration\0222\n\017stage_time_left"
      "\030\005 \001(\0132\031.google.protobuf.Duration\0224\n\020mat"
      "ch_time_start\030\006 \001(\0132\032.google.protobuf.Ti"
      "mestamp\022)\n\nteam_state\030\010 \003(\0132\025.State.Team"
      "StateEntry\022\037\n\rplacement_pos\030\t \001(\0132\010.Vect"
      "or2\022\036\n\014next_command\030\n \001(\0132\010.Command\022@\n\035c"
      "urrent_action_time_remaining\030\014 \001(\0132\031.goo"
      "gle.protobuf.Duration\022\037\n\013game_events\030\r \003"
      "(\0132\n.GameEvent\022\'\n\017proposal_groups\030\016 \003(\0132"
      "\016.ProposalGroup\022\033\n\010division\030\017 \001(\0162\t.Divi"
      "sion\022!\n\022first_kickoff_team\030\021 \001(\0162\005.Team\022"
      "\036\n\nmatch_type\030\022 \001(\0162\n.MatchType\0227\n\023ready"
      "_continue_time\030\024 \001(\0132\032.google.protobuf.T"
      "imestamp\022&\n\016shootout_state\030\025 \001(\0132\016.Shoot"
      "outState\022\026\n\016status_message\030\026 \001(\t\022\031\n\021max_"
      "bots_per_team\030\027 \001(\005\032;\n\016TeamStateEntry\022\013\n"
      "\003key\030\001 \001(\t\022\030\n\005value\030\002 \001(\0132\t.TeamInfo:\0028\001"
      "J\004\010\020\020\021\"\244\001\n\rShootoutState\022\030\n\tnext_team\030\001 "
      "\001(\0162\005.Team\022@\n\022number_of_attempts\030\002 \003(\0132$"
      ".ShootoutState.NumberOfAttemptsEntry\0327\n\025"
      "NumberOfAttemptsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
      "lue\030\002 \001(\005:\0028\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2813);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_gc_state.proto", &protobuf_RegisterTypes);
  ::protobuf_ssl_5fgc_5fcommon_2eproto::AddDescriptors();
  ::protobuf_ssl_5fgc_5fgeometry_2eproto::AddDescriptors();
  ::protobuf_ssl_5fgc_5fgame_5fevent_2eproto::AddDescriptors();
  ::protobuf_ssl_5fgc_5freferee_5fmessage_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ssl_5fgc_5fstate_2eproto
const ::google::protobuf::EnumDescriptor* Command_Type_descriptor() {
  protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgc_5fstate_2eproto::file_level_enum_descriptors[0];
}
bool Command_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Command_Type Command::UNKNOWN;
const Command_Type Command::HALT;
const Command_Type Command::STOP;
const Command_Type Command::NORMAL_START;
const Command_Type Command::FORCE_START;
const Command_Type Command::DIRECT;
const Command_Type Command::KICKOFF;
const Command_Type Command::PENALTY;
const Command_Type Command::TIMEOUT;
const Command_Type Command::BALL_PLACEMENT;
const Command_Type Command::Type_MIN;
const Command_Type Command::Type_MAX;
const int Command::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GameState_Type_descriptor() {
  protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ssl_5fgc_5fstate_2eproto::file_level_enum_descriptors[1];
}
bool GameState_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GameState_Type GameState::UNKNOWN;
const GameState_Type GameState::HALT;
const GameState_Type GameState::STOP;
const GameState_Type GameState::RUNNING;
const GameState_Type GameState::FREE_KICK;
const GameState_Type GameState::KICKOFF;
const GameState_Type GameState::PENALTY;
const GameState_Type GameState::TIMEOUT;
const GameState_Type GameState::BALL_PLACEMENT;
const GameState_Type GameState::Type_MIN;
const GameState_Type GameState::Type_MAX;
const int GameState::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void YellowCard::InitAsDefaultInstance() {
  ::_YellowCard_default_instance_._instance.get_mutable()->caused_by_game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
  ::_YellowCard_default_instance_._instance.get_mutable()->time_remaining_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void YellowCard::clear_caused_by_game_event() {
  if (caused_by_game_event_ != NULL) caused_by_game_event_->Clear();
  clear_has_caused_by_game_event();
}
void YellowCard::clear_time_remaining() {
  if (time_remaining_ != NULL) time_remaining_->Clear();
  clear_has_time_remaining();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YellowCard::kIdFieldNumber;
const int YellowCard::kCausedByGameEventFieldNumber;
const int YellowCard::kTimeRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YellowCard::YellowCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_YellowCard.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:YellowCard)
}
YellowCard::YellowCard(const YellowCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_caused_by_game_event()) {
    caused_by_game_event_ = new ::GameEvent(*from.caused_by_game_event_);
  } else {
    caused_by_game_event_ = NULL;
  }
  if (from.has_time_remaining()) {
    time_remaining_ = new ::google::protobuf::Duration(*from.time_remaining_);
  } else {
    time_remaining_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:YellowCard)
}

void YellowCard::SharedCtor() {
  ::memset(&caused_by_game_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&caused_by_game_event_)) + sizeof(id_));
}

YellowCard::~YellowCard() {
  // @@protoc_insertion_point(destructor:YellowCard)
  SharedDtor();
}

void YellowCard::SharedDtor() {
  if (this != internal_default_instance()) delete caused_by_game_event_;
  if (this != internal_default_instance()) delete time_remaining_;
}

void YellowCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* YellowCard::descriptor() {
  ::protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YellowCard& YellowCard::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fstate_2eproto::scc_info_YellowCard.base);
  return *internal_default_instance();
}


void YellowCard::Clear() {
// @@protoc_insertion_point(message_clear_start:YellowCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(caused_by_game_event_ != NULL);
      caused_by_game_event_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(time_remaining_ != NULL);
      time_remaining_->Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YellowCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YellowCard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent caused_by_game_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_caused_by_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration time_remaining = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_remaining()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YellowCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YellowCard)
  return false;
#undef DO_
}

void YellowCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YellowCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_caused_by_game_event(), output);
  }

  // optional .google.protobuf.Duration time_remaining = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_time_remaining(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:YellowCard)
}

::google::protobuf::uint8* YellowCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:YellowCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_caused_by_game_event(), deterministic, target);
  }

  // optional .google.protobuf.Duration time_remaining = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_time_remaining(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YellowCard)
  return target;
}

size_t YellowCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YellowCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .GameEvent caused_by_game_event = 2;
    if (has_caused_by_game_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *caused_by_game_event_);
    }

    // optional .google.protobuf.Duration time_remaining = 3;
    if (has_time_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *time_remaining_);
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YellowCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:YellowCard)
  GOOGLE_DCHECK_NE(&from, this);
  const YellowCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YellowCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:YellowCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:YellowCard)
    MergeFrom(*source);
  }
}

void YellowCard::MergeFrom(const YellowCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YellowCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_caused_by_game_event()->::GameEvent::MergeFrom(from.caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_time_remaining()->::google::protobuf::Duration::MergeFrom(from.time_remaining());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void YellowCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:YellowCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YellowCard::CopyFrom(const YellowCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YellowCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YellowCard::IsInitialized() const {
  if (has_caused_by_game_event()) {
    if (!this->caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void YellowCard::Swap(YellowCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YellowCard::InternalSwap(YellowCard* other) {
  using std::swap;
  swap(caused_by_game_event_, other->caused_by_game_event_);
  swap(time_remaining_, other->time_remaining_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata YellowCard::GetMetadata() const {
  protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RedCard::InitAsDefaultInstance() {
  ::_RedCard_default_instance_._instance.get_mutable()->caused_by_game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
}
void RedCard::clear_caused_by_game_event() {
  if (caused_by_game_event_ != NULL) caused_by_game_event_->Clear();
  clear_has_caused_by_game_event();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedCard::kIdFieldNumber;
const int RedCard::kCausedByGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedCard::RedCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_RedCard.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RedCard)
}
RedCard::RedCard(const RedCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_caused_by_game_event()) {
    caused_by_game_event_ = new ::GameEvent(*from.caused_by_game_event_);
  } else {
    caused_by_game_event_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:RedCard)
}

void RedCard::SharedCtor() {
  ::memset(&caused_by_game_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&caused_by_game_event_)) + sizeof(id_));
}

RedCard::~RedCard() {
  // @@protoc_insertion_point(destructor:RedCard)
  SharedDtor();
}

void RedCard::SharedDtor() {
  if (this != internal_default_instance()) delete caused_by_game_event_;
}

void RedCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RedCard::descriptor() {
  ::protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedCard& RedCard::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fstate_2eproto::scc_info_RedCard.base);
  return *internal_default_instance();
}


void RedCard::Clear() {
// @@protoc_insertion_point(message_clear_start:RedCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(caused_by_game_event_ != NULL);
    caused_by_game_event_->Clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RedCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RedCard)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent caused_by_game_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_caused_by_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RedCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RedCard)
  return false;
#undef DO_
}

void RedCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RedCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_caused_by_game_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RedCard)
}

::google::protobuf::uint8* RedCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RedCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_caused_by_game_event(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedCard)
  return target;
}

size_t RedCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RedCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .GameEvent caused_by_game_event = 2;
    if (has_caused_by_game_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *caused_by_game_event_);
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RedCard)
  GOOGLE_DCHECK_NE(&from, this);
  const RedCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RedCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RedCard)
    MergeFrom(*source);
  }
}

void RedCard::MergeFrom(const RedCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RedCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_caused_by_game_event()->::GameEvent::MergeFrom(from.caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RedCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RedCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedCard::CopyFrom(const RedCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RedCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedCard::IsInitialized() const {
  if (has_caused_by_game_event()) {
    if (!this->caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void RedCard::Swap(RedCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedCard::InternalSwap(RedCard* other) {
  using std::swap;
  swap(caused_by_game_event_, other->caused_by_game_event_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RedCard::GetMetadata() const {
  protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Foul::InitAsDefaultInstance() {
  ::_Foul_default_instance_._instance.get_mutable()->caused_by_game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
  ::_Foul_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Foul::clear_caused_by_game_event() {
  if (caused_by_game_event_ != NULL) caused_by_game_event_->Clear();
  clear_has_caused_by_game_event();
}
void Foul::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->Clear();
  clear_has_timestamp();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Foul::kIdFieldNumber;
const int Foul::kCausedByGameEventFieldNumber;
const int Foul::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Foul::Foul()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_Foul.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Foul)
}
Foul::Foul(const Foul& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_caused_by_game_event()) {
    caused_by_game_event_ = new ::GameEvent(*from.caused_by_game_event_);
  } else {
    caused_by_game_event_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Foul)
}

void Foul::SharedCtor() {
  ::memset(&caused_by_game_event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&caused_by_game_event_)) + sizeof(id_));
}

Foul::~Foul() {
  // @@protoc_insertion_point(destructor:Foul)
  SharedDtor();
}

void Foul::SharedDtor() {
  if (this != internal_default_instance()) delete caused_by_game_event_;
  if (this != internal_default_instance()) delete timestamp_;
}

void Foul::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Foul::descriptor() {
  ::protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Foul& Foul::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fstate_2eproto::scc_info_Foul.base);
  return *internal_default_instance();
}


void Foul::Clear() {
// @@protoc_insertion_point(message_clear_start:Foul)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(caused_by_game_event_ != NULL);
      caused_by_game_event_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timestamp_ != NULL);
      timestamp_->Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Foul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Foul)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent caused_by_game_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_caused_by_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Foul)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Foul)
  return false;
#undef DO_
}

void Foul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Foul)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_caused_by_game_event(), output);
  }

  // optional .google.protobuf.Timestamp timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Foul)
}

::google::protobuf::uint8* Foul::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Foul)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .GameEvent caused_by_game_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_caused_by_game_event(), deterministic, target);
  }

  // optional .google.protobuf.Timestamp timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_timestamp(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Foul)
  return target;
}

size_t Foul::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Foul)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .GameEvent caused_by_game_event = 2;
    if (has_caused_by_game_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *caused_by_game_event_);
    }

    // optional .google.protobuf.Timestamp timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Foul::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Foul)
  GOOGLE_DCHECK_NE(&from, this);
  const Foul* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Foul>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Foul)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Foul)
    MergeFrom(*source);
  }
}

void Foul::MergeFrom(const Foul& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Foul)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_caused_by_game_event()->::GameEvent::MergeFrom(from.caused_by_game_event());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Foul::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Foul)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Foul::CopyFrom(const Foul& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Foul)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Foul::IsInitialized() const {
  if (has_caused_by_game_event()) {
    if (!this->caused_by_game_event_->IsInitialized()) return false;
  }
  return true;
}

void Foul::Swap(Foul* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Foul::InternalSwap(Foul* other) {
  using std::swap;
  swap(caused_by_game_event_, other->caused_by_game_event_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Foul::GetMetadata() const {
  protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Command::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kTypeFieldNumber;
const int Command::kForTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_Command.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_team_) -
    reinterpret_cast<char*>(&type_)) + sizeof(for_team_));
  // @@protoc_insertion_point(copy_constructor:Command)
}

void Command::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_team_) -
      reinterpret_cast<char*>(&type_)) + sizeof(for_team_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:Command)
  SharedDtor();
}

void Command::SharedDtor() {
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  ::protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Command& Command::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fstate_2eproto::scc_info_Command.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&for_team_) -
        reinterpret_cast<char*>(&type_)) + sizeof(for_team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Command.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Command_Type_IsValid(value)) {
            set_type(static_cast< ::Command_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Team for_team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_for_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Command.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .Team for_team = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->for_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Command.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .Team for_team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->for_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command)
  return target;
}

size_t Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Command)
  size_t total_size = 0;

  if (has_type()) {
    // required .Command.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_for_team()) {
    // required .Team for_team = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->for_team());
  }

  return total_size;
}
size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Command.Type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required .Team for_team = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->for_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      for_team_ = from.for_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(for_team_, other->for_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameState::kTypeFieldNumber;
const int GameState::kForTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameState::GameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_GameState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameState)
}
GameState::GameState(const GameState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_team_) -
    reinterpret_cast<char*>(&type_)) + sizeof(for_team_));
  // @@protoc_insertion_point(copy_constructor:GameState)
}

void GameState::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_team_) -
      reinterpret_cast<char*>(&type_)) + sizeof(for_team_));
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:GameState)
  SharedDtor();
}

void GameState::SharedDtor() {
}

void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameState::descriptor() {
  ::protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameState& GameState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fstate_2eproto::scc_info_GameState.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&for_team_) -
        reinterpret_cast<char*>(&type_)) + sizeof(for_team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameState.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameState_Type_IsValid(value)) {
            set_type(static_cast< ::GameState_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Team for_team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_for_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameState)
  return false;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .GameState.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Team for_team = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->for_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameState)
}

::google::protobuf::uint8* GameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .GameState.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Team for_team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->for_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .GameState.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional .Team for_team = 2;
  if (has_for_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->for_team());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      for_team_ = from.for_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GameState::Swap(GameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameState::InternalSwap(GameState* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(for_team_, other->for_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Proposal::InitAsDefaultInstance() {
  ::_Proposal_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::_Proposal_default_instance_._instance.get_mutable()->game_event_ = const_cast< ::GameEvent*>(
      ::GameEvent::internal_default_instance());
}
void Proposal::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->Clear();
  clear_has_timestamp();
}
void Proposal::clear_game_event() {
  if (game_event_ != NULL) game_event_->Clear();
  clear_has_game_event();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Proposal::kTimestampFieldNumber;
const int Proposal::kGameEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Proposal::Proposal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_Proposal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_game_event()) {
    game_event_ = new ::GameEvent(*from.game_event_);
  } else {
    game_event_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Proposal)
}

void Proposal::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_event_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(game_event_));
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:Proposal)
  SharedDtor();
}

void Proposal::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete game_event_;
}

void Proposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Proposal::descriptor() {
  ::protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Proposal& Proposal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fstate_2eproto::scc_info_Proposal.base);
  return *internal_default_instance();
}


void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:Proposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(timestamp_ != NULL);
      timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(game_event_ != NULL);
      game_event_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Proposal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proposal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .google.protobuf.Timestamp timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameEvent game_event = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proposal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proposal)
  return false;
#undef DO_
}

void Proposal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .google.protobuf.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_timestamp(), output);
  }

  // optional .GameEvent game_event = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_game_event(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proposal)
}

::google::protobuf::uint8* Proposal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proposal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .google.protobuf.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_timestamp(), deterministic, target);
  }

  // optional .GameEvent game_event = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_game_event(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proposal)
  return target;
}

size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proposal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .google.protobuf.Timestamp timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional .GameEvent game_event = 2;
    if (has_game_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_event_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proposal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  const Proposal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Proposal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proposal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proposal)
    MergeFrom(*source);
  }
}

void Proposal::MergeFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_game_event()->::GameEvent::MergeFrom(from.game_event());
    }
  }
}

void Proposal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  if (has_game_event()) {
    if (!this->game_event_->IsInitialized()) return false;
  }
  return true;
}

void Proposal::Swap(Proposal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(game_event_, other->game_event_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Proposal::GetMetadata() const {
  protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProposalGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProposalGroup::kIdFieldNumber;
const int ProposalGroup::kProposalsFieldNumber;
const int ProposalGroup::kAcceptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProposalGroup::ProposalGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_ProposalGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProposalGroup)
}
ProposalGroup::ProposalGroup(const ProposalGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      proposals_(from.proposals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  accepted_ = from.accepted_;
  // @@protoc_insertion_point(copy_constructor:ProposalGroup)
}

void ProposalGroup::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accepted_ = false;
}

ProposalGroup::~ProposalGroup() {
  // @@protoc_insertion_point(destructor:ProposalGroup)
  SharedDtor();
}

void ProposalGroup::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProposalGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProposalGroup::descriptor() {
  ::protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProposalGroup& ProposalGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fstate_2eproto::scc_info_ProposalGroup.base);
  return *internal_default_instance();
}


void ProposalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:ProposalGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposals_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  accepted_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProposalGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProposalGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proposal proposals = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_proposals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool accepted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_accepted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProposalGroup.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProposalGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProposalGroup)
  return false;
#undef DO_
}

void ProposalGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProposalGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proposal proposals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proposals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->proposals(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool accepted = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accepted(), output);
  }

  // optional string id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProposalGroup.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProposalGroup)
}

::google::protobuf::uint8* ProposalGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ProposalGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proposal proposals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proposals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->proposals(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool accepted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accepted(), target);
  }

  // optional string id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProposalGroup.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProposalGroup)
  return target;
}

size_t ProposalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProposalGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .Proposal proposals = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->proposals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->proposals(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional bool accepted = 2;
    if (has_accepted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProposalGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProposalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ProposalGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProposalGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProposalGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProposalGroup)
    MergeFrom(*source);
  }
}

void ProposalGroup::MergeFrom(const ProposalGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProposalGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proposals_.MergeFrom(from.proposals_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      accepted_ = from.accepted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProposalGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposalGroup::CopyFrom(const ProposalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalGroup::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->proposals())) return false;
  return true;
}

void ProposalGroup::Swap(ProposalGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProposalGroup::InternalSwap(ProposalGroup* other) {
  using std::swap;
  CastToBase(&proposals_)->InternalSwap(CastToBase(&other->proposals_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accepted_, other->accepted_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProposalGroup::GetMetadata() const {
  protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamInfo::InitAsDefaultInstance() {
  ::_TeamInfo_default_instance_._instance.get_mutable()->timeout_time_left_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::_TeamInfo_default_instance_._instance.get_mutable()->requests_bot_substitution_since_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::_TeamInfo_default_instance_._instance.get_mutable()->requests_timeout_since_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::_TeamInfo_default_instance_._instance.get_mutable()->requests_emergency_stop_since_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::_TeamInfo_default_instance_._instance.get_mutable()->bot_substitution_time_left_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void TeamInfo::clear_timeout_time_left() {
  if (timeout_time_left_ != NULL) timeout_time_left_->Clear();
  clear_has_timeout_time_left();
}
void TeamInfo::clear_requests_bot_substitution_since() {
  if (requests_bot_substitution_since_ != NULL) requests_bot_substitution_since_->Clear();
  clear_has_requests_bot_substitution_since();
}
void TeamInfo::clear_requests_timeout_since() {
  if (requests_timeout_since_ != NULL) requests_timeout_since_->Clear();
  clear_has_requests_timeout_since();
}
void TeamInfo::clear_requests_emergency_stop_since() {
  if (requests_emergency_stop_since_ != NULL) requests_emergency_stop_since_->Clear();
  clear_has_requests_emergency_stop_since();
}
void TeamInfo::clear_bot_substitution_time_left() {
  if (bot_substitution_time_left_ != NULL) bot_substitution_time_left_->Clear();
  clear_has_bot_substitution_time_left();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamInfo::kNameFieldNumber;
const int TeamInfo::kGoalsFieldNumber;
const int TeamInfo::kGoalkeeperFieldNumber;
const int TeamInfo::kYellowCardsFieldNumber;
const int TeamInfo::kRedCardsFieldNumber;
const int TeamInfo::kTimeoutsLeftFieldNumber;
const int TeamInfo::kTimeoutTimeLeftFieldNumber;
const int TeamInfo::kOnPositiveHalfFieldNumber;
const int TeamInfo::kFoulsFieldNumber;
const int TeamInfo::kBallPlacementFailuresFieldNumber;
const int TeamInfo::kBallPlacementFailuresReachedFieldNumber;
const int TeamInfo::kCanPlaceBallFieldNumber;
const int TeamInfo::kMaxAllowedBotsFieldNumber;
const int TeamInfo::kRequestsBotSubstitutionSinceFieldNumber;
const int TeamInfo::kRequestsTimeoutSinceFieldNumber;
const int TeamInfo::kRequestsEmergencyStopSinceFieldNumber;
const int TeamInfo::kChallengeFlagsFieldNumber;
const int TeamInfo::kBotSubstitutionAllowedFieldNumber;
const int TeamInfo::kBotSubstitutionsLeftFieldNumber;
const int TeamInfo::kBotSubstitutionTimeLeftFieldNumber;
const int TeamInfo::kHullColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamInfo::TeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_TeamInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeamInfo)
}
TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      yellow_cards_(from.yellow_cards_),
      red_cards_(from.red_cards_),
      fouls_(from.fouls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_timeout_time_left()) {
    timeout_time_left_ = new ::google::protobuf::Duration(*from.timeout_time_left_);
  } else {
    timeout_time_left_ = NULL;
  }
  if (from.has_requests_bot_substitution_since()) {
    requests_bot_substitution_since_ = new ::google::protobuf::Timestamp(*from.requests_bot_substitution_since_);
  } else {
    requests_bot_substitution_since_ = NULL;
  }
  if (from.has_requests_timeout_since()) {
    requests_timeout_since_ = new ::google::protobuf::Timestamp(*from.requests_timeout_since_);
  } else {
    requests_timeout_since_ = NULL;
  }
  if (from.has_requests_emergency_stop_since()) {
    requests_emergency_stop_since_ = new ::google::protobuf::Timestamp(*from.requests_emergency_stop_since_);
  } else {
    requests_emergency_stop_since_ = NULL;
  }
  if (from.has_bot_substitution_time_left()) {
    bot_substitution_time_left_ = new ::google::protobuf::Duration(*from.bot_substitution_time_left_);
  } else {
    bot_substitution_time_left_ = NULL;
  }
  ::memcpy(&goals_, &from.goals_,
    static_cast<size_t>(reinterpret_cast<char*>(&hull_color_) -
    reinterpret_cast<char*>(&goals_)) + sizeof(hull_color_));
  // @@protoc_insertion_point(copy_constructor:TeamInfo)
}

void TeamInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_time_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hull_color_) -
      reinterpret_cast<char*>(&timeout_time_left_)) + sizeof(hull_color_));
}

TeamInfo::~TeamInfo() {
  // @@protoc_insertion_point(destructor:TeamInfo)
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timeout_time_left_;
  if (this != internal_default_instance()) delete requests_bot_substitution_since_;
  if (this != internal_default_instance()) delete requests_timeout_since_;
  if (this != internal_default_instance()) delete requests_emergency_stop_since_;
  if (this != internal_default_instance()) delete bot_substitution_time_left_;
}

void TeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  ::protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamInfo& TeamInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fstate_2eproto::scc_info_TeamInfo.base);
  return *internal_default_instance();
}


void TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yellow_cards_.Clear();
  red_cards_.Clear();
  fouls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timeout_time_left_ != NULL);
      timeout_time_left_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(requests_bot_substitution_since_ != NULL);
      requests_bot_substitution_since_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(requests_timeout_since_ != NULL);
      requests_timeout_since_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(requests_emergency_stop_since_ != NULL);
      requests_emergency_stop_since_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(bot_substitution_time_left_ != NULL);
      bot_substitution_time_left_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&goals_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goalkeeper_) -
        reinterpret_cast<char*>(&goals_)) + sizeof(goalkeeper_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&timeouts_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_flags_) -
        reinterpret_cast<char*>(&timeouts_left_)) + sizeof(challenge_flags_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&bot_substitutions_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hull_color_) -
        reinterpret_cast<char*>(&bot_substitutions_left_)) + sizeof(hull_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeamInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TeamInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 goals = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_goals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 goalkeeper = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_goalkeeper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goalkeeper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .YellowCard yellow_cards = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_yellow_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .RedCard red_cards = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_red_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timeouts_left = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timeouts_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeouts_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration timeout_time_left = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timeout_time_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool on_positive_half = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_on_positive_half();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_positive_half_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Foul fouls = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fouls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ball_placement_failures = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_ball_placement_failures();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ball_placement_failures_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ball_placement_failures_reached = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_ball_placement_failures_reached();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ball_placement_failures_reached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_place_ball = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_can_place_ball();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_place_ball_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_allowed_bots = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_max_allowed_bots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_allowed_bots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp requests_bot_substitution_since = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requests_bot_substitution_since()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp requests_timeout_since = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requests_timeout_since()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp requests_emergency_stop_since = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_requests_emergency_stop_since()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 challenge_flags = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_challenge_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bot_substitution_allowed = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_bot_substitution_allowed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bot_substitution_allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bot_substitutions_left = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_bot_substitutions_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bot_substitutions_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration bot_substitution_time_left = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_substitution_time_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .HullColor hull_color = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HullColor_IsValid(value)) {
            set_hull_color(static_cast< ::HullColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeamInfo)
  return false;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 goals = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goals(), output);
  }

  // optional int32 goalkeeper = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goalkeeper(), output);
  }

  // repeated .YellowCard yellow_cards = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->yellow_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->yellow_cards(static_cast<int>(i)),
      output);
  }

  // repeated .RedCard red_cards = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->red_cards_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->red_cards(static_cast<int>(i)),
      output);
  }

  // optional int32 timeouts_left = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timeouts_left(), output);
  }

  // optional .google.protobuf.Duration timeout_time_left = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_timeout_time_left(), output);
  }

  // optional bool on_positive_half = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->on_positive_half(), output);
  }

  // repeated .Foul fouls = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fouls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->fouls(static_cast<int>(i)),
      output);
  }

  // optional int32 ball_placement_failures = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ball_placement_failures(), output);
  }

  // optional bool ball_placement_failures_reached = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->ball_placement_failures_reached(), output);
  }

  // optional bool can_place_ball = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->can_place_ball(), output);
  }

  // optional int32 max_allowed_bots = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->max_allowed_bots(), output);
  }

  // optional .google.protobuf.Timestamp requests_bot_substitution_since = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_requests_bot_substitution_since(), output);
  }

  // optional .google.protobuf.Timestamp requests_timeout_since = 15;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_requests_timeout_since(), output);
  }

  // optional .google.protobuf.Timestamp requests_emergency_stop_since = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_requests_emergency_stop_since(), output);
  }

  // optional int32 challenge_flags = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->challenge_flags(), output);
  }

  // optional bool bot_substitution_allowed = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->bot_substitution_allowed(), output);
  }

  // optional int32 bot_substitutions_left = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->bot_substitutions_left(), output);
  }

  // optional .google.protobuf.Duration bot_substitution_time_left = 20;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_bot_substitution_time_left(), output);
  }

  // optional .HullColor hull_color = 21;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->hull_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeamInfo)
}

::google::protobuf::uint8* TeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TeamInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 goals = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goals(), target);
  }

  // optional int32 goalkeeper = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goalkeeper(), target);
  }

  // repeated .YellowCard yellow_cards = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->yellow_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->yellow_cards(static_cast<int>(i)), deterministic, target);
  }

  // repeated .RedCard red_cards = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->red_cards_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->red_cards(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 timeouts_left = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->timeouts_left(), target);
  }

  // optional .google.protobuf.Duration timeout_time_left = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_timeout_time_left(), deterministic, target);
  }

  // optional bool on_positive_half = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->on_positive_half(), target);
  }

  // repeated .Foul fouls = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fouls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->fouls(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 ball_placement_failures = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ball_placement_failures(), target);
  }

  // optional bool ball_placement_failures_reached = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->ball_placement_failures_reached(), target);
  }

  // optional bool can_place_ball = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->can_place_ball(), target);
  }

  // optional int32 max_allowed_bots = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->max_allowed_bots(), target);
  }

  // optional .google.protobuf.Timestamp requests_bot_substitution_since = 14;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_requests_bot_substitution_since(), deterministic, target);
  }

  // optional .google.protobuf.Timestamp requests_timeout_since = 15;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_requests_timeout_since(), deterministic, target);
  }

  // optional .google.protobuf.Timestamp requests_emergency_stop_since = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_requests_emergency_stop_since(), deterministic, target);
  }

  // optional int32 challenge_flags = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->challenge_flags(), target);
  }

  // optional bool bot_substitution_allowed = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->bot_substitution_allowed(), target);
  }

  // optional int32 bot_substitutions_left = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->bot_substitutions_left(), target);
  }

  // optional .google.protobuf.Duration bot_substitution_time_left = 20;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_bot_substitution_time_left(), deterministic, target);
  }

  // optional .HullColor hull_color = 21;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->hull_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeamInfo)
  return target;
}

size_t TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .YellowCard yellow_cards = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->yellow_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->yellow_cards(static_cast<int>(i)));
    }
  }

  // repeated .RedCard red_cards = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->red_cards_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->red_cards(static_cast<int>(i)));
    }
  }

  // repeated .Foul fouls = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->fouls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fouls(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .google.protobuf.Duration timeout_time_left = 7;
    if (has_timeout_time_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *timeout_time_left_);
    }

    // optional .google.protobuf.Timestamp requests_bot_substitution_since = 14;
    if (has_requests_bot_substitution_since()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *requests_bot_substitution_since_);
    }

    // optional .google.protobuf.Timestamp requests_timeout_since = 15;
    if (has_requests_timeout_since()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *requests_timeout_since_);
    }

    // optional .google.protobuf.Timestamp requests_emergency_stop_since = 16;
    if (has_requests_emergency_stop_since()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *requests_emergency_stop_since_);
    }

    // optional .google.protobuf.Duration bot_substitution_time_left = 20;
    if (has_bot_substitution_time_left()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bot_substitution_time_left_);
    }

    // optional int32 goals = 2;
    if (has_goals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goals());
    }

    // optional int32 goalkeeper = 3;
    if (has_goalkeeper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goalkeeper());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 timeouts_left = 6;
    if (has_timeouts_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeouts_left());
    }

    // optional int32 ball_placement_failures = 10;
    if (has_ball_placement_failures()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ball_placement_failures());
    }

    // optional bool on_positive_half = 8;
    if (has_on_positive_half()) {
      total_size += 1 + 1;
    }

    // optional bool ball_placement_failures_reached = 11;
    if (has_ball_placement_failures_reached()) {
      total_size += 1 + 1;
    }

    // optional bool can_place_ball = 12;
    if (has_can_place_ball()) {
      total_size += 1 + 1;
    }

    // optional bool bot_substitution_allowed = 18;
    if (has_bot_substitution_allowed()) {
      total_size += 2 + 1;
    }

    // optional int32 max_allowed_bots = 13;
    if (has_max_allowed_bots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_allowed_bots());
    }

    // optional int32 challenge_flags = 17;
    if (has_challenge_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_flags());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int32 bot_substitutions_left = 19;
    if (has_bot_substitutions_left()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bot_substitutions_left());
    }

    // optional .HullColor hull_color = 21;
    if (has_hull_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hull_color());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeamInfo)
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  yellow_cards_.MergeFrom(from.yellow_cards_);
  red_cards_.MergeFrom(from.red_cards_);
  fouls_.MergeFrom(from.fouls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_timeout_time_left()->::google::protobuf::Duration::MergeFrom(from.timeout_time_left());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_requests_bot_substitution_since()->::google::protobuf::Timestamp::MergeFrom(from.requests_bot_substitution_since());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_requests_timeout_since()->::google::protobuf::Timestamp::MergeFrom(from.requests_timeout_since());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_requests_emergency_stop_since()->::google::protobuf::Timestamp::MergeFrom(from.requests_emergency_stop_since());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_bot_substitution_time_left()->::google::protobuf::Duration::MergeFrom(from.bot_substitution_time_left());
    }
    if (cached_has_bits & 0x00000040u) {
      goals_ = from.goals_;
    }
    if (cached_has_bits & 0x00000080u) {
      goalkeeper_ = from.goalkeeper_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      timeouts_left_ = from.timeouts_left_;
    }
    if (cached_has_bits & 0x00000200u) {
      ball_placement_failures_ = from.ball_placement_failures_;
    }
    if (cached_has_bits & 0x00000400u) {
      on_positive_half_ = from.on_positive_half_;
    }
    if (cached_has_bits & 0x00000800u) {
      ball_placement_failures_reached_ = from.ball_placement_failures_reached_;
    }
    if (cached_has_bits & 0x00001000u) {
      can_place_ball_ = from.can_place_ball_;
    }
    if (cached_has_bits & 0x00002000u) {
      bot_substitution_allowed_ = from.bot_substitution_allowed_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_allowed_bots_ = from.max_allowed_bots_;
    }
    if (cached_has_bits & 0x00008000u) {
      challenge_flags_ = from.challenge_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      bot_substitutions_left_ = from.bot_substitutions_left_;
    }
    if (cached_has_bits & 0x00020000u) {
      hull_color_ = from.hull_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->yellow_cards())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->red_cards())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fouls())) return false;
  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamInfo::InternalSwap(TeamInfo* other) {
  using std::swap;
  CastToBase(&yellow_cards_)->InternalSwap(CastToBase(&other->yellow_cards_));
  CastToBase(&red_cards_)->InternalSwap(CastToBase(&other->red_cards_));
  CastToBase(&fouls_)->InternalSwap(CastToBase(&other->fouls_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timeout_time_left_, other->timeout_time_left_);
  swap(requests_bot_substitution_since_, other->requests_bot_substitution_since_);
  swap(requests_timeout_since_, other->requests_timeout_since_);
  swap(requests_emergency_stop_since_, other->requests_emergency_stop_since_);
  swap(bot_substitution_time_left_, other->bot_substitution_time_left_);
  swap(goals_, other->goals_);
  swap(goalkeeper_, other->goalkeeper_);
  swap(timeouts_left_, other->timeouts_left_);
  swap(ball_placement_failures_, other->ball_placement_failures_);
  swap(on_positive_half_, other->on_positive_half_);
  swap(ball_placement_failures_reached_, other->ball_placement_failures_reached_);
  swap(can_place_ball_, other->can_place_ball_);
  swap(bot_substitution_allowed_, other->bot_substitution_allowed_);
  swap(max_allowed_bots_, other->max_allowed_bots_);
  swap(challenge_flags_, other->challenge_flags_);
  swap(bot_substitutions_left_, other->bot_substitutions_left_);
  swap(hull_color_, other->hull_color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

State_TeamStateEntry_DoNotUse::State_TeamStateEntry_DoNotUse() {}
State_TeamStateEntry_DoNotUse::State_TeamStateEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void State_TeamStateEntry_DoNotUse::MergeFrom(const State_TeamStateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata State_TeamStateEntry_DoNotUse::GetMetadata() const {
  ::protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[8];
}
void State_TeamStateEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void State::InitAsDefaultInstance() {
  ::_State_default_instance_._instance.get_mutable()->command_ = const_cast< ::Command*>(
      ::Command::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->game_state_ = const_cast< ::GameState*>(
      ::GameState::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->stage_time_elapsed_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->stage_time_left_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->match_time_start_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->placement_pos_ = const_cast< ::Vector2*>(
      ::Vector2::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->next_command_ = const_cast< ::Command*>(
      ::Command::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->current_action_time_remaining_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->ready_continue_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::_State_default_instance_._instance.get_mutable()->shootout_state_ = const_cast< ::ShootoutState*>(
      ::ShootoutState::internal_default_instance());
}
void State::clear_stage_time_elapsed() {
  if (stage_time_elapsed_ != NULL) stage_time_elapsed_->Clear();
  clear_has_stage_time_elapsed();
}
void State::clear_stage_time_left() {
  if (stage_time_left_ != NULL) stage_time_left_->Clear();
  clear_has_stage_time_left();
}
void State::clear_match_time_start() {
  if (match_time_start_ != NULL) match_time_start_->Clear();
  clear_has_match_time_start();
}
void State::clear_placement_pos() {
  if (placement_pos_ != NULL) placement_pos_->Clear();
  clear_has_placement_pos();
}
void State::clear_current_action_time_remaining() {
  if (current_action_time_remaining_ != NULL) current_action_time_remaining_->Clear();
  clear_has_current_action_time_remaining();
}
void State::clear_game_events() {
  game_events_.Clear();
}
void State::clear_ready_continue_time() {
  if (ready_continue_time_ != NULL) ready_continue_time_->Clear();
  clear_has_ready_continue_time();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kStageFieldNumber;
const int State::kCommandFieldNumber;
const int State::kGameStateFieldNumber;
const int State::kStageTimeElapsedFieldNumber;
const int State::kStageTimeLeftFieldNumber;
const int State::kMatchTimeStartFieldNumber;
const int State::kTeamStateFieldNumber;
const int State::kPlacementPosFieldNumber;
const int State::kNextCommandFieldNumber;
const int State::kCurrentActionTimeRemainingFieldNumber;
const int State::kGameEventsFieldNumber;
const int State::kProposalGroupsFieldNumber;
const int State::kDivisionFieldNumber;
const int State::kFirstKickoffTeamFieldNumber;
const int State::kMatchTypeFieldNumber;
const int State::kReadyContinueTimeFieldNumber;
const int State::kShootoutStateFieldNumber;
const int State::kStatusMessageFieldNumber;
const int State::kMaxBotsPerTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_State.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:State)
}
State::State(const State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      game_events_(from.game_events_),
      proposal_groups_(from.proposal_groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_state_.MergeFrom(from.team_state_);
  status_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_status_message()) {
    status_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_message_);
  }
  if (from.has_command()) {
    command_ = new ::Command(*from.command_);
  } else {
    command_ = NULL;
  }
  if (from.has_stage_time_elapsed()) {
    stage_time_elapsed_ = new ::google::protobuf::Duration(*from.stage_time_elapsed_);
  } else {
    stage_time_elapsed_ = NULL;
  }
  if (from.has_stage_time_left()) {
    stage_time_left_ = new ::google::protobuf::Duration(*from.stage_time_left_);
  } else {
    stage_time_left_ = NULL;
  }
  if (from.has_match_time_start()) {
    match_time_start_ = new ::google::protobuf::Timestamp(*from.match_time_start_);
  } else {
    match_time_start_ = NULL;
  }
  if (from.has_placement_pos()) {
    placement_pos_ = new ::Vector2(*from.placement_pos_);
  } else {
    placement_pos_ = NULL;
  }
  if (from.has_next_command()) {
    next_command_ = new ::Command(*from.next_command_);
  } else {
    next_command_ = NULL;
  }
  if (from.has_current_action_time_remaining()) {
    current_action_time_remaining_ = new ::google::protobuf::Duration(*from.current_action_time_remaining_);
  } else {
    current_action_time_remaining_ = NULL;
  }
  if (from.has_game_state()) {
    game_state_ = new ::GameState(*from.game_state_);
  } else {
    game_state_ = NULL;
  }
  if (from.has_ready_continue_time()) {
    ready_continue_time_ = new ::google::protobuf::Timestamp(*from.ready_continue_time_);
  } else {
    ready_continue_time_ = NULL;
  }
  if (from.has_shootout_state()) {
    shootout_state_ = new ::ShootoutState(*from.shootout_state_);
  } else {
    shootout_state_ = NULL;
  }
  ::memcpy(&stage_, &from.stage_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_bots_per_team_) -
    reinterpret_cast<char*>(&stage_)) + sizeof(max_bots_per_team_));
  // @@protoc_insertion_point(copy_constructor:State)
}

void State::SharedCtor() {
  status_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_bots_per_team_) -
      reinterpret_cast<char*>(&command_)) + sizeof(max_bots_per_team_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:State)
  SharedDtor();
}

void State::SharedDtor() {
  status_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete command_;
  if (this != internal_default_instance()) delete stage_time_elapsed_;
  if (this != internal_default_instance()) delete stage_time_left_;
  if (this != internal_default_instance()) delete match_time_start_;
  if (this != internal_default_instance()) delete placement_pos_;
  if (this != internal_default_instance()) delete next_command_;
  if (this != internal_default_instance()) delete current_action_time_remaining_;
  if (this != internal_default_instance()) delete game_state_;
  if (this != internal_default_instance()) delete ready_continue_time_;
  if (this != internal_default_instance()) delete shootout_state_;
}

void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* State::descriptor() {
  ::protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const State& State::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fstate_2eproto::scc_info_State.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_state_.Clear();
  game_events_.Clear();
  proposal_groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      status_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(command_ != NULL);
      command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(stage_time_elapsed_ != NULL);
      stage_time_elapsed_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stage_time_left_ != NULL);
      stage_time_left_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(match_time_start_ != NULL);
      match_time_start_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(placement_pos_ != NULL);
      placement_pos_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(next_command_ != NULL);
      next_command_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(current_action_time_remaining_ != NULL);
      current_action_time_remaining_->Clear();
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(game_state_ != NULL);
      game_state_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(ready_continue_time_ != NULL);
      ready_continue_time_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(shootout_state_ != NULL);
      shootout_state_->Clear();
    }
  }
  if (cached_has_bits & 63488u) {
    ::memset(&stage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_bots_per_team_) -
        reinterpret_cast<char*>(&stage_)) + sizeof(max_bots_per_team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:State)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Referee.Stage stage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Referee_Stage_IsValid(value)) {
            set_stage(static_cast< ::Referee_Stage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Command command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration stage_time_elapsed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stage_time_elapsed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration stage_time_left = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stage_time_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp match_time_start = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match_time_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .TeamInfo> team_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          State_TeamStateEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              State_TeamStateEntry_DoNotUse,
              ::std::string, ::TeamInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::TeamInfo > > parser(&team_state_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "State.TeamStateEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Vector2 placement_pos = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_placement_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Command next_command = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_next_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Duration current_action_time_remaining = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_current_action_time_remaining()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameEvent game_events = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_game_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProposalGroup proposal_groups = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_proposal_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Division division = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Division_IsValid(value)) {
            set_division(static_cast< ::Division >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                15, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Team first_kickoff_team = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_first_kickoff_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MatchType match_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MatchType_IsValid(value)) {
            set_match_type(static_cast< ::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameState game_state = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .google.protobuf.Timestamp ready_continue_time = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ready_continue_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ShootoutState shootout_state = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shootout_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string status_message = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status_message().data(), static_cast<int>(this->status_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "State.status_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_bots_per_team = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_max_bots_per_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_bots_per_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Referee.Stage stage = 1;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stage(), output);
  }

  // optional .Command command = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_command(), output);
  }

  // optional .google.protobuf.Duration stage_time_elapsed = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_stage_time_elapsed(), output);
  }

  // optional .google.protobuf.Duration stage_time_left = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_stage_time_left(), output);
  }

  // optional .google.protobuf.Timestamp match_time_start = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_match_time_start(), output);
  }

  // map<string, .TeamInfo> team_state = 8;
  if (!this->team_state().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::TeamInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "State.TeamStateEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->team_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->team_state().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::TeamInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::TeamInfo >::const_iterator
          it = this->team_state().begin();
          it != this->team_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_TeamStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(team_state_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_TeamStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::TeamInfo >::const_iterator
          it = this->team_state().begin();
          it != this->team_state().end(); ++it) {
        entry.reset(team_state_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .Vector2 placement_pos = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_placement_pos(), output);
  }

  // optional .Command next_command = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_next_command(), output);
  }

  // optional .google.protobuf.Duration current_action_time_remaining = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_current_action_time_remaining(), output);
  }

  // repeated .GameEvent game_events = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->game_events(static_cast<int>(i)),
      output);
  }

  // repeated .ProposalGroup proposal_groups = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proposal_groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->proposal_groups(static_cast<int>(i)),
      output);
  }

  // optional .Division division = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->division(), output);
  }

  // optional .Team first_kickoff_team = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->first_kickoff_team(), output);
  }

  // optional .MatchType match_type = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->match_type(), output);
  }

  // optional .GameState game_state = 19;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_game_state(), output);
  }

  // optional .google.protobuf.Timestamp ready_continue_time = 20;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_ready_continue_time(), output);
  }

  // optional .ShootoutState shootout_state = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_shootout_state(), output);
  }

  // optional string status_message = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_message().data(), static_cast<int>(this->status_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "State.status_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->status_message(), output);
  }

  // optional int32 max_bots_per_team = 23;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->max_bots_per_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:State)
}

::google::protobuf::uint8* State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Referee.Stage stage = 1;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stage(), target);
  }

  // optional .Command command = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_command(), deterministic, target);
  }

  // optional .google.protobuf.Duration stage_time_elapsed = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_stage_time_elapsed(), deterministic, target);
  }

  // optional .google.protobuf.Duration stage_time_left = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_stage_time_left(), deterministic, target);
  }

  // optional .google.protobuf.Timestamp match_time_start = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_match_time_start(), deterministic, target);
  }

  // map<string, .TeamInfo> team_state = 8;
  if (!this->team_state().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::TeamInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "State.TeamStateEntry.key");
      }
    };

    if (deterministic &&
        this->team_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->team_state().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::TeamInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::TeamInfo >::const_iterator
          it = this->team_state().begin();
          it != this->team_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<State_TeamStateEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(team_state_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<State_TeamStateEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::TeamInfo >::const_iterator
          it = this->team_state().begin();
          it != this->team_state().end(); ++it) {
        entry.reset(team_state_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .Vector2 placement_pos = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_placement_pos(), deterministic, target);
  }

  // optional .Command next_command = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_next_command(), deterministic, target);
  }

  // optional .google.protobuf.Duration current_action_time_remaining = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_current_action_time_remaining(), deterministic, target);
  }

  // repeated .GameEvent game_events = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->game_events(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ProposalGroup proposal_groups = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proposal_groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->proposal_groups(static_cast<int>(i)), deterministic, target);
  }

  // optional .Division division = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->division(), target);
  }

  // optional .Team first_kickoff_team = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->first_kickoff_team(), target);
  }

  // optional .MatchType match_type = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->match_type(), target);
  }

  // optional .GameState game_state = 19;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_game_state(), deterministic, target);
  }

  // optional .google.protobuf.Timestamp ready_continue_time = 20;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_ready_continue_time(), deterministic, target);
  }

  // optional .ShootoutState shootout_state = 21;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_shootout_state(), deterministic, target);
  }

  // optional string status_message = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status_message().data(), static_cast<int>(this->status_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "State.status_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->status_message(), target);
  }

  // optional int32 max_bots_per_team = 23;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->max_bots_per_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:State)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<string, .TeamInfo> team_state = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->team_state_size());
  {
    ::std::unique_ptr<State_TeamStateEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::TeamInfo >::const_iterator
        it = this->team_state().begin();
        it != this->team_state().end(); ++it) {
      entry.reset(team_state_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .GameEvent game_events = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->game_events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->game_events(static_cast<int>(i)));
    }
  }

  // repeated .ProposalGroup proposal_groups = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->proposal_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->proposal_groups(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string status_message = 22;
    if (has_status_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status_message());
    }

    // optional .Command command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_);
    }

    // optional .google.protobuf.Duration stage_time_elapsed = 4;
    if (has_stage_time_elapsed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stage_time_elapsed_);
    }

    // optional .google.protobuf.Duration stage_time_left = 5;
    if (has_stage_time_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stage_time_left_);
    }

    // optional .google.protobuf.Timestamp match_time_start = 6;
    if (has_match_time_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *match_time_start_);
    }

    // optional .Vector2 placement_pos = 9;
    if (has_placement_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *placement_pos_);
    }

    // optional .Command next_command = 10;
    if (has_next_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *next_command_);
    }

    // optional .google.protobuf.Duration current_action_time_remaining = 12;
    if (has_current_action_time_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *current_action_time_remaining_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .GameState game_state = 19;
    if (has_game_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *game_state_);
    }

    // optional .google.protobuf.Timestamp ready_continue_time = 20;
    if (has_ready_continue_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ready_continue_time_);
    }

    // optional .ShootoutState shootout_state = 21;
    if (has_shootout_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shootout_state_);
    }

    // optional .Referee.Stage stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
    }

    // optional .Division division = 15;
    if (has_division()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->division());
    }

    // optional .Team first_kickoff_team = 17;
    if (has_first_kickoff_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->first_kickoff_team());
    }

    // optional .MatchType match_type = 18;
    if (has_match_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // optional int32 max_bots_per_team = 23;
    if (has_max_bots_per_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_bots_per_team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_state_.MergeFrom(from.team_state_);
  game_events_.MergeFrom(from.game_events_);
  proposal_groups_.MergeFrom(from.proposal_groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_status_message();
      status_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_command()->::Command::MergeFrom(from.command());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stage_time_elapsed()->::google::protobuf::Duration::MergeFrom(from.stage_time_elapsed());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_stage_time_left()->::google::protobuf::Duration::MergeFrom(from.stage_time_left());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_match_time_start()->::google::protobuf::Timestamp::MergeFrom(from.match_time_start());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_placement_pos()->::Vector2::MergeFrom(from.placement_pos());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_next_command()->::Command::MergeFrom(from.next_command());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_current_action_time_remaining()->::google::protobuf::Duration::MergeFrom(from.current_action_time_remaining());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_game_state()->::GameState::MergeFrom(from.game_state());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_ready_continue_time()->::google::protobuf::Timestamp::MergeFrom(from.ready_continue_time());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_shootout_state()->::ShootoutState::MergeFrom(from.shootout_state());
    }
    if (cached_has_bits & 0x00000800u) {
      stage_ = from.stage_;
    }
    if (cached_has_bits & 0x00001000u) {
      division_ = from.division_;
    }
    if (cached_has_bits & 0x00002000u) {
      first_kickoff_team_ = from.first_kickoff_team_;
    }
    if (cached_has_bits & 0x00004000u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_bots_per_team_ = from.max_bots_per_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->team_state())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->game_events())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->proposal_groups())) return false;
  if (has_command()) {
    if (!this->command_->IsInitialized()) return false;
  }
  if (has_placement_pos()) {
    if (!this->placement_pos_->IsInitialized()) return false;
  }
  if (has_next_command()) {
    if (!this->next_command_->IsInitialized()) return false;
  }
  if (has_game_state()) {
    if (!this->game_state_->IsInitialized()) return false;
  }
  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  using std::swap;
  team_state_.Swap(&other->team_state_);
  CastToBase(&game_events_)->InternalSwap(CastToBase(&other->game_events_));
  CastToBase(&proposal_groups_)->InternalSwap(CastToBase(&other->proposal_groups_));
  status_message_.Swap(&other->status_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(command_, other->command_);
  swap(stage_time_elapsed_, other->stage_time_elapsed_);
  swap(stage_time_left_, other->stage_time_left_);
  swap(match_time_start_, other->match_time_start_);
  swap(placement_pos_, other->placement_pos_);
  swap(next_command_, other->next_command_);
  swap(current_action_time_remaining_, other->current_action_time_remaining_);
  swap(game_state_, other->game_state_);
  swap(ready_continue_time_, other->ready_continue_time_);
  swap(shootout_state_, other->shootout_state_);
  swap(stage_, other->stage_);
  swap(division_, other->division_);
  swap(first_kickoff_team_, other->first_kickoff_team_);
  swap(match_type_, other->match_type_);
  swap(max_bots_per_team_, other->max_bots_per_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

ShootoutState_NumberOfAttemptsEntry_DoNotUse::ShootoutState_NumberOfAttemptsEntry_DoNotUse() {}
ShootoutState_NumberOfAttemptsEntry_DoNotUse::ShootoutState_NumberOfAttemptsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ShootoutState_NumberOfAttemptsEntry_DoNotUse::MergeFrom(const ShootoutState_NumberOfAttemptsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ShootoutState_NumberOfAttemptsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[10];
}
void ShootoutState_NumberOfAttemptsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void ShootoutState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShootoutState::kNextTeamFieldNumber;
const int ShootoutState::kNumberOfAttemptsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShootoutState::ShootoutState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fgc_5fstate_2eproto::scc_info_ShootoutState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShootoutState)
}
ShootoutState::ShootoutState(const ShootoutState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  number_of_attempts_.MergeFrom(from.number_of_attempts_);
  next_team_ = from.next_team_;
  // @@protoc_insertion_point(copy_constructor:ShootoutState)
}

void ShootoutState::SharedCtor() {
  next_team_ = 0;
}

ShootoutState::~ShootoutState() {
  // @@protoc_insertion_point(destructor:ShootoutState)
  SharedDtor();
}

void ShootoutState::SharedDtor() {
}

void ShootoutState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ShootoutState::descriptor() {
  ::protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShootoutState& ShootoutState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fgc_5fstate_2eproto::scc_info_ShootoutState.base);
  return *internal_default_instance();
}


void ShootoutState::Clear() {
// @@protoc_insertion_point(message_clear_start:ShootoutState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_of_attempts_.Clear();
  next_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShootoutState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShootoutState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Team next_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Team_IsValid(value)) {
            set_next_team(static_cast< ::Team >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int32> number_of_attempts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          ShootoutState_NumberOfAttemptsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ShootoutState_NumberOfAttemptsEntry_DoNotUse,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&number_of_attempts_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ShootoutState.NumberOfAttemptsEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShootoutState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShootoutState)
  return false;
#undef DO_
}

void ShootoutState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShootoutState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team next_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->next_team(), output);
  }

  // map<string, int32> number_of_attempts = 2;
  if (!this->number_of_attempts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "ShootoutState.NumberOfAttemptsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->number_of_attempts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->number_of_attempts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->number_of_attempts().begin();
          it != this->number_of_attempts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ShootoutState_NumberOfAttemptsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(number_of_attempts_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<ShootoutState_NumberOfAttemptsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->number_of_attempts().begin();
          it != this->number_of_attempts().end(); ++it) {
        entry.reset(number_of_attempts_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShootoutState)
}

::google::protobuf::uint8* ShootoutState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ShootoutState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team next_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->next_team(), target);
  }

  // map<string, int32> number_of_attempts = 2;
  if (!this->number_of_attempts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "ShootoutState.NumberOfAttemptsEntry.key");
      }
    };

    if (deterministic &&
        this->number_of_attempts().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->number_of_attempts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->number_of_attempts().begin();
          it != this->number_of_attempts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ShootoutState_NumberOfAttemptsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(number_of_attempts_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<ShootoutState_NumberOfAttemptsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->number_of_attempts().begin();
          it != this->number_of_attempts().end(); ++it) {
        entry.reset(number_of_attempts_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShootoutState)
  return target;
}

size_t ShootoutState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShootoutState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<string, int32> number_of_attempts = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->number_of_attempts_size());
  {
    ::std::unique_ptr<ShootoutState_NumberOfAttemptsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->number_of_attempts().begin();
        it != this->number_of_attempts().end(); ++it) {
      entry.reset(number_of_attempts_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // optional .Team next_team = 1;
  if (has_next_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->next_team());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShootoutState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ShootoutState)
  GOOGLE_DCHECK_NE(&from, this);
  const ShootoutState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShootoutState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ShootoutState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ShootoutState)
    MergeFrom(*source);
  }
}

void ShootoutState::MergeFrom(const ShootoutState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ShootoutState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  number_of_attempts_.MergeFrom(from.number_of_attempts_);
  if (from.has_next_team()) {
    set_next_team(from.next_team());
  }
}

void ShootoutState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ShootoutState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShootoutState::CopyFrom(const ShootoutState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShootoutState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShootoutState::IsInitialized() const {
  return true;
}

void ShootoutState::Swap(ShootoutState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShootoutState::InternalSwap(ShootoutState* other) {
  using std::swap;
  number_of_attempts_.Swap(&other->number_of_attempts_);
  swap(next_team_, other->next_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ShootoutState::GetMetadata() const {
  protobuf_ssl_5fgc_5fstate_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fgc_5fstate_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::YellowCard* Arena::CreateMaybeMessage< ::YellowCard >(Arena* arena) {
  return Arena::CreateInternal< ::YellowCard >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RedCard* Arena::CreateMaybeMessage< ::RedCard >(Arena* arena) {
  return Arena::CreateInternal< ::RedCard >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Foul* Arena::CreateMaybeMessage< ::Foul >(Arena* arena) {
  return Arena::CreateInternal< ::Foul >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Command* Arena::CreateMaybeMessage< ::Command >(Arena* arena) {
  return Arena::CreateInternal< ::Command >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameState* Arena::CreateMaybeMessage< ::GameState >(Arena* arena) {
  return Arena::CreateInternal< ::GameState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Proposal* Arena::CreateMaybeMessage< ::Proposal >(Arena* arena) {
  return Arena::CreateInternal< ::Proposal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ProposalGroup* Arena::CreateMaybeMessage< ::ProposalGroup >(Arena* arena) {
  return Arena::CreateInternal< ::ProposalGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TeamInfo* Arena::CreateMaybeMessage< ::TeamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::TeamInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::State_TeamStateEntry_DoNotUse* Arena::CreateMaybeMessage< ::State_TeamStateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::State_TeamStateEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::State* Arena::CreateMaybeMessage< ::State >(Arena* arena) {
  return Arena::CreateInternal< ::State >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ShootoutState_NumberOfAttemptsEntry_DoNotUse* Arena::CreateMaybeMessage< ::ShootoutState_NumberOfAttemptsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::ShootoutState_NumberOfAttemptsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ShootoutState* Arena::CreateMaybeMessage< ::ShootoutState >(Arena* arena) {
  return Arena::CreateInternal< ::ShootoutState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
