// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_geometry.proto

#include "messages_robocup_ssl_geometry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Vector2f::Vector2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2fDefaultTypeInternal() {}
  union {
    Vector2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2fDefaultTypeInternal _Vector2f_default_instance_;
PROTOBUF_CONSTEXPR SSL_FieldLineSegment::SSL_FieldLineSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.p1_)*/nullptr
  , /*decltype(_impl_.p2_)*/nullptr
  , /*decltype(_impl_.thickness_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SSL_FieldLineSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_FieldLineSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_FieldLineSegmentDefaultTypeInternal() {}
  union {
    SSL_FieldLineSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_FieldLineSegmentDefaultTypeInternal _SSL_FieldLineSegment_default_instance_;
PROTOBUF_CONSTEXPR SSL_FieldCicularArc::SSL_FieldCicularArc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.center_)*/nullptr
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_.thickness_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SSL_FieldCicularArcDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_FieldCicularArcDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_FieldCicularArcDefaultTypeInternal() {}
  union {
    SSL_FieldCicularArc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_FieldCicularArcDefaultTypeInternal _SSL_FieldCicularArc_default_instance_;
PROTOBUF_CONSTEXPR SSL_GeometryFieldSize::SSL_GeometryFieldSize(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_lines_)*/{}
  , /*decltype(_impl_.field_arcs_)*/{}
  , /*decltype(_impl_.field_length_)*/0
  , /*decltype(_impl_.field_width_)*/0
  , /*decltype(_impl_.goal_width_)*/0
  , /*decltype(_impl_.goal_depth_)*/0
  , /*decltype(_impl_.boundary_width_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SSL_GeometryFieldSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_GeometryFieldSizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_GeometryFieldSizeDefaultTypeInternal() {}
  union {
    SSL_GeometryFieldSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_GeometryFieldSizeDefaultTypeInternal _SSL_GeometryFieldSize_default_instance_;
PROTOBUF_CONSTEXPR SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.camera_id_)*/0u
  , /*decltype(_impl_.focal_length_)*/0
  , /*decltype(_impl_.principal_point_x_)*/0
  , /*decltype(_impl_.principal_point_y_)*/0
  , /*decltype(_impl_.distortion_)*/0
  , /*decltype(_impl_.q0_)*/0
  , /*decltype(_impl_.q1_)*/0
  , /*decltype(_impl_.q2_)*/0
  , /*decltype(_impl_.q3_)*/0
  , /*decltype(_impl_.tx_)*/0
  , /*decltype(_impl_.ty_)*/0
  , /*decltype(_impl_.tz_)*/0
  , /*decltype(_impl_.derived_camera_world_tx_)*/0
  , /*decltype(_impl_.derived_camera_world_ty_)*/0
  , /*decltype(_impl_.derived_camera_world_tz_)*/0} {}
struct SSL_GeometryCameraCalibrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_GeometryCameraCalibrationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_GeometryCameraCalibrationDefaultTypeInternal() {}
  union {
    SSL_GeometryCameraCalibration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_GeometryCameraCalibrationDefaultTypeInternal _SSL_GeometryCameraCalibration_default_instance_;
PROTOBUF_CONSTEXPR SSL_GeometryData::SSL_GeometryData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.calib_)*/{}
  , /*decltype(_impl_.field_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SSL_GeometryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_GeometryDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_GeometryDataDefaultTypeInternal() {}
  union {
    SSL_GeometryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_GeometryDataDefaultTypeInternal _SSL_GeometryData_default_instance_;
static ::_pb::Metadata file_level_metadata_messages_5frobocup_5fssl_5fgeometry_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_messages_5frobocup_5fssl_5fgeometry_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_messages_5frobocup_5fssl_5fgeometry_2eproto = nullptr;

const uint32_t TableStruct_messages_5frobocup_5fssl_5fgeometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vector2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Vector2f, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Vector2f, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.p1_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.p2_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.thickness_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCicularArc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCicularArc, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCicularArc, _impl_.center_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCicularArc, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCicularArc, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCicularArc, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCicularArc, _impl_.thickness_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.field_length_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.field_width_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.goal_width_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.goal_depth_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.boundary_width_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.field_lines_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.field_arcs_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.camera_id_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.focal_length_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.principal_point_x_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.principal_point_y_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.distortion_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.q0_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.q1_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.q2_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.q3_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.ty_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.tz_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.derived_camera_world_tx_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.derived_camera_world_ty_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.derived_camera_world_tz_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryData, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryData, _impl_.calib_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Vector2f)},
  { 8, -1, -1, sizeof(::SSL_FieldLineSegment)},
  { 18, -1, -1, sizeof(::SSL_FieldCicularArc)},
  { 30, -1, -1, sizeof(::SSL_GeometryFieldSize)},
  { 43, 64, -1, sizeof(::SSL_GeometryCameraCalibration)},
  { 79, -1, -1, sizeof(::SSL_GeometryData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Vector2f_default_instance_._instance,
  &::_SSL_FieldLineSegment_default_instance_._instance,
  &::_SSL_FieldCicularArc_default_instance_._instance,
  &::_SSL_GeometryFieldSize_default_instance_._instance,
  &::_SSL_GeometryCameraCalibration_default_instance_._instance,
  &::_SSL_GeometryData_default_instance_._instance,
};

const char descriptor_table_protodef_messages_5frobocup_5fssl_5fgeometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#messages_robocup_ssl_geometry.proto\" \n"
  "\010Vector2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"e\n\024SSL_F"
  "ieldLineSegment\022\014\n\004name\030\001 \001(\t\022\025\n\002p1\030\002 \001("
  "\0132\t.Vector2f\022\025\n\002p2\030\003 \001(\0132\t.Vector2f\022\021\n\tt"
  "hickness\030\004 \001(\002\"y\n\023SSL_FieldCicularArc\022\014\n"
  "\004name\030\001 \001(\t\022\031\n\006center\030\002 \001(\0132\t.Vector2f\022\016"
  "\n\006radius\030\003 \001(\002\022\n\n\002a1\030\004 \001(\002\022\n\n\002a2\030\005 \001(\002\022\021"
  "\n\tthickness\030\006 \001(\002\"\330\001\n\025SSL_GeometryFieldS"
  "ize\022\024\n\014field_length\030\001 \001(\005\022\023\n\013field_width"
  "\030\002 \001(\005\022\022\n\ngoal_width\030\003 \001(\005\022\022\n\ngoal_depth"
  "\030\004 \001(\005\022\026\n\016boundary_width\030\005 \001(\005\022*\n\013field_"
  "lines\030\006 \003(\0132\025.SSL_FieldLineSegment\022(\n\nfi"
  "eld_arcs\030\007 \003(\0132\024.SSL_FieldCicularArc\"\254\003\n"
  "\035SSL_GeometryCameraCalibration\022\021\n\tcamera"
  "_id\030\001 \001(\r\022\024\n\014focal_length\030\002 \001(\002\022\031\n\021princ"
  "ipal_point_x\030\003 \001(\002\022\031\n\021principal_point_y\030"
  "\004 \001(\002\022\022\n\ndistortion\030\005 \001(\002\022\n\n\002q0\030\006 \001(\002\022\n\n"
  "\002q1\030\007 \001(\002\022\n\n\002q2\030\010 \001(\002\022\n\n\002q3\030\t \001(\002\022\n\n\002tx\030"
  "\n \001(\002\022\n\n\002ty\030\013 \001(\002\022\n\n\002tz\030\014 \001(\002\022$\n\027derived"
  "_camera_world_tx\030\r \001(\002H\000\210\001\001\022$\n\027derived_c"
  "amera_world_ty\030\016 \001(\002H\001\210\001\001\022$\n\027derived_cam"
  "era_world_tz\030\017 \001(\002H\002\210\001\001B\032\n\030_derived_came"
  "ra_world_txB\032\n\030_derived_camera_world_tyB"
  "\032\n\030_derived_camera_world_tz\"h\n\020SSL_Geome"
  "tryData\022%\n\005field\030\001 \001(\0132\026.SSL_GeometryFie"
  "ldSize\022-\n\005calib\030\002 \003(\0132\036.SSL_GeometryCame"
  "raCalibrationb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto = {
    false, false, 1061, descriptor_table_protodef_messages_5frobocup_5fssl_5fgeometry_2eproto,
    "messages_robocup_ssl_geometry.proto",
    &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_messages_5frobocup_5fssl_5fgeometry_2eproto::offsets,
    file_level_metadata_messages_5frobocup_5fssl_5fgeometry_2eproto, file_level_enum_descriptors_messages_5frobocup_5fssl_5fgeometry_2eproto,
    file_level_service_descriptors_messages_5frobocup_5fssl_5fgeometry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_getter() {
  return &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_messages_5frobocup_5fssl_5fgeometry_2eproto(&descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto);

// ===================================================================

class Vector2f::_Internal {
 public:
};

Vector2f::Vector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Vector2f)
}
Vector2f::Vector2f(const Vector2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:Vector2f)
}

inline void Vector2f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:Vector2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector2f)
  return target;
}

size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector2f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2f::GetClassData() const { return &_class_data_; }


void Vector2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector2f*>(&to_msg);
  auto& from = static_cast<const Vector2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Vector2f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2f::IsInitialized() const {
  return true;
}

void Vector2f::InternalSwap(Vector2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.y_)
      + sizeof(Vector2f::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_getter, &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_once,
      file_level_metadata_messages_5frobocup_5fssl_5fgeometry_2eproto[0]);
}

// ===================================================================

class SSL_FieldLineSegment::_Internal {
 public:
  static const ::Vector2f& p1(const SSL_FieldLineSegment* msg);
  static const ::Vector2f& p2(const SSL_FieldLineSegment* msg);
};

const ::Vector2f&
SSL_FieldLineSegment::_Internal::p1(const SSL_FieldLineSegment* msg) {
  return *msg->_impl_.p1_;
}
const ::Vector2f&
SSL_FieldLineSegment::_Internal::p2(const SSL_FieldLineSegment* msg) {
  return *msg->_impl_.p2_;
}
SSL_FieldLineSegment::SSL_FieldLineSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_FieldLineSegment)
}
SSL_FieldLineSegment::SSL_FieldLineSegment(const SSL_FieldLineSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_FieldLineSegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.p1_){nullptr}
    , decltype(_impl_.p2_){nullptr}
    , decltype(_impl_.thickness_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_p1()) {
    _this->_impl_.p1_ = new ::Vector2f(*from._impl_.p1_);
  }
  if (from._internal_has_p2()) {
    _this->_impl_.p2_ = new ::Vector2f(*from._impl_.p2_);
  }
  _this->_impl_.thickness_ = from._impl_.thickness_;
  // @@protoc_insertion_point(copy_constructor:SSL_FieldLineSegment)
}

inline void SSL_FieldLineSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.p1_){nullptr}
    , decltype(_impl_.p2_){nullptr}
    , decltype(_impl_.thickness_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSL_FieldLineSegment::~SSL_FieldLineSegment() {
  // @@protoc_insertion_point(destructor:SSL_FieldLineSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_FieldLineSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.p1_;
  if (this != internal_default_instance()) delete _impl_.p2_;
}

void SSL_FieldLineSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_FieldLineSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_FieldLineSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.p1_ != nullptr) {
    delete _impl_.p1_;
  }
  _impl_.p1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.p2_ != nullptr) {
    delete _impl_.p2_;
  }
  _impl_.p2_ = nullptr;
  _impl_.thickness_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_FieldLineSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SSL_FieldLineSegment.name"));
        } else
          goto handle_unusual;
        continue;
      // .Vector2f p1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_p1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vector2f p2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_p2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float thickness = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_FieldLineSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_FieldLineSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SSL_FieldLineSegment.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .Vector2f p1 = 2;
  if (this->_internal_has_p1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::p1(this),
        _Internal::p1(this).GetCachedSize(), target, stream);
  }

  // .Vector2f p2 = 3;
  if (this->_internal_has_p2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::p2(this),
        _Internal::p2(this).GetCachedSize(), target, stream);
  }

  // float thickness = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_thickness = this->_internal_thickness();
  uint32_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_thickness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_FieldLineSegment)
  return target;
}

size_t SSL_FieldLineSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_FieldLineSegment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Vector2f p1 = 2;
  if (this->_internal_has_p1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p1_);
  }

  // .Vector2f p2 = 3;
  if (this->_internal_has_p2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p2_);
  }

  // float thickness = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_thickness = this->_internal_thickness();
  uint32_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_FieldLineSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_FieldLineSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_FieldLineSegment::GetClassData() const { return &_class_data_; }


void SSL_FieldLineSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_FieldLineSegment*>(&to_msg);
  auto& from = static_cast<const SSL_FieldLineSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_FieldLineSegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_p1()) {
    _this->_internal_mutable_p1()->::Vector2f::MergeFrom(
        from._internal_p1());
  }
  if (from._internal_has_p2()) {
    _this->_internal_mutable_p2()->::Vector2f::MergeFrom(
        from._internal_p2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_thickness = from._internal_thickness();
  uint32_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    _this->_internal_set_thickness(from._internal_thickness());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_FieldLineSegment::CopyFrom(const SSL_FieldLineSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_FieldLineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_FieldLineSegment::IsInitialized() const {
  return true;
}

void SSL_FieldLineSegment::InternalSwap(SSL_FieldLineSegment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.thickness_)
      + sizeof(SSL_FieldLineSegment::_impl_.thickness_)
      - PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.p1_)>(
          reinterpret_cast<char*>(&_impl_.p1_),
          reinterpret_cast<char*>(&other->_impl_.p1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_FieldLineSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_getter, &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_once,
      file_level_metadata_messages_5frobocup_5fssl_5fgeometry_2eproto[1]);
}

// ===================================================================

class SSL_FieldCicularArc::_Internal {
 public:
  static const ::Vector2f& center(const SSL_FieldCicularArc* msg);
};

const ::Vector2f&
SSL_FieldCicularArc::_Internal::center(const SSL_FieldCicularArc* msg) {
  return *msg->_impl_.center_;
}
SSL_FieldCicularArc::SSL_FieldCicularArc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_FieldCicularArc)
}
SSL_FieldCicularArc::SSL_FieldCicularArc(const SSL_FieldCicularArc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_FieldCicularArc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.thickness_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_center()) {
    _this->_impl_.center_ = new ::Vector2f(*from._impl_.center_);
  }
  ::memcpy(&_impl_.radius_, &from._impl_.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.thickness_) -
    reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.thickness_));
  // @@protoc_insertion_point(copy_constructor:SSL_FieldCicularArc)
}

inline void SSL_FieldCicularArc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , decltype(_impl_.thickness_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSL_FieldCicularArc::~SSL_FieldCicularArc() {
  // @@protoc_insertion_point(destructor:SSL_FieldCicularArc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_FieldCicularArc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.center_;
}

void SSL_FieldCicularArc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_FieldCicularArc::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_FieldCicularArc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.center_ != nullptr) {
    delete _impl_.center_;
  }
  _impl_.center_ = nullptr;
  ::memset(&_impl_.radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.thickness_) -
      reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.thickness_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_FieldCicularArc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SSL_FieldCicularArc.name"));
        } else
          goto handle_unusual;
        continue;
      // .Vector2f center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float radius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float thickness = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_FieldCicularArc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_FieldCicularArc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SSL_FieldCicularArc.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .Vector2f center = 2;
  if (this->_internal_has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // float radius = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_radius(), target);
  }

  // float a1 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = this->_internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a1(), target);
  }

  // float a2 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = this->_internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_a2(), target);
  }

  // float thickness = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_thickness = this->_internal_thickness();
  uint32_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_thickness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_FieldCicularArc)
  return target;
}

size_t SSL_FieldCicularArc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_FieldCicularArc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Vector2f center = 2;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.center_);
  }

  // float radius = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  // float a1 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = this->_internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    total_size += 1 + 4;
  }

  // float a2 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = this->_internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    total_size += 1 + 4;
  }

  // float thickness = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_thickness = this->_internal_thickness();
  uint32_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_FieldCicularArc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_FieldCicularArc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_FieldCicularArc::GetClassData() const { return &_class_data_; }


void SSL_FieldCicularArc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_FieldCicularArc*>(&to_msg);
  auto& from = static_cast<const SSL_FieldCicularArc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_FieldCicularArc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_center()) {
    _this->_internal_mutable_center()->::Vector2f::MergeFrom(
        from._internal_center());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = from._internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = from._internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_thickness = from._internal_thickness();
  uint32_t raw_thickness;
  memcpy(&raw_thickness, &tmp_thickness, sizeof(tmp_thickness));
  if (raw_thickness != 0) {
    _this->_internal_set_thickness(from._internal_thickness());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_FieldCicularArc::CopyFrom(const SSL_FieldCicularArc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_FieldCicularArc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_FieldCicularArc::IsInitialized() const {
  return true;
}

void SSL_FieldCicularArc::InternalSwap(SSL_FieldCicularArc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_FieldCicularArc, _impl_.thickness_)
      + sizeof(SSL_FieldCicularArc::_impl_.thickness_)
      - PROTOBUF_FIELD_OFFSET(SSL_FieldCicularArc, _impl_.center_)>(
          reinterpret_cast<char*>(&_impl_.center_),
          reinterpret_cast<char*>(&other->_impl_.center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_FieldCicularArc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_getter, &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_once,
      file_level_metadata_messages_5frobocup_5fssl_5fgeometry_2eproto[2]);
}

// ===================================================================

class SSL_GeometryFieldSize::_Internal {
 public:
};

SSL_GeometryFieldSize::SSL_GeometryFieldSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_GeometryFieldSize)
}
SSL_GeometryFieldSize::SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_GeometryFieldSize* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_lines_){from._impl_.field_lines_}
    , decltype(_impl_.field_arcs_){from._impl_.field_arcs_}
    , decltype(_impl_.field_length_){}
    , decltype(_impl_.field_width_){}
    , decltype(_impl_.goal_width_){}
    , decltype(_impl_.goal_depth_){}
    , decltype(_impl_.boundary_width_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.field_length_, &from._impl_.field_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.boundary_width_) -
    reinterpret_cast<char*>(&_impl_.field_length_)) + sizeof(_impl_.boundary_width_));
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryFieldSize)
}

inline void SSL_GeometryFieldSize::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.field_lines_){arena}
    , decltype(_impl_.field_arcs_){arena}
    , decltype(_impl_.field_length_){0}
    , decltype(_impl_.field_width_){0}
    , decltype(_impl_.goal_width_){0}
    , decltype(_impl_.goal_depth_){0}
    , decltype(_impl_.boundary_width_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SSL_GeometryFieldSize::~SSL_GeometryFieldSize() {
  // @@protoc_insertion_point(destructor:SSL_GeometryFieldSize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_GeometryFieldSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_lines_.~RepeatedPtrField();
  _impl_.field_arcs_.~RepeatedPtrField();
}

void SSL_GeometryFieldSize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_GeometryFieldSize::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryFieldSize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_lines_.Clear();
  _impl_.field_arcs_.Clear();
  ::memset(&_impl_.field_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.boundary_width_) -
      reinterpret_cast<char*>(&_impl_.field_length_)) + sizeof(_impl_.boundary_width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_GeometryFieldSize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 field_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.field_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 field_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.field_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 goal_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.goal_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 goal_depth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.goal_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 boundary_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.boundary_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SSL_FieldLineSegment field_lines = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SSL_FieldCicularArc field_arcs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_arcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_GeometryFieldSize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryFieldSize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 field_length = 1;
  if (this->_internal_field_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_field_length(), target);
  }

  // int32 field_width = 2;
  if (this->_internal_field_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_field_width(), target);
  }

  // int32 goal_width = 3;
  if (this->_internal_goal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_goal_width(), target);
  }

  // int32 goal_depth = 4;
  if (this->_internal_goal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_goal_depth(), target);
  }

  // int32 boundary_width = 5;
  if (this->_internal_boundary_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_boundary_width(), target);
  }

  // repeated .SSL_FieldLineSegment field_lines = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_lines_size()); i < n; i++) {
    const auto& repfield = this->_internal_field_lines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SSL_FieldCicularArc field_arcs = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_arcs_size()); i < n; i++) {
    const auto& repfield = this->_internal_field_arcs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryFieldSize)
  return target;
}

size_t SSL_GeometryFieldSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryFieldSize)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SSL_FieldLineSegment field_lines = 6;
  total_size += 1UL * this->_internal_field_lines_size();
  for (const auto& msg : this->_impl_.field_lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SSL_FieldCicularArc field_arcs = 7;
  total_size += 1UL * this->_internal_field_arcs_size();
  for (const auto& msg : this->_impl_.field_arcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 field_length = 1;
  if (this->_internal_field_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_length());
  }

  // int32 field_width = 2;
  if (this->_internal_field_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_width());
  }

  // int32 goal_width = 3;
  if (this->_internal_goal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_width());
  }

  // int32 goal_depth = 4;
  if (this->_internal_goal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_depth());
  }

  // int32 boundary_width = 5;
  if (this->_internal_boundary_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_boundary_width());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_GeometryFieldSize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_GeometryFieldSize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_GeometryFieldSize::GetClassData() const { return &_class_data_; }


void SSL_GeometryFieldSize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_GeometryFieldSize*>(&to_msg);
  auto& from = static_cast<const SSL_GeometryFieldSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.field_lines_.MergeFrom(from._impl_.field_lines_);
  _this->_impl_.field_arcs_.MergeFrom(from._impl_.field_arcs_);
  if (from._internal_field_length() != 0) {
    _this->_internal_set_field_length(from._internal_field_length());
  }
  if (from._internal_field_width() != 0) {
    _this->_internal_set_field_width(from._internal_field_width());
  }
  if (from._internal_goal_width() != 0) {
    _this->_internal_set_goal_width(from._internal_goal_width());
  }
  if (from._internal_goal_depth() != 0) {
    _this->_internal_set_goal_depth(from._internal_goal_depth());
  }
  if (from._internal_boundary_width() != 0) {
    _this->_internal_set_boundary_width(from._internal_boundary_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_GeometryFieldSize::CopyFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryFieldSize::IsInitialized() const {
  return true;
}

void SSL_GeometryFieldSize::InternalSwap(SSL_GeometryFieldSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.field_lines_.InternalSwap(&other->_impl_.field_lines_);
  _impl_.field_arcs_.InternalSwap(&other->_impl_.field_arcs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.boundary_width_)
      + sizeof(SSL_GeometryFieldSize::_impl_.boundary_width_)
      - PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.field_length_)>(
          reinterpret_cast<char*>(&_impl_.field_length_),
          reinterpret_cast<char*>(&other->_impl_.field_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_GeometryFieldSize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_getter, &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_once,
      file_level_metadata_messages_5frobocup_5fssl_5fgeometry_2eproto[3]);
}

// ===================================================================

class SSL_GeometryCameraCalibration::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_GeometryCameraCalibration>()._impl_._has_bits_);
  static void set_has_derived_camera_world_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_derived_camera_world_ty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_derived_camera_world_tz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_GeometryCameraCalibration)
}
SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(const SSL_GeometryCameraCalibration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_GeometryCameraCalibration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_id_){}
    , decltype(_impl_.focal_length_){}
    , decltype(_impl_.principal_point_x_){}
    , decltype(_impl_.principal_point_y_){}
    , decltype(_impl_.distortion_){}
    , decltype(_impl_.q0_){}
    , decltype(_impl_.q1_){}
    , decltype(_impl_.q2_){}
    , decltype(_impl_.q3_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.ty_){}
    , decltype(_impl_.tz_){}
    , decltype(_impl_.derived_camera_world_tx_){}
    , decltype(_impl_.derived_camera_world_ty_){}
    , decltype(_impl_.derived_camera_world_tz_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.camera_id_, &from._impl_.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.derived_camera_world_tz_) -
    reinterpret_cast<char*>(&_impl_.camera_id_)) + sizeof(_impl_.derived_camera_world_tz_));
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryCameraCalibration)
}

inline void SSL_GeometryCameraCalibration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_id_){0u}
    , decltype(_impl_.focal_length_){0}
    , decltype(_impl_.principal_point_x_){0}
    , decltype(_impl_.principal_point_y_){0}
    , decltype(_impl_.distortion_){0}
    , decltype(_impl_.q0_){0}
    , decltype(_impl_.q1_){0}
    , decltype(_impl_.q2_){0}
    , decltype(_impl_.q3_){0}
    , decltype(_impl_.tx_){0}
    , decltype(_impl_.ty_){0}
    , decltype(_impl_.tz_){0}
    , decltype(_impl_.derived_camera_world_tx_){0}
    , decltype(_impl_.derived_camera_world_ty_){0}
    , decltype(_impl_.derived_camera_world_tz_){0}
  };
}

SSL_GeometryCameraCalibration::~SSL_GeometryCameraCalibration() {
  // @@protoc_insertion_point(destructor:SSL_GeometryCameraCalibration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_GeometryCameraCalibration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSL_GeometryCameraCalibration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_GeometryCameraCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryCameraCalibration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tz_) -
      reinterpret_cast<char*>(&_impl_.camera_id_)) + sizeof(_impl_.tz_));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.derived_camera_world_tx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.derived_camera_world_tz_) -
        reinterpret_cast<char*>(&_impl_.derived_camera_world_tx_)) + sizeof(_impl_.derived_camera_world_tz_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_GeometryCameraCalibration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float focal_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.focal_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float principal_point_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.principal_point_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float principal_point_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.principal_point_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float distortion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.distortion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float q0 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.q0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float q1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.q1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float q2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.q2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float q3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.q3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float tx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.tx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ty = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.ty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float tz = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.tz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float derived_camera_world_tx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_derived_camera_world_tx(&has_bits);
          _impl_.derived_camera_world_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float derived_camera_world_ty = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_derived_camera_world_ty(&has_bits);
          _impl_.derived_camera_world_ty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float derived_camera_world_tz = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_derived_camera_world_tz(&has_bits);
          _impl_.derived_camera_world_tz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_GeometryCameraCalibration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryCameraCalibration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 camera_id = 1;
  if (this->_internal_camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_camera_id(), target);
  }

  // float focal_length = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_focal_length = this->_internal_focal_length();
  uint32_t raw_focal_length;
  memcpy(&raw_focal_length, &tmp_focal_length, sizeof(tmp_focal_length));
  if (raw_focal_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_focal_length(), target);
  }

  // float principal_point_x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_principal_point_x = this->_internal_principal_point_x();
  uint32_t raw_principal_point_x;
  memcpy(&raw_principal_point_x, &tmp_principal_point_x, sizeof(tmp_principal_point_x));
  if (raw_principal_point_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_principal_point_x(), target);
  }

  // float principal_point_y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_principal_point_y = this->_internal_principal_point_y();
  uint32_t raw_principal_point_y;
  memcpy(&raw_principal_point_y, &tmp_principal_point_y, sizeof(tmp_principal_point_y));
  if (raw_principal_point_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_principal_point_y(), target);
  }

  // float distortion = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distortion = this->_internal_distortion();
  uint32_t raw_distortion;
  memcpy(&raw_distortion, &tmp_distortion, sizeof(tmp_distortion));
  if (raw_distortion != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_distortion(), target);
  }

  // float q0 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_q0 = this->_internal_q0();
  uint32_t raw_q0;
  memcpy(&raw_q0, &tmp_q0, sizeof(tmp_q0));
  if (raw_q0 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_q0(), target);
  }

  // float q1 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_q1 = this->_internal_q1();
  uint32_t raw_q1;
  memcpy(&raw_q1, &tmp_q1, sizeof(tmp_q1));
  if (raw_q1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_q1(), target);
  }

  // float q2 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_q2 = this->_internal_q2();
  uint32_t raw_q2;
  memcpy(&raw_q2, &tmp_q2, sizeof(tmp_q2));
  if (raw_q2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_q2(), target);
  }

  // float q3 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_q3 = this->_internal_q3();
  uint32_t raw_q3;
  memcpy(&raw_q3, &tmp_q3, sizeof(tmp_q3));
  if (raw_q3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_q3(), target);
  }

  // float tx = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tx = this->_internal_tx();
  uint32_t raw_tx;
  memcpy(&raw_tx, &tmp_tx, sizeof(tmp_tx));
  if (raw_tx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_tx(), target);
  }

  // float ty = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ty = this->_internal_ty();
  uint32_t raw_ty;
  memcpy(&raw_ty, &tmp_ty, sizeof(tmp_ty));
  if (raw_ty != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_ty(), target);
  }

  // float tz = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tz = this->_internal_tz();
  uint32_t raw_tz;
  memcpy(&raw_tz, &tmp_tz, sizeof(tmp_tz));
  if (raw_tz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_tz(), target);
  }

  // optional float derived_camera_world_tx = 13;
  if (_internal_has_derived_camera_world_tx()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_derived_camera_world_tx(), target);
  }

  // optional float derived_camera_world_ty = 14;
  if (_internal_has_derived_camera_world_ty()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_derived_camera_world_ty(), target);
  }

  // optional float derived_camera_world_tz = 15;
  if (_internal_has_derived_camera_world_tz()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_derived_camera_world_tz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryCameraCalibration)
  return target;
}

size_t SSL_GeometryCameraCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryCameraCalibration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 camera_id = 1;
  if (this->_internal_camera_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_camera_id());
  }

  // float focal_length = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_focal_length = this->_internal_focal_length();
  uint32_t raw_focal_length;
  memcpy(&raw_focal_length, &tmp_focal_length, sizeof(tmp_focal_length));
  if (raw_focal_length != 0) {
    total_size += 1 + 4;
  }

  // float principal_point_x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_principal_point_x = this->_internal_principal_point_x();
  uint32_t raw_principal_point_x;
  memcpy(&raw_principal_point_x, &tmp_principal_point_x, sizeof(tmp_principal_point_x));
  if (raw_principal_point_x != 0) {
    total_size += 1 + 4;
  }

  // float principal_point_y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_principal_point_y = this->_internal_principal_point_y();
  uint32_t raw_principal_point_y;
  memcpy(&raw_principal_point_y, &tmp_principal_point_y, sizeof(tmp_principal_point_y));
  if (raw_principal_point_y != 0) {
    total_size += 1 + 4;
  }

  // float distortion = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distortion = this->_internal_distortion();
  uint32_t raw_distortion;
  memcpy(&raw_distortion, &tmp_distortion, sizeof(tmp_distortion));
  if (raw_distortion != 0) {
    total_size += 1 + 4;
  }

  // float q0 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_q0 = this->_internal_q0();
  uint32_t raw_q0;
  memcpy(&raw_q0, &tmp_q0, sizeof(tmp_q0));
  if (raw_q0 != 0) {
    total_size += 1 + 4;
  }

  // float q1 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_q1 = this->_internal_q1();
  uint32_t raw_q1;
  memcpy(&raw_q1, &tmp_q1, sizeof(tmp_q1));
  if (raw_q1 != 0) {
    total_size += 1 + 4;
  }

  // float q2 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_q2 = this->_internal_q2();
  uint32_t raw_q2;
  memcpy(&raw_q2, &tmp_q2, sizeof(tmp_q2));
  if (raw_q2 != 0) {
    total_size += 1 + 4;
  }

  // float q3 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_q3 = this->_internal_q3();
  uint32_t raw_q3;
  memcpy(&raw_q3, &tmp_q3, sizeof(tmp_q3));
  if (raw_q3 != 0) {
    total_size += 1 + 4;
  }

  // float tx = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tx = this->_internal_tx();
  uint32_t raw_tx;
  memcpy(&raw_tx, &tmp_tx, sizeof(tmp_tx));
  if (raw_tx != 0) {
    total_size += 1 + 4;
  }

  // float ty = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ty = this->_internal_ty();
  uint32_t raw_ty;
  memcpy(&raw_ty, &tmp_ty, sizeof(tmp_ty));
  if (raw_ty != 0) {
    total_size += 1 + 4;
  }

  // float tz = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tz = this->_internal_tz();
  uint32_t raw_tz;
  memcpy(&raw_tz, &tmp_tz, sizeof(tmp_tz));
  if (raw_tz != 0) {
    total_size += 1 + 4;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float derived_camera_world_tx = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float derived_camera_world_ty = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float derived_camera_world_tz = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_GeometryCameraCalibration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_GeometryCameraCalibration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_GeometryCameraCalibration::GetClassData() const { return &_class_data_; }


void SSL_GeometryCameraCalibration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_GeometryCameraCalibration*>(&to_msg);
  auto& from = static_cast<const SSL_GeometryCameraCalibration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryCameraCalibration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_camera_id() != 0) {
    _this->_internal_set_camera_id(from._internal_camera_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_focal_length = from._internal_focal_length();
  uint32_t raw_focal_length;
  memcpy(&raw_focal_length, &tmp_focal_length, sizeof(tmp_focal_length));
  if (raw_focal_length != 0) {
    _this->_internal_set_focal_length(from._internal_focal_length());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_principal_point_x = from._internal_principal_point_x();
  uint32_t raw_principal_point_x;
  memcpy(&raw_principal_point_x, &tmp_principal_point_x, sizeof(tmp_principal_point_x));
  if (raw_principal_point_x != 0) {
    _this->_internal_set_principal_point_x(from._internal_principal_point_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_principal_point_y = from._internal_principal_point_y();
  uint32_t raw_principal_point_y;
  memcpy(&raw_principal_point_y, &tmp_principal_point_y, sizeof(tmp_principal_point_y));
  if (raw_principal_point_y != 0) {
    _this->_internal_set_principal_point_y(from._internal_principal_point_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distortion = from._internal_distortion();
  uint32_t raw_distortion;
  memcpy(&raw_distortion, &tmp_distortion, sizeof(tmp_distortion));
  if (raw_distortion != 0) {
    _this->_internal_set_distortion(from._internal_distortion());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_q0 = from._internal_q0();
  uint32_t raw_q0;
  memcpy(&raw_q0, &tmp_q0, sizeof(tmp_q0));
  if (raw_q0 != 0) {
    _this->_internal_set_q0(from._internal_q0());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_q1 = from._internal_q1();
  uint32_t raw_q1;
  memcpy(&raw_q1, &tmp_q1, sizeof(tmp_q1));
  if (raw_q1 != 0) {
    _this->_internal_set_q1(from._internal_q1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_q2 = from._internal_q2();
  uint32_t raw_q2;
  memcpy(&raw_q2, &tmp_q2, sizeof(tmp_q2));
  if (raw_q2 != 0) {
    _this->_internal_set_q2(from._internal_q2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_q3 = from._internal_q3();
  uint32_t raw_q3;
  memcpy(&raw_q3, &tmp_q3, sizeof(tmp_q3));
  if (raw_q3 != 0) {
    _this->_internal_set_q3(from._internal_q3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tx = from._internal_tx();
  uint32_t raw_tx;
  memcpy(&raw_tx, &tmp_tx, sizeof(tmp_tx));
  if (raw_tx != 0) {
    _this->_internal_set_tx(from._internal_tx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ty = from._internal_ty();
  uint32_t raw_ty;
  memcpy(&raw_ty, &tmp_ty, sizeof(tmp_ty));
  if (raw_ty != 0) {
    _this->_internal_set_ty(from._internal_ty());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_tz = from._internal_tz();
  uint32_t raw_tz;
  memcpy(&raw_tz, &tmp_tz, sizeof(tmp_tz));
  if (raw_tz != 0) {
    _this->_internal_set_tz(from._internal_tz());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.derived_camera_world_tx_ = from._impl_.derived_camera_world_tx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.derived_camera_world_ty_ = from._impl_.derived_camera_world_ty_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.derived_camera_world_tz_ = from._impl_.derived_camera_world_tz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_GeometryCameraCalibration::CopyFrom(const SSL_GeometryCameraCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryCameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryCameraCalibration::IsInitialized() const {
  return true;
}

void SSL_GeometryCameraCalibration::InternalSwap(SSL_GeometryCameraCalibration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.derived_camera_world_tz_)
      + sizeof(SSL_GeometryCameraCalibration::_impl_.derived_camera_world_tz_)
      - PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.camera_id_)>(
          reinterpret_cast<char*>(&_impl_.camera_id_),
          reinterpret_cast<char*>(&other->_impl_.camera_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_GeometryCameraCalibration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_getter, &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_once,
      file_level_metadata_messages_5frobocup_5fssl_5fgeometry_2eproto[4]);
}

// ===================================================================

class SSL_GeometryData::_Internal {
 public:
  static const ::SSL_GeometryFieldSize& field(const SSL_GeometryData* msg);
};

const ::SSL_GeometryFieldSize&
SSL_GeometryData::_Internal::field(const SSL_GeometryData* msg) {
  return *msg->_impl_.field_;
}
SSL_GeometryData::SSL_GeometryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_GeometryData)
}
SSL_GeometryData::SSL_GeometryData(const SSL_GeometryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_GeometryData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.calib_){from._impl_.calib_}
    , decltype(_impl_.field_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_field()) {
    _this->_impl_.field_ = new ::SSL_GeometryFieldSize(*from._impl_.field_);
  }
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryData)
}

inline void SSL_GeometryData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.calib_){arena}
    , decltype(_impl_.field_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SSL_GeometryData::~SSL_GeometryData() {
  // @@protoc_insertion_point(destructor:SSL_GeometryData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_GeometryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.calib_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.field_;
}

void SSL_GeometryData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_GeometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.calib_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.field_ != nullptr) {
    delete _impl_.field_;
  }
  _impl_.field_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_GeometryData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SSL_GeometryFieldSize field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SSL_GeometryCameraCalibration calib = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_calib(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_GeometryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .SSL_GeometryFieldSize field = 1;
  if (this->_internal_has_field()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::field(this),
        _Internal::field(this).GetCachedSize(), target, stream);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_calib_size()); i < n; i++) {
    const auto& repfield = this->_internal_calib(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryData)
  return target;
}

size_t SSL_GeometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  total_size += 1UL * this->_internal_calib_size();
  for (const auto& msg : this->_impl_.calib_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .SSL_GeometryFieldSize field = 1;
  if (this->_internal_has_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.field_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_GeometryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_GeometryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_GeometryData::GetClassData() const { return &_class_data_; }


void SSL_GeometryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_GeometryData*>(&to_msg);
  auto& from = static_cast<const SSL_GeometryData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.calib_.MergeFrom(from._impl_.calib_);
  if (from._internal_has_field()) {
    _this->_internal_mutable_field()->::SSL_GeometryFieldSize::MergeFrom(
        from._internal_field());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_GeometryData::CopyFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryData::IsInitialized() const {
  return true;
}

void SSL_GeometryData::InternalSwap(SSL_GeometryData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.calib_.InternalSwap(&other->_impl_.calib_);
  swap(_impl_.field_, other->_impl_.field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_GeometryData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_getter, &descriptor_table_messages_5frobocup_5fssl_5fgeometry_2eproto_once,
      file_level_metadata_messages_5frobocup_5fssl_5fgeometry_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vector2f*
Arena::CreateMaybeMessage< ::Vector2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vector2f >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_FieldLineSegment*
Arena::CreateMaybeMessage< ::SSL_FieldLineSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_FieldLineSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_FieldCicularArc*
Arena::CreateMaybeMessage< ::SSL_FieldCicularArc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_FieldCicularArc >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_GeometryFieldSize*
Arena::CreateMaybeMessage< ::SSL_GeometryFieldSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_GeometryFieldSize >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_GeometryCameraCalibration*
Arena::CreateMaybeMessage< ::SSL_GeometryCameraCalibration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_GeometryCameraCalibration >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_GeometryData*
Arena::CreateMaybeMessage< ::SSL_GeometryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_GeometryData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
